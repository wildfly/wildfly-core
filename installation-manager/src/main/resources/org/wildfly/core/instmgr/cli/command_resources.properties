# Copyright 2023 Red Hat, Inc.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#  http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

installer.description=\
     Updates or revert installations provisioned with the Installation Manager tool. The command also enables you to view the history \
  of updates and export installation details to replicate the current server candidate in a different machine. To use this command you must be connected to \
  a running server. The command is not available for an embedded server and host controllers.\
  \n\
  The purpose of this command is to remotely update or revert installations using the jboss-cli interactive session. If you are updating or reverting a local \
  installation, it is recommended to use the Installation Manager tool.


# GENERIC HOST
installer.abstract-inst-mgr-cmd.option.host.description=\
  Name of the host where this operation will be executed. This option is required only in the domain mode and is not available in the standalone mode.


# CHANNEL ADD
installer.channel-add.description=\
  Subscribes the installation to a new channel.

installer.channel-add.option.channel-name.description=\
  Name of the new channel to add.

installer.channel-add.option.manifest.description=\
  Location of the channel manifest artifact. A manifest defines the versions and artifacts that will be available from this channel. Specify the location as a file \
  path, URL or Maven GAV coordinate (groupId:artifactId:version). If the manifest version is not mentioned in the GAV coordinates, the latest available manifest is used.

installer.channel-add.option.repositories.description=\
  A collection of Maven repositories that contain the artifacts associated with the channel. Specify the location of the repositories as URLs or ID::URL pairs. \
  You can also specify multiple repositories separated by commas.


# CHANNEL EDIT
installer.channel-edit.description=\
  Edits the channel subscription.

installer.channel-edit.option.channel-name.description=\
  Name of the new channel to edit.

installer.channel-edit.option.manifest.description=\
  Location of the channel manifest artifact. A manifest defines the versions and artifacts that will be available from this channel. Specify the location as a file \
  path, URL or Maven GAV coordinate (groupId:artifactId:version). If the manifest version is not mentioned in the GAV coordinates, the latest available manifest is used.

installer.channel-edit.option.repositories.description=\
  A collection of Maven repositories that contain the artifacts associated with the channel. Specify the location of the repositories as URLs or ID::URL pairs. \
  You can also specify multiple repositories separated by commas.


# CHANNEL LIST
installer.channel-list.description=\
  Lists all the channels subscribed by the installation.


# CHANNEL REMOVE
installer.channel-remove.description=\
  Unsubscribes the installation from a channel.

installer.channel-remove.option.channel-name.description=\
  Name of the new channel to remove.


# CLEAN
installer.clean.description=\
  Removes all the custom patches, temporary files, and prepared installations that are ready to be applied. When you run this command without any options, all \
  the prepared and pending installations that are yet to be applied to the server are deleted.

# HISTORY
installer.history.description=\
  Lists all the previous installation states.

installer.history.option.revision.description=\
  Hash of an installation state. The option displays a detailed description about the changes made in that revision.


# REVERT
installer.revert.description=\
  Reverts the server to a previous installation state. The server is reverted in two phases:\
  \n\
  \n\
  Prepare the server candidate: Prepares a server candidate that is reverted to the requested installation state. The server candidate is prepared in a temporary \
  directory (jboss.domain.temp.dir in domain mode or jboss.server.temp.dir in standalone server mode) of the base server. After this operation is complete, no further \
  preparations can be made. Use the 'clean' command if you want to discard this server candidate, clear the cache of installation manager, and prepare a \
  new server candidate.\
  \n\
  \n\
  Apply the server candidate: After the server candidate is prepared, you can apply it to the base server by using the 'shutdown --perform-installation' command. \
  This command will restart the server and apply the server candidate to the base server, reverting the base server to the requested previous installation state.\
  \n\
  \n\
  If you are using a local interactive jboss-cli session, the session will be automatically closed. You will need to connect to the local server again. This ensures \
  that the new session uses the most recent changes available on the local installation.

installer.revert.option.repositories.description=\
  Collection of Maven repositories that contain the artifacts required to prepare an installation at the state specified by the 'revision' option. Specify the \
  location of the repositories as URLs or ID::URL pairs. The ID serves as a user-defined name to uniquely identify each URL. You can also specify multiple repositories \
  separated by commas.

installer.revert.option.local-cache.description=\
  Path to the local Maven repository cache. It overrides the default Maven repository at ~/.m2/repository. The 'path' value represents the location on the file \
  system of the remote machine to which the JBoss CLI is connected.

installer.revert.option.no-resolve-local-cache.description=\
  Perform the operation without resolving or installing artifacts from/into the local maven cache.

installer.revert.option.offline.description=\
  Perform installation from local or file-system Maven repositories only.

installer.revert.option.maven-repo-file.description=\
  The location of the local Maven repository zip File. The file contains the necessary artifacts to prepare the server candidate we want to apply.

installer.revert.option.revision.description=\
  Hash of an installation state of the previous version. The base server will be reverted to this installation state.

installer.revert.option.headers.description=\
  Any operation headers. Depending on the target environment, preparing a server could take time because all the required artifacts need to be downloaded to provision \
  the server candidate. You can use the operation headers to increase the default blocking timeout which is 300 seconds.


# UPDATE
installer.update.description=\
  Updates a server instance with the latest patches.\
  \n\
  \n\
  The complete server update is done in three phases: \
  \n\
  \n\
  List the available updates: Retrieves the list of artifacts that will be updated. If the --dry-run option is not specified, a message asking confirmation to move \
  ahead with the updates of the listed components is requested. Listing of the available updates can be skipped by using the --confirm option. The --confirm and --dry-run \
  options cannot be used together.\
  \n\
  \n\
  Prepare the server candidate: Prepares a server candidate with the latest available patches on the target machine. The server candidate is prepared in a temporary \
  directory (jboss.domain.temp.dir in domain mode or jboss.server.temp.dir in standalone server mode) of the base server. After this operation is complete, no further \
  preparations can be made. Use the 'clean' command if you want to discard this server candidate, clear the cache of installation manager, and prepare a \
  new server candidate.\
  \n\
  \n\
  Apply the server candidate: After the server candidate is prepared, you can apply it to the base server by using the 'shutdown --perform-installation' command. \
  This command will restart the base server and apply the updates prepared in the previous phase.

installer.update.option.dry-run.description=\
  Executes the command without preparing any server candidate.

installer.update.option.confirm.description=\
 Executes the command and prepares a server candidate with the available updates without asking for confirmation.

installer.update.option.repositories.description=\
  A collection of Maven repositories that contain the artifacts required to prepare an installation. Specify the location of the repositories as URLs or ID::URL \
  pairs. You can also specify multiple repositories separated by commas.


installer.update.option.local-cache.description=\
  Path to the local Maven repository cache. It overrides the default Maven repository at ~/.m2/repository. The 'path' value represents the location on the file \
  system of the remote machine to which the JBoss CLI is connected.

installer.update.option.no-resolve-local-cache.description=\
  Perform the operation without resolving or installing artifacts from/into the local maven cache.

installer.update.option.offline.description=\
  Perform installation from local or file-system Maven repositories only.

installer.update.option.headers.description=\
  Any operation headers. Depending on the target environment, preparing a server could take time because all the required artifacts need to be downloaded to provision \
  the server candidate. You can use the operation headers to increase the default blocking timeout which is 300 seconds.


# UPLOAD CUSTOM PATCHES
installer.upload-custom-patch.description=\
  Uploads a custom patch to the base server. It also creates a new channel that will provide this custom patch and subscribes the installation to this channel. \
  After uploading a custom patch, if you want to remove it you can use the 'clean' operation to remove it from the server.

installer.upload-custom-patch.option.custom-patch-file.description=\
  Location of the custom patch file.

installer.upload-custom-patch.option.manifest.description=\
  Location of the channel manifest artifact associated with the custom patch that will be uploaded. A manifest defines the versions and artifacts that will be available from the channel that consumes this custom patch. Specify the location as a file \
  path, URL or Maven GAV coordinate (groupId:artifactId:version). If the manifest version is not mentioned in the GAV coordinates, the latest available manifest is used.


# REMOVE CUSTOM PATCHES
installer.remove-custom-patch.description=\
  Removes a custom patch from the base server. It also removes the channel that provides this custom patch and unsubscribes the installation from that channel.

installer.remove-custom-patch.option.manifest.description=\
  Location of the channel manifest artifact associated with custom patch that will be removed. A manifest defines the versions and artifacts that will be available from the channel that consumes this custom patch. \
  Specify the location as a Maven GA coordinate (groupId:artifactId).