# Host root
host=The root node of the host-level management model.
host.add=Add a host controller using an empty host configuration.
host.host=A host
host.host-state=The current state of the host process.
host.runtime-configuration-state=The current persistent configuration state, one of starting, ok, reload-required, restart-required, stopping or stopped.
host.name=The name to use for this host's host controller. Must be unique across the domain. If not set, defaults to the runtime value of InetAddress.getLocalHost().getHostName().
host.release-version=The version of the WildFly Core release this host controller is running.
host.release-codename=The codename of the WildFly Core release this host controller is running.
host.product-name=The name of the WildFly Core based product that is being run by this host controller.
host.product-version=The version of the WildFly Core based product release that is being run by this host controller.
host.management-major-version=The major version of the WildFly Core kernel management interface that is provided by this host controller.
host.management-minor-version=The minor version of the WildFly Core kernel management interface that is provided by this host controller.
host.management-micro-version=The micro version of the WildFly Core kernel management interface that is provided by this host controller.
host.running-mode=The current running mode of the Host Controller. Either NORMAL (normal operations) or ADMIN_ONLY.  An ADMIN_ONLY server will start any configured management interfaces and accept management requests, but will not start servers or, if this host controller is the master for the domain, accept incoming connections from slave host controllers.
host.suspend-state=The suspend state of the host
host.uuid=Unique Id of this server instance.
host.organization=Identification of the current organization this host controller is a part of.
host.domain-organization=Identification of the current organization the domain of this host is a part of.
host.management=Configuration of the host's management system.
host.management.interface=Interface on which the host's socket for intra-domain management communication should be opened.
host.directory-grouping=Describes how the writable directories for servers managed by this host controller should be organized. The default value, 'by-server', indicates each server's writable directories should be grouped under the server's name in the domain/servers directory. The alternative, 'by-type' indicates each server's writable directories should be grouped based on their "type" (i.e. "data", "log", "tmp") with directories of a given type for all servers appearing in the domain level directory for that type, e.g. domain/data/servers/server-name.
host.management.port=Port on which the host's socket for intra-domain management communication should be opened.
host.domain-controller=Configuration of how the host should interact with the Domain Controller
host.is-domain-controller=Indicates whether this host is a domain controller or expects a remote domain controller to be configured.
host.is-domain-controller.deprecated=Use write-attribute to configure the host controller domain-controller attribute.
host.domain-controller.local=Configure a local Domain Controller
host.write-local-domain-controller=Configures the host to act as the Domain Controller
host.write-local-domain-controller.deprecated=Use the simple write-attribute to edit the domain controller.
host.remove-local-domain-controller=Removes the local domain controller
host.domain-controller.remote=Remote Domain Controller connection configuration
host.write-remote-domain-controller=Adds a remote Domain Controller connection configuration
host.write-remote-domain-controller.deprecated=Use the simple write-attribute to edit the domain controller.
host.write-remote-domain-controller.host=The address used for the Domain Controller connection
host.write-remote-domain-controller.ignore-unused-configuration=Set to true to instruct the master Host Controller to automatically not forward configuration and operations for profiles, socket binding groups and server groups which do not affect our servers. If undefined the default behavior is 'true' unless the process was started with the '--backup' command line parameter used, in which case the default behavior is 'false'.
host.write-remote-domain-controller.port=The port used for the Domain Controller connection
host.write-remote-domain-controller.protocol=The protocol used for the Domain Controller connection
host.write-remote-domain-controller.authentication-context=The authentication context to use for outbound security configuration
host.write-remote-domain-controller.username=The username to use for this host when it authenticates with the master Domain Controller. If undefined, the host's name will be used. Setting this attribute makes it possible to avoid setting up separate credentials for every host in a domain.
host.write-remote-domain-controller.username.deprecated=An authentication-context should be referenced instead.
host.write-remote-domain-controller.security-realm=Name of the legacy security realm from which the host's credentials for authenticating with the master Domain Controller should be obtained.
host.write-remote-domain-controller.security-realm.deprecated=An authentication-context should be referenced instead.
host.write-remote-domain-controller.admin-only-policy=Name of the policy controlling how a slave host controller started in 'admin-only' mode and without the use of the '--cached-dc' startup option should deal with the absence of a local copy of the domain-wide configuration.
host.remove-remote-domain-controller=Removes a remote Domain Controller connection configuration
host.domain-controller.host=The address used for the Domain Controller connection
host.domain-controller.ignore-unused-configuration=Set to true to instruct the master Host Controller to automatically not forward configuration and operations for profiles, socket binding groups and server groups which do not affect our servers. If undefined the default behavior is 'true' unless the process was started with the '--backup' command line parameter used, in which case the default behavior is 'false'.
host.domain-controller.port=The port used for the Domain Controller connection
host.domain-controller.protocol=The protocol used for the Domain Controller connection
host.domain-controller.authentication-context=The authentication context to use for outbound security configuration
host.domain-controller.username=The username to use for this host when it authenticates with the master Domain Controller. If undefined, the host's name will be used. Setting this attribute makes it possible to avoid setting up separate credentials for every host in a domain.
host.domain-controller.username.deprecated=An authentication-context should be referenced instead.
host.domain-controller.security-realm=Name of the legacy security realm from which the host's credentials for authenticating with the master Domain Controller should be obtained.
host.domain-controller.security-realm.deprecated=An authentication-context should be referenced instead.
host.domain-controller.admin-only-policy=Name of the policy controlling how a slave host controller started in 'admin-only' mode and without the use of the '--cached-dc' startup option should deal with the absence of a local copy of the domain-wide configuration.
host.domain-controller.remove=Removes a remote Domain Controller connection configuration
host.namespaces=Map of namespaces used in the configuration XML document, where keys are namespace prefixes and values are schema URIs.
host.schema-locations=Map of locations of XML schemas used in the configuration XML document, where keys are schema URIs and values are locations where the schema can be found.
# end workaround
host.server-state=State of a process
host.extension=A list of extension modules.
host.subsystem=Subsystems to be run on the host. Subsystems defined directly on a host must a) allow installation on a host b) be initialised by an extension module on the host.
host.path=A list of named filesystem paths.
host.persist-name=If set to true, the host controller name will be written to the host configuration file. The default value is false, and the name is not persisted.
host.interface=A list of fully specified named network interfaces available for use on the host.
host.jvm=A list of Java Virtual Machine configurations that can be applied to servers on the host.
host.system-properties=A list of system properties to set on all servers on the host.
host.core-services=Core services provided by the host's host controller.
host.system-property=A system property to set on all servers on the host.
host.core-service=Core services provided by the host's host controller.
host.server-config=Host-level configurations for the servers that can run on this host.
host.server=Servers currently running on the host
host.socket-binding-group=The socket binding group currently configured for use on the host controller.
host.shutdown=Shuts down the host and its servers
host.shutdown.suspend-timeout=The timeout, in seconds, to wait for all domain mode servers managed by the target host to suspend before shutdown proceeds. If this is zero (the default) then the server will suspend immediately. A value larger than zero means the server will wait up to this many seconds for all active requests to finish. A value smaller than zero means that the server will wait indefinitely for all active requests to finish.
host.shutdown.restart=If true, once shutdown the host controller will be restarted again
host.state=The current state of the host controller; either STARTING, RUNNING or RESTART_REQUIRED
host.master=Whether this host is master host for the domain; i.e. whether this process is acting as the Domain Controller.
host.resolve-expression-on-domain=Operation that accepts an expression as input (or a string that can be parsed into an expression) and resolves it against the local system properties and environment variables on all servers managed by this host controller.
host.resolve-expression-on-domain.expression=The expression to resolve.
host.resolve-expression-on-domain.reply=The resolved expression, or the string form of the original input value if it did not represent an expression.
host.suspend-servers=Suspends operations on all servers managed by this host controller. All current operations will be allowed to finish, and new operations will be rejected.
host.suspend-servers.suspend-timeout=The timeout, in seconds, to wait for all domain mode servers managed by the target host to complete the suspend operation. If this is zero (the default) the operation will return immediately. A value larger than zero means the operation will wait up to this many seconds to complete before returning. A value smaller than zero means that the operation will wait indefinitely for all active requests to finish. Note that the operation will not roll back if the timeout is exceeded, it just means that not all current requests completed in the specified timeout.
host.resume-servers=Resumes processing on all servers managed by this host controller.
host.env=The host controller environment.
host.env.process-controller-address=The address of the process controller this host controller is connected to.
host.env.process-controller-port=The port of the process controller this host controller is connected to.
host.env.host-controller-address=The address this host controller uses for communication with the process controller. Not related to communication with management clients.
host.env.host-controller-port=The port this host controller uses for communication with the process controller. Not related to communication with management clients.
host.env.home-dir=The home directory of this host controller.
host.env.modules-dir=The directory where the modules are found.
host.env.domain-base-dir=The base directory of the domain.
host.env.domain-config-dir=The configuration directory of the domain.
host.env.host-config-file=The configuration file for this host.
host.env.domain-config-file=The configuration file for this domain.
host.env.domain-content-dir=The directory where user content (e.g. deployments) that is managed by the server is stored.
host.env.domain-data-dir=The data directory.
host.env.domain-log-dir=The directory where log files are sent.
host.env.domain-servers-dir=The directory where this host's started servers store their runtime data.
host.env.domain-temp-dir=The temporary directory.
host.env.default-jvm=The default jvm.
host.env.is-restart=Whether this host was restarted by the process controller.
host.env.backup-domain-files=Whether this host controller should back up the domain content from the master domain controller. Can only be true on slave host controllers.
host.env.use-cached-dc=Whether this host controller should use cached domain content (as obtained by starting with --backup) when starting the host. Can only be true on slave host controllers.
host.env.initial-running-mode=The initial running mode of the host, when the Host Controller process was launched. Either NORMAL or ADMIN_ONLY.  An ADMIN_ONLY server will start any configured management interfaces and accept management requests, but will not start services used for handling end user requests.
host.env.qualified-host-name=The fully qualified host name detected at startup.
host.env.host-name=The local host name detected at server startup.


host.reload=Reloads the Host Controller by shutting down all its services and starting again. The JVM itself is not restarted. Note however that this will lead to a full process restart for any server processes managed by this host controller.
host.reload.admin-only=Whether the Host Controller should start in running mode ADMIN_ONLY when it restarts. An ADMIN_ONLY Host Controller will start any configured management interfaces and accept management requests, but will not start servers or, if this host controller is the master for the domain, accept incoming connections from slave host controllers.
host.reload.restart-servers=If true the servers will be reloaded, and if false the servers will be left running and reconnect to the Host Controller when started again.
host.reload.use-current-domain-config=Only has an effect if --read-only-domain-config was specified when starting the controller. In that case, if this parameter is set to false the reloaded controller loads the original configuration version; if null or true the current runtime version of the model is used.
host.reload.use-current-host-config=Only has an effect if --read-only-host-config was specified when starting the controller. In that case, if this parameter is set to false the reloaded controller loads the original configuration version; if null or true the current runtime version of the model is used.
host.reload.domain-config=Use to override the name of the domain config to use for the reloaded host controller. When making changes to the model after the reload, the changes will still be persisted to the original domain configuration file that was used to first boot up the host controller. This parameter is resolved the same way as the --domain-config command-line option.
host.reload.host-config=Use to override the name of the host config to use for the reloaded host controller. When making changes to the model after the reload, the changes will still be persisted to the original host configuration file that was used to first boot up the host controller. This parameter is resolved the same way as the --host-config command-line option.

server-config=Defines a server in the host-level management model.
server-config.add=Add a new server configuration.
server-config.remove=Remove an existing server configuration.
server-config.interface=A list of fully specified named network interfaces available for use on the server.
server-config.jvm=The Java Virtual Machine (jvm) configuration for use by this server.
server-config.name=The name of the server.
server-config.group=The name of a server group from the domain model.
server-config.path=A list of named filesystem paths.
server-config.priority=Deprecated. Unused.
server-config.priority.deprecated=Unused.
server-config.cpu-affinity=Deprecated. Unused.
server-config.cpu-affinity.deprecated=Unused.
server-config.socket-binding-group=The socket binding group to which this server belongs.
server-config.socket-binding-default-interface=The socket binding group default interface for this server.
server-config.socket-binding-port-offset=An offset to be added to the port values given by the socket binding group for this server.
server-config.auto-start=Whether or not this server should be started when the Host Controller starts.
server-config.status=The current status of the server.
server-config.system-property=A list of system properties to set on this server.
server-config.update-auto-start-with-server-status=Update auto-start attribute with the status of the server.

server-config.ssl=SSL Configuration for when the server instance is connecting back to it's host controller.
server-config.ssl.loopback=SSL Configuration for when the server instance is connecting back to it's host controller.
server-config.ssl.loopback.add=Add the SSL configuration for the server.
server-config.ssl.loopback.remove=Remove the SSL configuration from the server.
server-config.ssl.loopback.ssl-protocol=The protocol used to initialise the SSLContext, if 'Default' is specified the default SSLContext of the JVM will be used.
server-config.ssl.loopback.trust-manager-algorithm=The algorithm used to initialise the TrustManagerFactory used to obtain the TrustManager[] passed to the SSLContext, if not specified the JVM default is used instead.
server-config.ssl.loopback.truststore-type=The type of the trust store
server-config.ssl.loopback.truststore-path=The fully qualified path of the trust store.
server-config.ssl.loopback.truststore-password=The password to open the trust store.

server=The managed server instance.
server.launch-type=The manner in which the server process was launched. Either "DOMAIN" for a domain mode server launched by a Host Controller, "STANDALONE" for a standalone server launched from the command line, or "EMBEDDED" for a standalone server launched as an embedded part of an application running in the same virtual machine.
server.server-state=The current state of the server controller
server.runtime-configuration-state=The current state of the server persistent configuration; one of starting, ok, reload-required, restart-required, stopping or stopped.

# Management
#host.core.management=Core management
host.core.management.native-interface=Configuration of the server's native management interface
host.core.management.native-interface.deprecated=The native-interface configuration is deprecated and may be removed or moved in future versions.
host.core.management.native-interface.add=Adds the server's native management interface
host.core.management.native-interface.remove=Removes the server's native management interface
host.core.management.native-interface.interface=The network interface on which the host controller's socket for native management communication should be opened.
host.core.management.native-interface.port=The port on which the host controller's socket for native management communication should be opened.
host.core.management.native-interface.ssl-context=Reference to the SSLContext to use for this management interface.
host.core.management.native-interface.security-realm=The legacy security realm to use for the native management interface.
host.core.management.native-interface.security-realm.deprecated=Configuration should migrate to reference 'sasl-authentication-factory', and 'ssl-context' capabilities as required.
host.core.management.native-interface.sasl-authentication-factory=The SASL authentication policy to use to secure this interface.
host.core.management.native-interface.sasl-protocol=The name of the protocol to be passed to the SASL mechanisms used for authentication.
host.core.management.native-interface.sasl-protocol.deprecated=Only for use with the legacy security realms.
host.core.management.native-interface.server-name=The name of the server used in the initial Remoting exchange and within the SASL mechanisms.
host.core.management.native-interface.server-name.deprecated=Only for use with the legacy security realms.
host.core.management.http-interface=Configuration of the server's HTTP management interface
host.core.management.http-interface.deprecated=The http-interface configuration is deprecated and may be removed or moved in future versions.
host.core.management.http-interface.add=Adds the configuration of the server's HTTP management interface
host.core.management.http-interface.allowed-origins=Comma separated list of trusted Origins for sending Cross-Origin Resource Sharing requests on the management API once the user is authenticated.
host.core.management.http-interface.remove=Adds the configuration of the server's HTTP management interface
host.core.management.http-interface.interface=The network interface on which the host controller's socket for HTTP management communication should be opened.
host.core.management.http-interface.port=The port on which the host controller's socket for HTTP management communication should be opened.
host.core.management.http-interface.secure-interface=The network interface on which the host's socket for HTTPS management communication should be opened if a different interface should be used from that specified by the 'interface' attribute. If not specified the interface specified by the 'interface' attribute will be used. If specified with a different value from the 'interface' attribute, redirect of HTTPS requests received on the HTTP socket to the HTTPS address will not be supported. When defined at least one of ssl-context or security-realm must also be defined.
host.core.management.http-interface.secure-port=The port on which the host controller's socket for HTTPS management communication should be opened. When defined at least one of ssl-context or security-realm must also be defined.
host.core.management.http-interface.http-authentication-factory=The authentication policy to use to secure the interface for normal HTTP requests.
host.core.management.http-interface.ssl-context=Reference to the SSLContext to use for this management interface.
host.core.management.http-interface.security-realm=The legacy security realm to use for the HTTP management interface.
host.core.management.http-interface.security-realm.deprecated=Configuration should migrate to reference 'http-authentication-factory', 'sasl-authentication-factory', and 'ssl-context' capabilities as required.
host.core.management.http-interface.console-enabled=Flag that indicates admin console is enabled
host.core.management.http-interface.constant-headers=The set of constant HTTP headers to apply to response messages.
host.core.management.http-interface.constant-headers.headers=The headers to set for the matched path.
host.core.management.http-interface.constant-headers.path=The prefix of the path the headers should be applied to.
host.core.management.http-interface.constant-headers.name=The name of the HTTP header to set.
host.core.management.http-interface.constant-headers.value=The value to set for the HTTP header.
host.core.management.http-interface.http-upgrade-enabled=Flag that indicates HTTP Upgrade is enabled, which allows HTTP requests to be upgraded to native remoting connections
host.core.management.http-interface.http-upgrade-enabled.deprecated=Instead use http-upgrade.enabled
host.core.management.http-interface.http-upgrade=HTTP Upgrade specific configuration
host.core.management.http-interface.http-upgrade.enabled=Flag that indicates HTTP Upgrade is enabled, which allows HTTP requests to be upgraded to native remoting connections
host.core.management.http-interface.http-upgrade.sasl-authentication-factory=The server side SASL authentication policy to use to secure the interface where the connection is after a HTTP upgrade.
host.core.management.http-interface.sasl-protocol=The name of the protocol to be passed to the SASL mechanisms used for authentication.
host.core.management.http-interface.sasl-protocol.deprecated=Only for use with the legacy security realms.
host.core.management.http-interface.server-name=The name of the server used in the initial Remoting exchange and within the SASL mechanisms.
host.core.management.http-interface.server-name.deprecated=Only for use with the legacy security realms.

# Ignored resource
ignored-resources=Names of direct child resources of the domain root resource requests for which this Host Controller should ignore. Only relevant on a slave Host Controller. Configuring such "ignored resources" may help allow a Host Controller from an earlier release to function as a slave to a master Host Controller running a later release, by letting the slave ignore portions of the configuration its version of the software cannot understand. This strategy can only be successful if the servers managed by the slave Host Controller do not reference any of the ignored configuration.
ignored-resource-type=Identifies a type of resource (e.g. 'profile' or 'socket-binding-group') certain instances of which should be ignored.
ignored-resource-type.add=Adds a type of resource certain instances of which should be ignored.
ignored-resource-type.remove=Removes a type of resource from the set of those for which certain instances should be ignored.
ignored-resource-type.names=A list of names of specific instances of this type of resource that should be ignored. Including '*' in the list means all resources of the type should be ignored.
ignored-resource-type.wildcard=A boolean that if 'true' indicates all resources of the type should be ignored.

# JVMs
jvm=The JVM configuration for managed processes / servers.
jvm.add=Add a new JVM configuration.
jvm.remove=Remove an existing JVM configuration.
jvm.name=The name of the JVM configuration.
jvm.heap-size=The initial heap size allocated by the JVM.
jvm.max-heap-size=The maximum heap size that can be allocated by the JVM.
jvm.permgen-size=The initial permanent generation size.
jvm.permgen-size.deprecated=The JVM no longer provides a separate Permanent Generation space.
jvm.max-permgen-size=The maximum size of the permanent generation.
jvm.max-permgen-size.deprecated=The JVM no longer provides a separate Permanent Generation space.
jvm.stack-size=The JVM stack size settings.
jvm.agent-lib=The JVM agent lib.
jvm.agent-path=The JVM agent path.
jvm.java-agent=The java agent.
jvm.jvm-options=The JVM options.
jvm.add-jvm-option=Add a jvm option.
jvm.add-jvm-option.jvm-option=A JVM option.
jvm.remove-jvm-option=Remove a jvm option.
jvm.remove-jvm-option.jvm-option=A JVM option.
jvm.environment-variables=The JVM environment variables.
jvm.launch-command=Command prefixed to JVM at launch.
jvm.module-options=The options passed to JBoss Modules during the boot of the server. Note that if a -javaent: is \
  defined in the module options the jboss-modules.jar will be automatically added as a Java agent.
#jvm.system.properties=The JVM system properties.
jvm.java-home=The java home
jvm.type=The JVM type can be either SUN or IBM
jvm.debug-enabled=Boolean value indicating whether debug is enabled.
jvm.debug-options=The debug options.
jvm.env-classpath-ignored=Ignore the environment classpath.
jvm.environment-variable.add=Add a jvm environment variable.
jvm.environment-variable.remove=Remove a jvm environment variable.
jvm.environment-variable.name=The name of the jvm environment variable.
jvm.environment-variable.value=The value of the jvm environment variable.

# Discovery options
discovery-options=A list of domain controller discovery options.
discovery-options.discovery-options=The ordered list of domain controller discovery options.
discovery-options.discovery-options.deprecated=The attribute still preserved for compatibility reasons, options attribute should be used instead now.
discovery-options.discovery-option=A list of domain controller discovery options.
discovery-option=A domain controller discovery option.
discovery-option.name=The name for this domain controller discovery option.
discovery-option.code=The fully qualified class name for the DiscoveryOption implementation.
discovery-option.module=The module from which to load the DiscoveryOption implementation. If not provided, the DiscoveryOption implementation must be available from the Host Controller's own module.
discovery-option.properties=The domain controller discovery option properties.
discovery-option.add=Adds the configuration for a domain controller discovery option.
discovery-option.remove=Removes the configuration for a domain controller discovery option.
discovery-options.static-discovery=A list of static domain controller discovery options.
static-discovery=A static domain controller discovery option.
static-discovery.name=The name for this static domain controller discovery option.
static-discovery.host=The remote domain controller's host name.
static-discovery.port=The remote domain controller's port number.
static-discovery.protocol=The remote domain controller's protocol.
static-discovery.add=Adds the configuration for a static domain controller discovery option.
static-discovery.remove=Removes the configuration for a static domain controller discovery option.
discovery-options.options=The ordered list of domain controller discovery options.
discovery-options.options.name=The name for this domain controller discovery option.
discovery-options.options.code=The fully qualified class name for the DiscoveryOption implementation.
discovery-options.options.module=The module to load the DiscoveryOption implementation from.
discovery-options.options.properties=The domain controller discovery option properties.
discovery-options.options.custom-discovery=A domain controller discovery option.
discovery-options.options.static-discovery=A static domain controller discovery option.
discovery-options.options.host=The remote domain controller's host name.
discovery-options.options.port=The remote domain controller's port number.
discovery-options.options.protocol=The remote domain controller's protocol.
