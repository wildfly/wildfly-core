elytron=The Elytron Subsystem
# Operations
elytron.add=Operation adds the Elytron subsystem
elytron.remove=Operation removes the Elytron subsystem
# Attributes
elytron.default-authentication-context=The default authentication context to be associated with all deployments.
elytron.initial-providers=Reference to the Providers that should be registered ahead of all existing Providers.
elytron.final-providers=Reference to the Providers that should be registered after all existing Providers.
elytron.disallowed-providers=A list of providers that are not allowed, and will be removed from the providers list.
elytron.register-jaspi-factory=Should the Elytron JASPI factory be globally registered?
elytron.default-ssl-context=Reference to the SSLContext which should be globally registered as the default.

#######################
# Security Properties #
#######################

elytron.security-properties=Security properties to be set.

################################
# Authentication Configuration #
################################

elytron.authentication-configuration=An individual authentication configuration definition.
# Operations
elytron.authentication-configuration.add=Add a new authentication configuration definition.
elytron.authentication-configuration.remove=Remove the authentication configuration definition.
# Attributes
elytron.authentication-configuration.extends=A previously defined authentication configuration to extend.
elytron.authentication-configuration.anonymous=Enables anonymous authentication.
elytron.authentication-configuration.authentication-name=The authentication name to use.
elytron.authentication-configuration.authorization-name=The authorization name to use.
elytron.authentication-configuration.host=The host to use.
elytron.authentication-configuration.port=The port to use.
elytron.authentication-configuration.protocol=The protocol to use.
elytron.authentication-configuration.realm=The realm to use.
elytron.authentication-configuration.security-domain=Reference to a security domain to obtain a forwarded identity.
elytron.authentication-configuration.forwarding-mode=The type of security identity forwarding to use. A mode of 'authentication' forwarding forwards the principal and credential. A mode of 'authorization' forwards the authorization id, allowing for a different authentication identity.
elytron.authentication-configuration.sasl-mechanism-selector=The SASL mechanism selector string.
elytron.authentication-configuration.mechanism-properties=Configuration properties for the SASL authentication mechanism.
elytron.authentication-configuration.mechanism-properties.name=Name of the property.
elytron.authentication-configuration.mechanism-properties.value=Value of the property.
elytron.authentication-configuration.credential-reference=The reference to credential stored in CredentialStore under defined alias or clear text password.
elytron.authentication-configuration.credential-reference.store=The name of the credential store holding the alias to credential.
elytron.authentication-configuration.credential-reference.alias=The alias which denotes stored secret or credential in the store.
elytron.authentication-configuration.credential-reference.type=The type of credential this reference is denoting.
elytron.authentication-configuration.credential-reference.clear-text=Secret specified using clear text. Check credential store way of supplying credential/secrets to services.
elytron.authentication-configuration.kerberos-security-factory=Reference to a kerberos security factory used to obtain a GSS kerberos credential

elytron.authentication-context=An individual authentication context definition.
# Operations
elytron.authentication-context.add=Add a new authentication context definition.
elytron.authentication-context.remove=Remove the authentication-context definition.
# Attributes
elytron.authentication-context.extends=A previously defined authentication context to extend.
elytron.authentication-context.match-rules=The match-rules for this authentication context.
elytron.authentication-context.match-rules.match-abstract-type=The abstract type to match against.
elytron.authentication-context.match-rules.match-abstract-type-authority=The abstract type authority to match against.
elytron.authentication-context.match-rules.match-host=The host to match against.
elytron.authentication-context.match-rules.match-local-security-domain=The local security domain to match against.
elytron.authentication-context.match-rules.match-no-user=Match against no user.
elytron.authentication-context.match-rules.match-path=The patch to match against.
elytron.authentication-context.match-rules.match-port=The port to match against.
elytron.authentication-context.match-rules.match-protocol=The protocol to match against.
elytron.authentication-context.match-rules.match-urn=The URN to match against.
elytron.authentication-context.match-rules.match-user=The user to match against.
elytron.authentication-context.match-rules.authentication-configuration=The authentication configuration to use for a successful match.
elytron.authentication-context.match-rules.ssl-context=The SSLContext to use for a successful match.

#############
# Providers #
#############

elytron.aggregate-providers=An aggregation of two or more Provider[] resources.
# Operations
elytron.aggregate-providers.add=The add operation for the aggregated providers resource
elytron.aggregate-providers.remove=The remove operation for the aggregated providers resource
# Attributes
elytron.aggregate-providers.providers=The referenced Provider[] resources to aggregate.

elytron.provider-loader=A definition for a Provider loader.
# Operations
elytron.provider-loader.add=Add a new provider loader definition.
elytron.provider-loader.remove=Remove a provider loader definition.
# Configuration Attributes
elytron.provider-loader.module=The name of the module to load the provider from.
elytron.provider-loader.class-names=The fully qualified class names of the providers to load, these are loaded after the service-loader discovered providers and duplicates will be skipped.
elytron.provider-loader.path=The path of the file to use to initialise the providers.
elytron.provider-loader.relative-to=The base path of the configuration file.
elytron.provider-loader.argument=An argument to be passed into the constructor as the Provider is instantiated.
elytron.provider-loader.configuration=The key/value configuration to be passed to the Provider to initialise it.
# Runtime Attributes
elytron.provider-loader.loaded-providers=The list of providers loaded by this provider loader.
elytron.provider-loader.loaded-providers.name=The name reported by the provider instance.
elytron.provider-loader.loaded-providers.info=The information reported by the provider instance.
elytron.provider-loader.loaded-providers.version=The version reported by the provider instance.
elytron.provider-loader.loaded-providers.services=List of services available from this provider.
elytron.provider-loader.loaded-providers.type=The service type.
elytron.provider-loader.loaded-providers.algorithm=The algorithm supported by the service.
elytron.provider-loader.loaded-providers.class-name=The class name of the implementation of the service SPI.

#################
# Audit Logging #
#################

elytron.aggregate-security-event-listener=An aggregation of two or more security event listener resources.
# Operations
elytron.aggregate-security-event-listener.add=The add operation for the aggregated security event listener resource.
elytron.aggregate-security-event-listener.remove=The remove operation for the aggregated security event listener resource
# Attributes
elytron.aggregate-security-event-listener.security-event-listeners=The referenced security event listener resources to aggregate.

elytron.custom-security-event-listener=A custom security event listener. (Audit logger for example.)
# Operations
elytron.custom-security-event-listener.add=The add operation for the listener.
elytron.custom-security-event-listener.remove=The remove operation for the listener.
# Attributes
elytron.custom-security-event-listener.module=The module to use to load the custom security event listener.
elytron.custom-security-event-listener.class-name=The class name of the implementation of the custom security event listener.
elytron.custom-security-event-listener.configuration=The optional key/value configuration for the custom security event listener.

elytron.file-audit-log=An audit logger that logs to a local file.
# Operations
elytron.file-audit-log.add=Add the audit logger resource.
elytron.file-audit-log.remove=Remove the audit logger resource.
#Attributes
elytron.file-audit-log.path=Path of the file to be written.
elytron.file-audit-log.relative-to=The relative path to the audit log.
elytron.file-audit-log.autoflush=Whether every event should be immediately flushed to disk (If undefined will default to the value of synchronized).
elytron.file-audit-log.synchronized=Whether every event should be immediately synchronised to disk.
elytron.file-audit-log.format=The format to use to record the audit event.

elytron.periodic-rotating-file-audit-log=An audit log definition for persisting an audit log to a local files rotating the log after a time period derived from the given suffix string, which should be in a format understood by java.time.format.DateTimeFormatter.
# Operations
elytron.periodic-rotating-file-audit-log.add=Add the audit logger resource.
elytron.periodic-rotating-file-audit-log.remove=Remove the audit logger resource.
#Attributes
elytron.periodic-rotating-file-audit-log.path=Path of the file to be written.
elytron.periodic-rotating-file-audit-log.relative-to=The relative path to the audit log.
elytron.periodic-rotating-file-audit-log.autoflush=Whether every event should be immediately flushed to disk (If undefined will default to the value of synchronized).
elytron.periodic-rotating-file-audit-log.synchronized=Whether every event should be immediately synchronised to disk.
elytron.periodic-rotating-file-audit-log.format=The format to use to record the audit event.
elytron.periodic-rotating-file-audit-log.suffix=The suffix string in a format which can be understood by java.time.format.DateTimeFormatter. The period of the rotation is automatically calculated based on the suffix.

elytron.size-rotating-file-audit-log=An audit log definition for persisting an audit log to a local files rotating the log after the size of the file grows beyond a certain point and keeping a fixed number of backups.
# Operations
elytron.size-rotating-file-audit-log.add=Add the audit logger resource.
elytron.size-rotating-file-audit-log.remove=Remove the audit logger resource.
#Attributes
elytron.size-rotating-file-audit-log.path=Path of the file to be written.
elytron.size-rotating-file-audit-log.relative-to=The relative path to the audit log.
elytron.size-rotating-file-audit-log.autoflush=Whether every event should be immediately flushed to disk.
elytron.size-rotating-file-audit-log.synchronized=Whether every event should be immediately flushed to disk (If undefined will default to the value of synchronized).
elytron.size-rotating-file-audit-log.format=The format to use to record the audit event.
elytron.size-rotating-file-audit-log.max-backup-index=The maximum number of files to backup when rotating.
elytron.size-rotating-file-audit-log.rotate-size=The log file size the file should rotate at.
elytron.size-rotating-file-audit-log.rotate-on-boot=Whether the file should be rotated before the a new file is set.
elytron.size-rotating-file-audit-log.suffix=Format of date used as suffix of log file names in java.time.format.DateTimeFormatter. The suffix does not play a role in determining when the file should be rotated.


elytron.syslog-audit-log=An audit logger that sends audit events to a remote syslog server.
# Operations
elytron.syslog-audit-log.add=Add the audit logger resource.
elytron.syslog-audit-log.remove=Remove the audit logger resource.
#Attributes
elytron.syslog-audit-log.server-address=The server address of the syslog server the events should be sent to.
elytron.syslog-audit-log.port=The listening port on the syslog server.
elytron.syslog-audit-log.transport=The transport to use to connect to the syslog server.
elytron.syslog-audit-log.format=The format to use to record the audit event.
elytron.syslog-audit-log.host-name=The host name to embed withing all events sent to the remote syslog server.
elytron.syslog-audit-log.ssl-context=The SSLContext to use to connect to the syslog server when SSL_TCP transport is used.

################################
# HTTP and SASL Authentication #
################################

elytron.http-authentication-factory=Resource containing the association of a SecurityDomain with a HttpServerAuthenticationMechanismFactory.
# Operations
elytron.http-authentication-factory.add=Add a new http-authentication-factory resource.
elytron.http-authentication-factory.remove=Remove the http-authentication-factory resource.
# Attributes
elytron.http-authentication-factory.security-domain=The SecurityDomain to associate with this resource
elytron.http-authentication-factory.http-server-mechanism-factory=The HttpServerAuthenticationMechanismFactory to associate with this resource
elytron.http-authentication-factory.mechanism-configurations=Mechanism specific configuration
elytron.http-authentication-factory.mechanism-configurations.mechanism-name=This configuration will only apply where a mechanism with the name specified is used. If this attribute is omitted then this will match any mechanism name.
elytron.http-authentication-factory.mechanism-configurations.host-name=The host name this configuration applies to.
elytron.http-authentication-factory.mechanism-configurations.protocol=The protocol this configuration applies to.
elytron.http-authentication-factory.mechanism-configurations.pre-realm-principal-transformer=A principal transformer to apply before the realm is selected
elytron.http-authentication-factory.mechanism-configurations.post-realm-principal-transformer=A principal transformer to apply after the realm is selected
elytron.http-authentication-factory.mechanism-configurations.final-principal-transformer=A final principal transformer to apply for this mechanism realm
elytron.http-authentication-factory.mechanism-configurations.realm-mapper=The realm mapper to be used by the mechanism
elytron.http-authentication-factory.mechanism-configurations.credential-security-factory=The security factory to use to obtain a credential as required by the mechanism
elytron.http-authentication-factory.mechanism-configurations.mechanism-realm-configurations=Definition of the realm names as understood by the mechanism
elytron.http-authentication-factory.mechanism-configurations.realm-name=The name of the realm to be presented by the mechanism
# Runtime Attributes
elytron.http-authentication-factory.available-mechanisms=The HTTP mechanisms available from this configuration after all filtering has been applied.

elytron.sasl-authentication-factory=Resource containing the association of a SecurityDomain with a SaslServerFactory.
# Operations
elytron.sasl-authentication-factory.add=Add a new sasl-authentication-factory resource.
elytron.sasl-authentication-factory.remove=Remove the sasl-authentication-factory resource.
# Attributes
elytron.sasl-authentication-factory.security-domain=The SecurityDomain to associate with this resource
elytron.sasl-authentication-factory.sasl-server-factory=The SaslServerFactory to associate with this resource
elytron.sasl-authentication-factory.mechanism-configurations=Mechanism specific configuration
elytron.sasl-authentication-factory.mechanism-configurations.mechanism-name=This configuration will only apply where a mechanism with the name specified is used. If this attribute is omitted then this will match any mechanism name.
elytron.sasl-authentication-factory.mechanism-configurations.host-name=The host name this configuration applies to.
elytron.sasl-authentication-factory.mechanism-configurations.protocol=The protocol this configuration applies to.
elytron.sasl-authentication-factory.mechanism-configurations.pre-realm-principal-transformer=A principal transformer to apply before the realm is selected
elytron.sasl-authentication-factory.mechanism-configurations.post-realm-principal-transformer=A principal transformer to apply after the realm is selected
elytron.sasl-authentication-factory.mechanism-configurations.final-principal-transformer=A final principal transformer to apply for this mechanism realm
elytron.sasl-authentication-factory.mechanism-configurations.realm-mapper=The realm mapper to be used by the mechanism
elytron.sasl-authentication-factory.mechanism-configurations.credential-security-factory=The security factory to use to obtain a credential as required by the mechanism
elytron.sasl-authentication-factory.mechanism-configurations.mechanism-realm-configurations=Definition of the realm names as understood by the mechanism
elytron.sasl-authentication-factory.mechanism-configurations.realm-name=The name of the realm to be presented by the mechanism

# Runtime Attributes
elytron.sasl-authentication-factory.available-mechanisms=The SASL mechanisms available from this configuration after all filtering has been applied.

#######################
# JASPI Configuration #
#######################
elytron.jaspi-configuration=Resource containing the JASPI ServerAuthModule configuration for the servlet profile.
elytron.jaspi-configuration.add=Add a new JASPI configuration.
elytron.jaspi-configuration.remove=Remove the JASPI configuration.
elytron.jaspi-configuration.layer=The layer this configuration is to be associated with or '*' for all layers.
elytron.jaspi-configuration.application-context=The application-context this configuration is to be associated with or '*' for all application contexts.
elytron.jaspi-configuration.description=Description of this configuration.
elytron.jaspi-configuration.server-auth-modules=List of ServerAuthModule definitions for this configuration.
elytron.jaspi-configuration.server-auth-modules.class-name=The fully qualified class name of the ServerAuthModule.
elytron.jaspi-configuration.server-auth-modules.module=The module to load the ServerAuthModule from.
elytron.jaspi-configuration.server-auth-modules.flag=Control flag for coordination of the ServerAuthModule results.
elytron.jaspi-configuration.server-auth-modules.options=Configuration options to be passed into the ServerAuthModule.

###################
# Security Domain #
###################

elytron.security-domain=A security domain definition.
elytron.security-domain.add=The add operation for a security domain definition.
elytron.security-domain.remove=The remove operation for a security domain definition.
elytron.security-domain.read-identity=Reads an identity from a security domain if it exists.
elytron.security-domain.read-identity.name=The name of the identity to read.
elytron.security-domain.authenticate=A temporary operation to be used to test authentication.
elytron.security-domain.authenticate.username=The username to authenticate with.
elytron.security-domain.authenticate.password=The password for the given username.
elytron.security-domain.pre-realm-principal-transformer=A reference to a principal transformer to be applied before the realm is selected.
elytron.security-domain.post-realm-principal-transformer=A reference to a principal transformer to be applied after the realm has operated on the supplied identity name.
elytron.security-domain.permission-mapper=A reference to a PermissionMapper to be used by this domain.
elytron.security-domain.principal-decoder=A reference to a PrincipalDecoder to be used by this domain.
elytron.security-domain.realm-mapper=Reference to the RealmMapper to be used by this domain.
elytron.security-domain.role-mapper=Reference to the RoleMapper to be used by this domain.
elytron.security-domain.security-event-listener=Reference to a listener for security events.
elytron.security-domain.default-realm=The default realm contained by this security domain.
elytron.security-domain.realms=The list of realms contained by this security domain.
elytron.security-domain.realms.realm=A reference to an individual security realm.
elytron.security-domain.realms.principal-transformer=A principal transformer to be associated with the realm.
elytron.security-domain.realms.role-decoder=A RoleDecoder reference to be associated with the realm.
elytron.security-domain.realms.role-mapper=A RoleMapper reference to be associated with the realm.
elytron.security-domain.trusted-security-domains=The list of security domains that are trusted by this security domain.
elytron.security-domain.outflow-security-domains=The list of security domains that the security identity from this domain should automatically outflow to.
elytron.security-domain.outflow-anonymous=When outflowing to a security domain if outflow is not possible should the anonymous identity be used?  Outflowing anonymous has the effect of clearing any identity already established for that domain.

#########################
# HTTP Server Factories #
#########################

elytron.aggregate-http-server-mechanism-factory=A http server factory definition where the http server factory is an aggregation of other http server factories.
# Operations
elytron.aggregate-http-server-mechanism-factory.add=The add operation for the http server factory.
elytron.aggregate-http-server-mechanism-factory.remove=The remove operation for the http server factory.
# Attributes
elytron.aggregate-http-server-mechanism-factory.http-server-mechanism-factories=The referenced http server factories to aggregate.
# Runtime Attributes
elytron.aggregate-http-server-mechanism-factory.available-mechanisms=The HTTP mechanisms available from this factory instance.

elytron.configurable-http-server-mechanism-factory=A HTTP server factory definition that wraps another HTTP server factory and applies the specified configuration and filtering.
# Operations
elytron.configurable-http-server-mechanism-factory.add=The add operation for the http server factory.
elytron.configurable-http-server-mechanism-factory.remove=The remove operation for the http server factory.
# Attributes
elytron.configurable-http-server-mechanism-factory.http-server-mechanism-factory=The http server factory to be wrapped.
elytron.configurable-http-server-mechanism-factory.properties=Custom properties to be passed in to the http server factory calls.
elytron.configurable-http-server-mechanism-factory.filters=Filtering to be applied to enable / disable mechanisms based on the name.
elytron.configurable-http-server-mechanism-factory.filters.pattern-filter=A regular expression pattern based filter.
elytron.configurable-http-server-mechanism-factory.filters.enabling=Does this filter enable or disable a mechanism if it matches.

# Runtime Attributes
elytron.configurable-http-server-mechanism-factory.available-mechanisms=The HTTP mechanisms available from this factory instance.

elytron.provider-http-server-mechanism-factory=A http server factory definition where the http server factory is an aggregation of factories from the Provider[]
# Operations
elytron.provider-http-server-mechanism-factory.add=The add operation for the http server factory.
elytron.provider-http-server-mechanism-factory.remove=The remove operation for the http server factory.
# Attributes
elytron.provider-http-server-mechanism-factory.providers=The providers to use to locate the factories, if not specified the globally registered list of Providers will be used.
# Runtime Attributes
elytron.provider-http-server-mechanism-factory.available-mechanisms=The HTTP mechanisms available from this factory instance.

elytron.service-loader-http-server-mechanism-factory=A http server factory definition where the http server factory is an aggregation of factories identified using a ServiceLoader
# Operations
elytron.service-loader-http-server-mechanism-factory.add=The add operation for the http server factory.
elytron.service-loader-http-server-mechanism-factory.remove=The remove operation for the http server factory.
# Attributes
elytron.service-loader-http-server-mechanism-factory.module=The module to use to obtain the classloader to load the factories, if not specified the classloader to load the resource will be used instead.
# Runtime Attributes
elytron.service-loader-http-server-mechanism-factory.available-mechanisms=The HTTP mechanisms available from this factory instance.

######################
# Security Factories #
######################

elytron.custom-credential-security-factory=A custom credential SecurityFactory definition.
# Operations
elytron.custom-credential-security-factory.add=The add operation for the security factory.
elytron.custom-credential-security-factory.remove=The remove operation for the security factory.
# Attributes
elytron.custom-credential-security-factory.module=The module to use to load the custom security factory.
elytron.custom-credential-security-factory.class-name=The class name of the implementation of the custom security factory.
elytron.custom-credential-security-factory.configuration=The optional key/value configuration for the custom security factory.

elytron.kerberos-security-factory=A security factory for obtaining a GSSCredential for use during authentication.
# Operations
elytron.kerberos-security-factory.add=The add operation for the Kerberos SecurityFactory
elytron.kerberos-security-factory.remove=The remove operation for the Kerberos SecurityFactory
# Attributes
elytron.kerberos-security-factory.principal=The principal represented by the KeyTab
elytron.kerberos-security-factory.path=The path of the KeyTab to load to obtain the credential.
elytron.kerberos-security-factory.relative-to=The name of another previously named path, or of one of the standard paths provided by the system. If 'relative-to' is provided, the value of the 'path' attribute is treated as relative to the path specified by this attribute.
elytron.kerberos-security-factory.minimum-remaining-lifetime=How much lifetime (in seconds) should a cached credential have remaining before it is recreated.
elytron.kerberos-security-factory.request-lifetime=How much lifetime (in seconds) should be requested for newly created credentials.
elytron.kerberos-security-factory.fail-cache=Amount of seconds before new try to obtain server credential should be done if it has failed last time.
elytron.kerberos-security-factory.server=If this for use server side or client side?
elytron.kerberos-security-factory.obtain-kerberos-ticket=Should the KerberosTicket also be obtained and associated with the credential. This is required to be true where credentials are delegated to the server.
elytron.kerberos-security-factory.debug=Should the JAAS step of obtaining the credential have debug logging enabled.
elytron.kerberos-security-factory.wrap-gss-credential=Should generated GSS credentials be wrapped to prevent improper disposal or not?
elytron.kerberos-security-factory.required=Is the keytab file with adequate principal required to exist at the time the service starts?
elytron.kerberos-security-factory.mechanism-names=The mechanism names the credential should be usable with. Names will be converted to OIDs and used together with OIDs from mechanism-oids attribute.
elytron.kerberos-security-factory.mechanism-oids=The mechanism OIDs the credential should be usable with. Will be used together with OIDs derived from names from mechanism-names attribute.
elytron.kerberos-security-factory.options=The Krb5LoginModule additional options.

######################
# Permission Mappers #
######################

elytron.custom-permission-mapper=Definition of a custom permission mapper.
# Operations
elytron.custom-permission-mapper.add=Add operation for the permission mapper
elytron.custom-permission-mapper.remove=Remove operation for the permission mapper
#Attributes
elytron.custom-permission-mapper.module=Name of the module to use to load the permission mapper
elytron.custom-permission-mapper.class-name=Fully qualified class name of the permission mapper
elytron.custom-permission-mapper.configuration=The optional kay/value configuration for the permission mapper

elytron.logical-permission-mapper=Definition of a logical permission mapper.
# Operations
elytron.logical-permission-mapper.add=Add operation for the permission mapper
elytron.logical-permission-mapper.remove=Remove operation for the permission mapper
#Attributes
elytron.logical-permission-mapper.logical-operation=The logical operation to use to combine the permission mappers.
elytron.logical-permission-mapper.left=Reference to the permission mapper to use to the left of the operation.
elytron.logical-permission-mapper.right=Reference to the permission mapper to use to the right of the operation.

elytron.simple-permission-mapper=Definition of a simple configured permission mapper.
# Operations
elytron.simple-permission-mapper.add=Add operation for the permission mapper
elytron.simple-permission-mapper.remove=Remove operation for the permission mapper
#Attributes
elytron.simple-permission-mapper.mapping-mode=The mapping mode that should be used in the event of multiple matches.
elytron.simple-permission-mapper.permission-mappings=The defined permission mappings.
elytron.simple-permission-mapper.permission-mappings.match-all=The mapping applies to all identities.
elytron.simple-permission-mapper.permission-mappings.principals=Principals to compare when mapping permissions, if the identities principal matches any one in the list it is a match.
elytron.simple-permission-mapper.permission-mappings.roles=Roles to compare when mapping permissions, if the identity is a member of any one in the list it is a match.
elytron.simple-permission-mapper.permission-mappings.permission-sets=The permission sets to assign in the event of a match.
elytron.simple-permission-mapper.permission-mappings.permission-set=A reference to a permission set.
elytron.simple-permission-mapper.permission-mappings.permissions=The permissions to assign in the event of a match.
elytron.simple-permission-mapper.permission-mappings.permissions.depreacted=Use permission-sets instead.
elytron.simple-permission-mapper.permission-mappings.class-name=The fully qualified class name of the permission.
elytron.simple-permission-mapper.permission-mappings.module=The module to use to load the permission.
elytron.simple-permission-mapper.permission-mappings.target-name=The target name to pass to the permission as it is constructed.
elytron.simple-permission-mapper.permission-mappings.action=The action to pass to the permission as it is constructed.

elytron.constant-permission-mapper=Definition of a permission mapper that always returns the same constant.
# Operations
elytron.constant-permission-mapper.add=Add operation for the permission mapper
elytron.constant-permission-mapper.remove=Remove operation for the permission mapper
#Attributes
elytron.constant-permission-mapper.permission-sets=The permission sets to assign.
elytron.constant-permission-mapper.permission-sets.permission-set=A reference to a permission set.
elytron.constant-permission-mapper.permissions=The permissions to assign.
elytron.constant-permission-mapper.permissions.deprecated=Use permission-sets instead.
elytron.constant-permission-mapper.permissions.class-name=The fully qualified class name of the permission.
elytron.constant-permission-mapper.permissions.module=The module to use to load the permission.
elytron.constant-permission-mapper.permissions.target-name=The target name to pass to the permission as it is constructed.
elytron.constant-permission-mapper.permissions.action=The action to pass to the permission as it is constructed.

###################
# Permission Sets #
###################
elytron.permission-set=Definition of a permission set.
# Operations
elytron.permission-set.add=Add operation for the permission set.
elytron.permission-set.remove=Remove operation for the permission set.
# Attributes
elytron.permission-set.permissions=The permissions in the permission set.
elytron.permission-set.permissions.class-name=The fully qualified class name of the permission.
elytron.permission-set.permissions.module=The module to use to load the permission.
elytron.permission-set.permissions.target-name=The target name to pass to the permission as it is constructed.
elytron.permission-set.permissions.action=The action to pass to the permission as it is constructed.

######################
# Principal Decoders #
######################

elytron.aggregate-principal-decoder=A principal decoder definition where the principal decoder is an aggregation of other principal decoders.
# Operations
elytron.aggregate-principal-decoder.add=The add operation for the principal decoder.
elytron.aggregate-principal-decoder.remove=The remove operation for the principal decoder.
# Attributes
elytron.aggregate-principal-decoder.principal-decoders=The referenced principal decoders to aggregate.

elytron.concatenating-principal-decoder=A principal decoder definition where the principal decoder is a concatenation of other principal decoders.
# Operations
elytron.concatenating-principal-decoder.add=The add operation for the principal decoder.
elytron.concatenating-principal-decoder.remove=The remove operation for the principal decoder.
# Attributes
elytron.concatenating-principal-decoder.joiner=The string to use to join the results of the referenced principal decoders.
elytron.concatenating-principal-decoder.principal-decoders=The referenced principal decoders to concatenate.

elytron.constant-principal-decoder=Definition of a principal decoder that always returns the same constant.
# Operations
elytron.constant-principal-decoder.add=The add operation for the principal decoder.
elytron.constant-principal-decoder.remove=The remove operation for the principal decoder.
# Attributes
elytron.constant-principal-decoder.constant=The constant value the principal decoder will always return.

elytron.custom-principal-decoder=Definition of a custom principal decoder
# Operations
elytron.custom-principal-decoder.add=Add operation for the principal decoder
elytron.custom-principal-decoder.remove=Remove operation for the principal decoder
#Attributes
elytron.custom-principal-decoder.module=Name of the module to use to load the principal decoder
elytron.custom-principal-decoder.class-name=Fully qualified class name of the principal decoder
elytron.custom-principal-decoder.configuration=The optional kay/value configuration for the principal decoder

elytron.x500-attribute-principal-decoder=Definition of a X.500 attribute based principal decoder
# Operations
elytron.x500-attribute-principal-decoder.add=Add operation for the principal decoder
elytron.x500-attribute-principal-decoder.remove=Remove operation for the principal decoder
#Attributes
elytron.x500-attribute-principal-decoder.oid=The OID of the X.500 attribute to map (can be defined using attribute name instead)
elytron.x500-attribute-principal-decoder.attribute-name=The name of the X.500 attribute to map (can be defined using OID instead)
elytron.x500-attribute-principal-decoder.joiner=The joining string
elytron.x500-attribute-principal-decoder.start-segment=The 0-based starting occurrence of the attribute to map
elytron.x500-attribute-principal-decoder.maximum-segments=The maximum number of occurrences of the attribute to map
elytron.x500-attribute-principal-decoder.reverse=When set to 'true', the attribute values will be processed and returned in reverse order
elytron.x500-attribute-principal-decoder.convert=When set to 'true', if the Principal is not already an X500Principal conversion will be attempted
elytron.x500-attribute-principal-decoder.required-oids=The OIDs of the attributes that must be present in the principal
elytron.x500-attribute-principal-decoder.required-attributes=The attributes names of the attributes that must be present in the principal

##########################
# Principal Transformers #
##########################

elytron.aggregate-principal-transformer=A principal transformer aggregating more principal transformers. Original principal is tried to be transformed by individual transformers until one return non-null principal - that is returned.
# Operations
elytron.aggregate-principal-transformer.add=The add operation for the principal transformer.
elytron.aggregate-principal-transformer.remove=The remove operation for the principal transformer.
# Attributes
elytron.aggregate-principal-transformer.principal-transformers=The referenced principal transformers to aggregate.

elytron.chained-principal-transformer=A principal transformer definition where the principal transformer is a chaining of other principal transformers.
# Operations
elytron.chained-principal-transformer.add=The add operation for the principal transformer.
elytron.chained-principal-transformer.remove=The remove operation for the principal transformer.
# Attributes
elytron.chained-principal-transformer.principal-transformers=The referenced principal transformers to chain.

elytron.constant-principal-transformer=A principal transformer definition for a PrincipalTransformer that always returns the same constant.
# Operations
elytron.constant-principal-transformer.add=The add operation for the principal transformer.
elytron.constant-principal-transformer.remove=The remove operation for the principal transformer.
# Attributes
elytron.constant-principal-transformer.constant=The constant value this PrincipalTransformer will always return.

elytron.custom-principal-transformer=A custom principal transformer definition.
# Operations
elytron.custom-principal-transformer.add=The add operation for the principal transformer.
elytron.custom-principal-transformer.remove=The remove operation for the principal transformer.
# Attributes
elytron.custom-principal-transformer.module=The module to use to load the custom principal transformer.
elytron.custom-principal-transformer.class-name=The class name of the implementation of the custom principal transformer.
elytron.custom-principal-transformer.configuration=The optional key/value configuration for the custom principal transformer.

elytron.regex-principal-transformer=A regular expression based principal transformer
# Operations
elytron.regex-principal-transformer.add=The add operation for the principal transformer.
elytron.regex-principal-transformer.remove=The remove operation for the principal transformer.
# Attributes
elytron.regex-principal-transformer.pattern=The regular expression to use to locate the portion of the name to be replaced.
elytron.regex-principal-transformer.replacement=The value to be used as the replacement.
elytron.regex-principal-transformer.replace-all=Should all occurrences of the pattern matched be replaced or only the first occurrence.

elytron.regex-validating-principal-transformer=A regular expression based principal transformer which uses the regular expression to validate the name.
# Operations
elytron.regex-validating-principal-transformer.add=The add operation for the principal transformer.
elytron.regex-validating-principal-transformer.remove=The remove operation for the principal transformer.
# Attributes
elytron.regex-validating-principal-transformer.pattern=The regular expression to use for the principal transformer.
elytron.regex-validating-principal-transformer.match=If set to true, the name must match the given pattern to make validation successful. If set to false, the name must not match the given pattern to make validation successful.

#################
# Realm Mappers #
#################

elytron.constant-realm-mapper=Definition of a constant RealmMapper that always returns the same value.
# Operations
elytron.constant-realm-mapper.add=Add operation for the RealmMapper
elytron.constant-realm-mapper.remove=Remove operation for the RealmMapper
#Attributes
elytron.constant-realm-mapper.realm-name=The name of the constant realm to return.

elytron.custom-realm-mapper=Definition of a custom RealmMapper
# Operations
elytron.custom-realm-mapper.add=Add operation for the RealmMapper
elytron.custom-realm-mapper.remove=Remove operation for the RealmMapper
#Attributes
elytron.custom-realm-mapper.module=Name of the module to use to load the RealmMapper
elytron.custom-realm-mapper.class-name=Fully qualified class name of the RealmMapper
elytron.custom-realm-mapper.configuration=The optional kay/value configuration for the RealmMapper

elytron.simple-regex-realm-mapper=Definition of a simple RealmMapper that attempts to extract the realm name using the capture group from the regular expression, if that does not provide a match then the delegate RealmMapper is used instead.
# Operations
elytron.simple-regex-realm-mapper.add=Add operation for the RealmMapper
elytron.simple-regex-realm-mapper.remove=Remove operation for the RealmMapper
#Attributes
elytron.simple-regex-realm-mapper.pattern=The regular expression which must contain at least one capture group to extract the realm from the name. If the regular expression matches more than one capture group, the first capture group is used.
elytron.simple-regex-realm-mapper.delegate-realm-mapper=The RealmMapper to delegate to if there is no match using the pattern.

elytron.mapped-regex-realm-mapper=Definition of a RealmMapper implementation that first uses a regular expression to extract the realm name, this is then converted using the configured mapping of realm names.
# Operations
elytron.mapped-regex-realm-mapper.add=Add operation for the RealmMapper
elytron.mapped-regex-realm-mapper.remove=Remove operation for the RealmMapper
#Attributes
elytron.mapped-regex-realm-mapper.pattern=The regular expression which must contain at least one capture group to extract the realm from the name. If the regular expression matches more than one capture group, the first capture group is used.
elytron.mapped-regex-realm-mapper.delegate-realm-mapper=The RealmMapper to delegate to if the pattern does not match. If no delegate is specified then the default realm on the domain will be used instead. If the username does not match the pattern and a delegate realm-mapper is present, the result of delegate-realm-mapper is mapped via the realm-map.
elytron.mapped-regex-realm-mapper.realm-map=Mapping of realm name extracted using the regular expression to a defined realm name. If the value for the mapping is not in the map or the realm whose name is the result of the mapping does not exist in the given security domain, the default realm is used.

#################
# Role Decoders #
#################

elytron.custom-role-decoder=Definition of a custom RoleDecoder
# Operations
elytron.custom-role-decoder.add=Add operation for the RoleDecoder
elytron.custom-role-decoder.remove=Remove operation for the RoleDecoder
#Attributes
elytron.custom-role-decoder.module=Name of the module to use to load the RoleDecoder
elytron.custom-role-decoder.class-name=Fully qualified class name of the RoleDecoder
elytron.custom-role-decoder.configuration=The optional kay/value configuration for the RoleDecoder

elytron.empty-role-decoder=Definition of an empty RoleDecoder that never returns any roles.
# Operations
elytron.empty-role-decoder.add=Add operation for the RoleDecoder
elytron.empty-role-decoder.remove=Remove operation for the RoleDecoder

elytron.simple-role-decoder=Definition of a simple RoleDecoder that takes a single attribute and maps it directly to roles.
# Operations
elytron.simple-role-decoder.add=Add operation for the RoleDecoder
elytron.simple-role-decoder.remove=Remove operation for the RoleDecoder
# Attributes
elytron.simple-role-decoder.attribute=The name of the attribute from the identity to map directly to roles.

################
# Role Mappers #
################

elytron.add-prefix-role-mapper=A role mapper definition for a role mapper that adds a prefix to each provided.
# Operations
elytron.add-prefix-role-mapper.add=The add operation for the role mapper.
elytron.add-prefix-role-mapper.remove=The remove operation for the role mapper.
# Attributes
elytron.add-prefix-role-mapper.prefix=The prefix to add to each role.

elytron.add-suffix-role-mapper=A role mapper definition for a role mapper that adds a suffix to each provided.
# Operations
elytron.add-suffix-role-mapper.add=The add operation for the role mapper.
elytron.add-suffix-role-mapper.remove=The remove operation for the role mapper.
# Attributes
elytron.add-suffix-role-mapper.suffix=The suffix to add to each role.

elytron.aggregate-role-mapper=A role mapper definition where the role mapper is an aggregation of other role mappers.
# Operations
elytron.aggregate-role-mapper.add=The add operation for the role mapper.
elytron.aggregate-role-mapper.remove=The remove operation for the role mapper.
# Attributes
elytron.aggregate-role-mapper.role-mappers=The referenced role mappers to aggregate.

elytron.constant-role-mapper=A role mapper definition where a constant set of roles is always returned.
# Operations
elytron.constant-role-mapper.add=The add operation for the role mapper.
elytron.constant-role-mapper.remove=The remove operation for the role mapper.
# Attributes
elytron.constant-role-mapper.roles=The constant roles to be returned by this role mapper.

elytron.custom-role-mapper=Definition of a custom RoleMapper
# Operations
elytron.custom-role-mapper.add=Add operation for the RoleMapper
elytron.custom-role-mapper.remove=Remove operation for the RoleMapper
#Attributes
elytron.custom-role-mapper.module=Name of the module to use to load the RoleMapper
elytron.custom-role-mapper.class-name=Fully qualified class name of the RoleMapper
elytron.custom-role-mapper.configuration=The optional key/value configuration for the RoleMapper

elytron.logical-role-mapper=A RoleMapper definition for a RoleMapper that performs a logical operation using two referenced RoleMappers.
# Operations
elytron.logical-role-mapper.add=The add operation for the role mapper.
elytron.logical-role-mapper.remove=The remove operation for the role mapper.
# Attributes
elytron.logical-role-mapper.logical-operation=The logical operation to be performed on the role mapper mappings.
elytron.logical-role-mapper.left=Reference to a role mapper to be used on the left side of the operation.
elytron.logical-role-mapper.right=Reference to a role mapper to be used on the right side of the operation.

elytron.mapped-role-mapper=A RoleMapper definition for a RoleMapper that performs a mapping based on configured map.
# Operations
elytron.mapped-role-mapper.add=The add operation for the role mapper.
elytron.mapped-role-mapper.remove=The remove operation for the role mapper.
# Attributes
elytron.mapped-role-mapper.keep-mapped=When set to 'true' the mapped roles will retain all roles, that have defined mappings.
elytron.mapped-role-mapper.keep-non-mapped=When set to 'true' the mapped roles will retain all roles, that have no defined mappings.
elytron.mapped-role-mapper.role-map=A string to string list map for mapping roles.

#####################
# Realm Definitions #
#####################

elytron.aggregate-realm=A realm definition that is an aggregation of two realms, one for the authentication steps and one for loading the identity for the authorization steps.
# Operations
elytron.aggregate-realm.add=The add operation for the security realm.
elytron.aggregate-realm.remove=The remove operation for the security realm.
# Attributes
elytron.aggregate-realm.authentication-realm=Reference to the security realm to use for authentication steps (obtaining or validating credentials).
elytron.aggregate-realm.authorization-realm=Reference to the security realm to use for loading the identity for authorization steps (loading of the identity).

elytron.custom-modifiable-realm=Custom realm configured as being modifiable will be expected to implement the ModifiableSecurityRealm interface. By configuring a realm as being modifiable management operations will be made available to manipulate the realm.
# Operations
elytron.custom-modifiable-realm.add=The add operation for the security realm.
elytron.custom-modifiable-realm.remove=The remove operation for the security realm.
# Attributes
elytron.custom-modifiable-realm.class-name=The class name of the implementation of the custom realm.
elytron.custom-modifiable-realm.configuration=The optional key/value configuration for the custom realm.
elytron.custom-modifiable-realm.identity=An identity which can be managed by a security realm.
elytron.custom-modifiable-realm.module=The module to use to load the custom realm.

elytron.custom-realm=A custom realm definitions can implement either the SecurityRealm interface or the ModifiableSecurityRealm interface. Regardless of which interface is implemented management operations will not be exposed to manage the realm.  However other services that depend on the realm will still be able to perform a type check and cast to gain access to the modification API.
# Operations
elytron.custom-realm.add=The add operation for the security realm.
elytron.custom-realm.remove=The remove operation for the security realm.
# Attributes
elytron.custom-realm.module=The module to use to load the custom realm.
elytron.custom-realm.class-name=The class name of the implementation of the custom realm.
elytron.custom-realm.configuration=The optional key/value configuration for the custom realm.


elytron.jdbc-realm=A security realm definition backed by database using JDBC.
# Operations
elytron.jdbc-realm.add=The add operation for the security realm.
elytron.jdbc-realm.remove=The remove operation for the security realm.

# Authentication Query Complex Attribute
elytron.jdbc-realm.principal-query=The authentication query used to authenticate users based on specific key types.
elytron.jdbc-realm.principal-query.sql=The SQL statement used to obtain the keys(as table columns) for a specific user and map them accordingly with their type.
elytron.jdbc-realm.principal-query.data-source=The name of the datasource used to connect to the database.
elytron.jdbc-realm.principal-query.algorithm=The algorithm for a specific password key mapper.
elytron.jdbc-realm.principal-query.password-index=The column index from an authentication query that represents the user's password.
elytron.jdbc-realm.principal-query.salt-index=The column index from an authentication query that represents the password's salt, if supported.
elytron.jdbc-realm.principal-query.iteration-count-index=The column index from an authentication query that represents the password's iteration count, if supported.
elytron.jdbc-realm.principal-query.hash-encoding=The encoding of the user's password hash.
elytron.jdbc-realm.principal-query.salt-encoding=The encoding of the password's salt.
# Password Mapper Complex Attributes
elytron.jdbc-realm.principal-query.clear-password-mapper=A key mapper that maps a column returned from a SQL query to a Clear Password key type.
elytron.jdbc-realm.principal-query.bcrypt-mapper=A key mapper that maps a column returned from a SQL query to a Bcrypt key type.
elytron.jdbc-realm.principal-query.salted-simple-digest-mapper=A key mapper that maps a column returned from a SQL query to a Salted Simple Digest key type.
elytron.jdbc-realm.principal-query.simple-digest-mapper=A key mapper that maps a column returned from a SQL query to a Simple Digest key type.
elytron.jdbc-realm.principal-query.scram-mapper=A key mapper that maps a column returned from a SQL query to a Scram key type.
elytron.jdbc-realm.principal-query.modular-crypt-mapper=A key mapper that maps a column returned from a SQL query to a Modular Crypt key type.
# Attribute Mapping Attributes
elytron.jdbc-realm.principal-query.attribute-mapping=The attribute mappings defined for this resource.
elytron.jdbc-realm.principal-query.index=The column index from a query that representing the mapped attribute.
elytron.jdbc-realm.principal-query.to=The name of the identity attribute mapped from a column returned from a SQL query.

elytron.identity-realm=Realm definition for a realm which contains a single pre-defined identity.
# Operations
elytron.identity-realm.add=The add operation for the security realm.
elytron.identity-realm.remove=The remove operation for the security realm.
# Attributes
elytron.identity-realm.identity=The name of the identity available from the security realm.
elytron.identity-realm.attribute-name=The name of the attribute associated with this identity.
elytron.identity-realm.attribute-values=The values associated with the identity attributes.

elytron.key-store-realm=A security realm definition backed by a key store.
# Operations
elytron.key-store-realm.add=The add operation for the security realm.
elytron.key-store-realm.remove=The remove operation for the security realm.
# Attributes
elytron.key-store-realm.key-store=Reference to the KeyStore that should be used to back this security realm.

elytron.properties-realm=A security realm definition backed by properties files.
# Operations
elytron.properties-realm.add=The add operation for the security realm.
elytron.properties-realm.remove=The remove operation for the security realm.
elytron.properties-realm.load=Reload the properties files from the file system.
# Attributes
elytron.properties-realm.users-properties=The properties file containing the users and their passwords.
elytron.properties-realm.users-properties.path=The path to the file containing the users and their passwords. The file should contain realm name declaration.
elytron.properties-realm.users-properties.relative-to=The pre-defined path the path is relative to.
elytron.properties-realm.users-properties.digest-realm-name=The default realm name to use for digested passwords if one is not discovered in the properties file.
elytron.properties-realm.users-properties.plain-text=Are the passwords in properties file stored in plain text or pre-hashed? (Pre-hashed form: HEX( MD5( username ':' realm ':' password ) ) )
elytron.properties-realm.groups-properties=The properties file containing the users and their groups.
elytron.properties-realm.groups-properties.path=The path to the file containing the users and their groups.
elytron.properties-realm.groups-properties.relative-to=The pre-defined path the path is relative to.
elytron.properties-realm.groups-attribute=The name of the attribute in the returned AuthorizationIdentity that should contain the group membership information for the identity.
# Runtime Attributes
elytron.properties-realm.synchronized=The time the properties files that back this realm were last loaded.

elytron.ldap-realm=A security realm definition backed by LDAP.
# Operations
elytron.ldap-realm.add=The add operation for the security realm.
elytron.ldap-realm.remove=The remove operation for the security realm.
# Attributes
elytron.ldap-realm.dir-context=The configuration to connect to a LDAP server.
elytron.ldap-realm.dir-context.url=The connection url.
elytron.ldap-realm.dir-context.authentication-level=The authentication level.
elytron.ldap-realm.dir-context.principal=The principal to authenticate and connect to the LDAP server.
elytron.ldap-realm.dir-context.credential=The credential to authenticate and connect to the LDAP server.
elytron.ldap-realm.dir-context.enable-connection-pooling=Indicates if connection pooling is enabled.
elytron.ldap-realm.identity-mapping=The configuration options that define how principals are mapped to their corresponding entries in the underlying LDAP server.
elytron.ldap-realm.identity-mapping.rdn-identifier=The RDN part of the principal's DN to be used to obtain the principal's name from an LDAP entry. Used also when creating new identities.
elytron.ldap-realm.identity-mapping.search-base-dn=The base DN to search for identities.
elytron.ldap-realm.identity-mapping.use-recursive-search=Indicates if identity search queries are recursive.
elytron.ldap-realm.identity-mapping.attribute-mapping=The attribute mappings defined for this resource.
elytron.ldap-realm.identity-mapping.attribute-mapping.attribute=The configuration used to map a specific LDAP attribute as an identity attribute.
elytron.ldap-realm.identity-mapping.from=The name of the LDAP attribute to map to an identity attribute. If not defined, DN of entry is used.
elytron.ldap-realm.identity-mapping.to=The name of the identity attribute mapped from a specific LDAP attribute. If not provided, the name of the attribute is the same as define in 'from'. If the 'from' is not defined too, value 'dn' is used.
elytron.ldap-realm.identity-mapping.reference=The name of LDAP attribute containing DN of entry to obtain value from.
elytron.ldap-realm.identity-mapping.filter=The filter to use to obtain the values for a specific attribute. String '{0}' will be replaced by username, '{1}' by user identity DN.
elytron.ldap-realm.identity-mapping.filter-base-dn=The name of the context where the filter should be performed.
elytron.ldap-realm.identity-mapping.search-recursive=Indicates if attribute LDAP search queries are recursive.
elytron.ldap-realm.identity-mapping.role-recursion=Sets recursive roles assignment - value determine maximum depth of recursion. (0 for no recursion)
elytron.ldap-realm.identity-mapping.role-recursion-name=Determine LDAP attribute of role entry which will be substitute for '{0}' in filter-name when searching roles of role.
elytron.ldap-realm.identity-mapping.extract-rdn=The RDN key to use as the value for an attribute, in case the value in its raw form is in X.500 format.
elytron.ldap-realm.identity-mapping.filter-name=The LDAP filter for getting identity by name. If this is not specified then the default value will be (rdn_identifier={0}). The string '{0}' will be replaced by searched identity name and the 'rdn_identifier' will be the value of the attribute 'rdn-identifier'.
elytron.ldap-realm.identity-mapping.iterator-filter=The LDAP filter for iterating over identities of the realm.
elytron.ldap-realm.identity-mapping.new-identity-parent-dn=The DN of parent of newly created identities. Required for modifiability of the realm.
elytron.ldap-realm.identity-mapping.new-identity-attributes=The attributes of newly created identities. Required for modifiability of the realm.
elytron.ldap-realm.identity-mapping.name=The attribute name.
elytron.ldap-realm.identity-mapping.value=The attribute value.
elytron.ldap-realm.identity-mapping.credential-mapping=The credential mappings defined for this resource.
elytron.ldap-realm.identity-mapping.credential-mapping.credential=The configuration used to map a specific LDAP attribute as an user password attribute.
elytron.ldap-realm.identity-mapping.user-password-mapper=The credential mapping for userPassword-like credential attribute.
elytron.ldap-realm.identity-mapping.otp-credential-mapper=The credential mapping for OTP credential.
elytron.ldap-realm.identity-mapping.algorithm-from=The name of the LDAP attribute to map to an OTP credential algorithm.
elytron.ldap-realm.identity-mapping.hash-from=The name of the LDAP attribute to map to a Base64 encoded OTP credential hash.
elytron.ldap-realm.identity-mapping.seed-from=The name of the LDAP attribute to map to an OTP credential seed.
elytron.ldap-realm.identity-mapping.sequence-from=The name of the LDAP attribute to map to an OTP credential sequence number.
elytron.ldap-realm.identity-mapping.writable=Indicates if password can be changed.
elytron.ldap-realm.identity-mapping.verifiable=Indicates if password can be used to verify user.
elytron.ldap-realm.identity-mapping.x509-credential-mapper=The configuration allowing to use LDAP as storage of X509 credentials. X509 credential is user certificate or information allowing to identify it. At least one *-from attribute should be specified. This definition will be ignored otherwise. If more *-from attributes is defined, user certificate must match all defined criteria.
elytron.ldap-realm.identity-mapping.digest-from=The name of the LDAP attribute to map to a user certificate digest. If not defined, certificate digest will not be checked.
elytron.ldap-realm.identity-mapping.digest-algorithm=The digest algorithm (hash function) used to compute digest of the user certificate. Will be used only if digest-from have been defined.
elytron.ldap-realm.identity-mapping.certificate-from=The name of the LDAP attribute to map to an encoded user certificate. If not defined, encoded certificate will not be checked.
elytron.ldap-realm.identity-mapping.serial-number-from=The name of the LDAP attribute to map to a serial number of user certificate. If not defined, serial number will not be checked.
elytron.ldap-realm.identity-mapping.subject-dn-from=The name of the LDAP attribute to map to a subject DN of user certificate. If not defined, subject DN will not be checked.

elytron.ldap-realm.direct-verification=Does this realm support verification of credentials by directly connecting to LDAP as the account being authenticated?
elytron.ldap-realm.allow-blank-password=Does this realm support blank password direct verification? Blank password attempt will be rejected otherwise.
elytron.ldap-realm.identity=An identity which can be managed by a security realm.

elytron.filesystem-realm=A simple security realm definition backed by the filesystem.
elytron.filesystem-realm.add=The add operation for the security realm.
elytron.filesystem-realm.remove=The remove operation for the security realm.
elytron.filesystem-realm.path=The path to the file containing the realm.
elytron.filesystem-realm.relative-to=The pre-defined path the path is relative to.
elytron.filesystem-realm.levels=The number of levels of directory hashing to apply.
elytron.filesystem-realm.encoded=Whether the identity names should be stored encoded (Base32) in file names.
elytron.filesystem-realm.identity=An identity which can be managed by a security realm.

elytron.token-realm=A security realm definition capable of validating and extracting identities from security tokens.
# Operations
elytron.token-realm.add=The add operation for the security realm.
elytron.token-realm.remove=The remove operation for the security realm.
# Attributes
elytron.token-realm.principal-claim=The name of the claim that should be used to obtain the principal's name.
# JWT Validator Complex Attribute
elytron.token-realm.jwt=A token validator to be used in conjunction with a token-based realm that handles security tokens based on the JWT/JWS standard.
elytron.token-realm.jwt.issuer=A list of strings representing the issuers supported by this configuration. During validation JWT tokens must have an 'iss' claim that contains one of the values defined here.
elytron.token-realm.jwt.audience=A list of strings representing the audiences supported by this configuration. During validation JWT tokens must have an 'aud' claim that contains one of the values defined here.
elytron.token-realm.jwt.public-key=A public key in PEM Format. During validation, if a public key is provided, signature will be verified based on the key you provided here.
elytron.token-realm.jwt.key-store=A key store from where the certificate with a public key should be loaded from.
elytron.token-realm.jwt.key-map=A map of named public keys for token verification.
elytron.token-realm.jwt.certificate=The name of the certificate with a public key to load from the key store.
elytron.token-realm.jwt.client-ssl-context=The SSL context to be used for fetching jku keys using HTTPS.
elytron.token-realm.jwt.host-name-verification-policy=A policy that defines how host names should be verified when using HTTPS.
# OAuth2 Introspection Validator Complex Attribute
elytron.token-realm.oauth2-introspection=A token validator to be used in conjunction with a token-based realm that handles OAuth2 Access Tokens and validates them using an endpoint compliant with OAuth2 Token Introspection specification(RFC-7662).
elytron.token-realm.oauth2-introspection.client-id=The identifier of the client on the OAuth2 Authorization Server.
elytron.token-realm.oauth2-introspection.client-secret=The secret of the client.
elytron.token-realm.oauth2-introspection.introspection-url=The URL of token introspection endpoint.
elytron.token-realm.oauth2-introspection.client-ssl-context=The SSL context to be used if the introspection endpoint is using HTTPS.
elytron.token-realm.oauth2-introspection.host-name-verification-policy=A policy that defines how host names should be verified when using HTTPS. Allowed values: 'ANY'.

# Identity management descriptions
elytron.modifiable-security-realm.add-identity=Add an identity to a security realm.
elytron.modifiable-security-realm.add-identity.identity=The name of the identity.
elytron.modifiable-security-realm.remove-identity=Remove an identity from a security realm.
elytron.modifiable-security-realm.remove-identity.identity=The name of the identity.
elytron.modifiable-security-realm.read-identity=Read an identity from a security realm if it exists.
elytron.modifiable-security-realm.read-identity.identity=The name of the identity.
elytron.modifiable-security-realm.add-identity-attribute=Add an attribute to an existing identity.
elytron.modifiable-security-realm.add-identity-attribute.identity=The name of the identity.
elytron.modifiable-security-realm.add-identity-attribute.name=The name of the attribute.
elytron.modifiable-security-realm.add-identity-attribute.value=The value of the attribute.
elytron.modifiable-security-realm.remove-identity-attribute=Remove an attribute to an existing identity.
elytron.modifiable-security-realm.remove-identity-attribute.identity=The name of the identity.
elytron.modifiable-security-realm.remove-identity-attribute.name=The name of the attribute.
elytron.modifiable-security-realm.remove-identity-attribute.value=The value of the attribute.
elytron.modifiable-security-realm.set-password=Add a password to an existing identity.
elytron.modifiable-security-realm.set-password.identity=The name of the identity.

elytron.modifiable-security-realm.bcrypt.algorithm=The algorithm used to encrypt the password.
elytron.modifiable-security-realm.bcrypt.iteration-count=The iteration count or cost to apply to the password.
elytron.modifiable-security-realm.bcrypt.salt=The salt to apply to the password.
elytron.modifiable-security-realm.bcrypt.password=The actual password to set.
elytron.modifiable-security-realm.set-password.bcrypt=A password using the Bcrypt algorithm.

elytron.modifiable-security-realm.clear.password=The actual password to set.
elytron.modifiable-security-realm.set-password.clear=A password in clear text.

elytron.modifiable-security-realm.simple-digest.algorithm=The algorithm used to encrypt the password.
elytron.modifiable-security-realm.simple-digest.password=The actual password to set.
elytron.modifiable-security-realm.set-password.simple-digest=A simple digest password.

elytron.modifiable-security-realm.salted-simple-digest.algorithm=The algorithm used to encrypt the password.
elytron.modifiable-security-realm.salted-simple-digest.salt=The salt to apply to the password.
elytron.modifiable-security-realm.salted-simple-digest.password=The actual password to set.
elytron.modifiable-security-realm.set-password.salted-simple-digest=A salted simple digest password.

elytron.modifiable-security-realm.digest.algorithm=The algorithm used to encrypt the password.
elytron.modifiable-security-realm.digest.realm=The realm.
elytron.modifiable-security-realm.digest.password=The actual password to set.
elytron.modifiable-security-realm.set-password.digest=A digest password.

elytron.modifiable-security-realm.otp.algorithm=The algorithm used to encrypt the password.
elytron.modifiable-security-realm.otp.seed=The seed used to generate the hash.
elytron.modifiable-security-realm.otp.sequence=The sequence number used to generate the hash.
elytron.modifiable-security-realm.otp.password=The actual password to set.
elytron.modifiable-security-realm.set-password.otp=A one-time password, used by the OTP SASL mechanism.

elytron.modifiable-security-realm.scram-digest.algorithm=The algorithm used to encrypt the password.
elytron.modifiable-security-realm.scram-digest.iteration-count=The iteration count or cost to apply to the password.
elytron.modifiable-security-realm.scram-digest.salt=The salt to apply to the password.
elytron.modifiable-security-realm.scram-digest.password=The actual password to set.
elytron.modifiable-security-realm.set-password.scram-digest=A password using the SCRAM digest algorithm.

elytron.caching-realm=A realm definition that enables caching to another security realm. Caching strategy is LRU (Least Recently Used) where least accessed entries are discarded when maximum number of entries is reached.
# Operations
elytron.caching-realm.add=The add operation for the security realm.
elytron.caching-realm.remove=The remove operation for the security realm.
# Attributes
elytron.caching-realm.realm=A reference to a cacheable security realm.
elytron.caching-realm.maximum-entries=The maximum number of entries to keep in the cache.
elytron.caching-realm.maximum-age=The time in milliseconds that an item can stay in the cache.
elytron.caching-realm.clear-cache=Removes all entries from the cache.


#########################
# SASL Server Factories #
#########################

elytron.aggregate-sasl-server-factory=A sasl server factory definition where the sasl server factory is an aggregation of other sasl server factories.
# Operations
elytron.aggregate-sasl-server-factory.add=The add operation for the sasl server factory.
elytron.aggregate-sasl-server-factory.remove=The remove operation for the sasl server factory.
# Attributes
elytron.aggregate-sasl-server-factory.sasl-server-factories=The referenced sasl server factories to aggregate.
# Runtime Attributes
elytron.aggregate-sasl-server-factory.available-mechanisms=The SASL mechanisms available from this factory after all filtering has been applied.

elytron.configurable-sasl-server-factory=A SaslServerFactory definition that wraps another SaslServerFactory and applies the specified configuration and filtering.
# Operations
elytron.configurable-sasl-server-factory.add=The add operation for the sasl server factory.
elytron.configurable-sasl-server-factory.remove=The remove operation for the sasl server factory.
# Attributes
elytron.configurable-sasl-server-factory.sasl-server-factory=The sasl server factory to be wrapped.
elytron.configurable-sasl-server-factory.protocol=The protocol that should be passed into factory when creating the mechanism.
elytron.configurable-sasl-server-factory.server-name=The server name that should be passed into factory when creating the mechanism.
elytron.configurable-sasl-server-factory.properties=Custom properties to be passed in to the sasl server factory calls.
elytron.configurable-sasl-server-factory.filters=List of filters to be evaluated sequentially combining the results using 'or'.
elytron.configurable-sasl-server-factory.filters.predefined-filter=A predefined filter to use to filter the mechanism name.
elytron.configurable-sasl-server-factory.filters.pattern-filter=A regular expression based filter of the mechanism name.
elytron.configurable-sasl-server-factory.filters.enabling=Is this filter enabling or disabling the matched names.
# Runtime Attributes
elytron.configurable-sasl-server-factory.available-mechanisms=The SASL mechanisms available from this factory after all filtering has been applied.

elytron.mechanism-provider-filtering-sasl-server-factory=A SaslServerFactory definition that wraps another SaslServerFactory and enables filtering of mechanisms based on the mechanism name and Provider name and version. Any mechanisms loaded by factories not located using a Provider will not be filtered by this definition.
# Operations
elytron.mechanism-provider-filtering-sasl-server-factory.add=The add operation for the sasl server factory.
elytron.mechanism-provider-filtering-sasl-server-factory.remove=The remove operation for the sasl server factory.
# Attributes
elytron.mechanism-provider-filtering-sasl-server-factory.sasl-server-factory=Reference to a sasl server factory to be wrapped by this definition.
elytron.mechanism-provider-filtering-sasl-server-factory.enabling=When set to 'true' no provider loaded mechanisms are enabled unless matched by one of the filters, setting to 'false' has the inverse effect.
elytron.mechanism-provider-filtering-sasl-server-factory.filters=The filters to apply when comparing the mechanisms from the providers, a filter matches when all of the specified values match the mechanism / provider pair.
elytron.mechanism-provider-filtering-sasl-server-factory.filters.mechanism-name=This configuration will only apply where a mechanism with the name specified is used. If this attribute is omitted then this will match any mechanism name.
elytron.mechanism-provider-filtering-sasl-server-factory.filters.provider-name=The name of the provider to match against.
elytron.mechanism-provider-filtering-sasl-server-factory.filters.provider-version=Version to compare against the version reported by the provider.
elytron.mechanism-provider-filtering-sasl-server-factory.filters.version-comparison=When set to 'less-than' a Provider will match against the filter if the Provider's version is less-than the version specified here. Setting to 'greater-than' has the opposite effect. Has no effect if a provider-version has not been specified in the filter.
# Runtime Attributes
elytron.mechanism-provider-filtering-sasl-server-factory.available-mechanisms=The SASL mechanisms available from this factory after all filtering has been applied.

elytron.provider-sasl-server-factory=A sasl server factory definition where the sasl server factory is an aggregation of factories from the Provider[]
# Operations
elytron.provider-sasl-server-factory.add=The add operation for the sasl server factory.
elytron.provider-sasl-server-factory.remove=The remove operation for the sasl server factory.
# Attributes
elytron.provider-sasl-server-factory.providers=The providers to use to locate the factories, if not specified the globally registered list of Providers will be used.
# Runtime Attributes
elytron.provider-sasl-server-factory.available-mechanisms=The SASL mechanisms available from this factory after all filtering has been applied.

elytron.service-loader-sasl-server-factory=A sasl server factory definition where the sasl server factory is an aggregation of factories identified using a ServiceLoader
# Operations
elytron.service-loader-sasl-server-factory.add=The add operation for the sasl server factory.
elytron.service-loader-sasl-server-factory.remove=The remove operation for the sasl server factory.
# Attributes
elytron.service-loader-sasl-server-factory.module=The module to use to obtain the classloader to load the factories, if not specified the classloader to load the resource will be used instead.
# Runtime Attributes
elytron.service-loader-sasl-server-factory.available-mechanisms=The SASL mechanisms available from this factory after all filtering has been applied.


##################
# TLS / KeyStore #
##################

elytron.key-store=A KeyStore definition.
# Operations
elytron.key-store.add=Add a new KeyStore definition.
elytron.key-store.remove=Remove the KeyStore definition.
elytron.key-store.load=Load the KeyStore, if the KeyStore is file backed this will involve re-reading the contents of the file.
elytron.key-store.store=Store the KeyStore to file, this operation will fail for any KeyStore instances not backed by a file.  If the file does not exist and it was not flagged as required it will be created.
# Configuration Attributes
elytron.key-store.type=The type of the KeyStore, used when creating the new KeyStore instance.
elytron.key-store.provider-name=The name of the provider to use to load the KeyStore, disables searching for the first Provider that can create a KeyStore of the specified type.
elytron.key-store.credential-reference=The reference to credential stored in CredentialStore under defined alias or clear text password.
elytron.key-store.credential-reference.store=The name of the credential store holding the alias to credential.
elytron.key-store.credential-reference.alias=The alias which denotes stored secret or credential in the store.
elytron.key-store.credential-reference.type=The type of credential this reference is denoting.
elytron.key-store.credential-reference.clear-text=Secret specified using clear text. Check credential store way of supplying credential/secrets to services.
elytron.key-store.relative-to=The base path this store is relative to.
elytron.key-store.path=The path to the KeyStore file.
elytron.key-store.required=Is the file required to exist at the time the KeyStore service starts?
elytron.key-store.providers=A reference to the providers that should be used to obtain the list of Provider instances to search, if not specified the global list of providers will be used instead.
elytron.key-store.alias-filter=A filter to apply to the aliases returned from the KeyStore, can either be a comma separated list of aliases to return or one of the following formats ALL:-alias1:-alias2, NONE:+alias1:+alias2
# Runtime Attributes
elytron.key-store.state=The state of the underlying service that represents this KeyStore at runtime, if it is anything other than UP runtime operations will not be available.
elytron.key-store.synchronized=The time this KeyStore was last loaded or saved. Note: Some providers may continue to apply updates after the KeyStore was loaded within the application server.
elytron.key-store.modified=Indicates if the in-memory representation of the KeyStore has been changed since it was last loaded or stored.  Note: For some providers updates may be immediate without further load or store calls.
elytron.key-store.loaded-provider=Information about the provider that was used for this KeyStore.
elytron.key-store.loaded-provider.name=The name of the provider used to load the KeyStore.
elytron.key-store.loaded-provider.info=The information string about the provider used to load the KeyStore.
elytron.key-store.loaded-provider.version=The version of the provider used to load the KeyStore.
elytron.key-store.size=The number of entries in the KeyStore.

elytron.key-store.alias=An individual alias within the KeyStore.
elytron.key-store.alias.remove=Immediately remove the alias from the KeyStore, the success of this operation will be dependent on the underlying KeyStore provider supporting removals.
elytron.key-store.alias.creation-date=The creation date of the entry represented by this alias.
elytron.key-store.alias.entry-type=The type of the entry for this alias. Note: Unrecognised types will be reported as 'Other'.

elytron.key-store.alias.certificate=The certificate associated with the alias (Note: If the alias has a certificate chain this will always be undefined).
elytron.key-store.alias.certificate-chain=The certificate chain associated with the alias.

elytron.key-store.alias.certificate.type=The type of the certificate.
elytron.key-store.alias.certificate.algorithm=The algorithm of the public key.
elytron.key-store.alias.certificate.format=The format of the public key.
elytron.key-store.alias.certificate.public-key=The encoded public key associated with the certificate.
elytron.key-store.alias.certificate.sha-1-digest=The SHA-1 digest (finger print) of the certificate.
elytron.key-store.alias.certificate.sha-256-digest=The SHA-256 digest (finger print) of the certificate.
elytron.key-store.alias.certificate.encoded=The encoded value of the certificate.
elytron.key-store.alias.certificate.subject=The subject from the certificate.
elytron.key-store.alias.certificate.issuer=The issuer of the certificate.
elytron.key-store.alias.certificate.not-before=The starting date and time the certificate is valid.
elytron.key-store.alias.certificate.not-after=The expiration date and time of the certificate.
elytron.key-store.alias.certificate.serial-number=The serial number of the certificate.
elytron.key-store.alias.certificate.signature-algorithm=The algorithm used to generate the certificates signature.
elytron.key-store.alias.certificate.signature=The signature of the certificate.
elytron.key-store.alias.certificate.version=The certificate version.

elytron.key-store.alias.certificate-chain.type=The type of the certificate.
elytron.key-store.alias.certificate-chain.algorithm=The algorithm of the public key.
elytron.key-store.alias.certificate-chain.format=The format of the public key.
elytron.key-store.alias.certificate-chain.public-key=The encoded public key associated with the certificate.
elytron.key-store.alias.certificate-chain.sha-1-digest=The SHA-1 digest (finger print) of the certificate.
elytron.key-store.alias.certificate-chain.sha-256-digest=The SHA-256 digest (finger print) of the certificate.
elytron.key-store.alias.certificate-chain.encoded=The encoded value of the certificate.
elytron.key-store.alias.certificate-chain.subject=The subject from the certificate.
elytron.key-store.alias.certificate-chain.issuer=The issuer of the certificate.
elytron.key-store.alias.certificate-chain.not-before=The starting date and time the certificate is valid.
elytron.key-store.alias.certificate-chain.not-after=The expiration date and time of the certificate.
elytron.key-store.alias.certificate-chain.serial-number=The serial number of the certificate.
elytron.key-store.alias.certificate-chain.signature-algorithm=The algorithm used to generate the certificates signature.
elytron.key-store.alias.certificate-chain.signature=The signature of the certificate.
elytron.key-store.alias.certificate-chain.version=The certificate version.

elytron.modifiable-key-store.read-alias=Read an alias from a KeyStore.
elytron.modifiable-key-store.read-alias.alias=The alias of the KeyStore item to read.
elytron.modifiable-key-store.read-aliases=Read aliases from a KeyStore.
elytron.modifiable-key-store.remove-alias=Remove an alias from a KeyStore.
elytron.modifiable-key-store.remove-alias.alias=The alias of the KeyStore item to remove.

elytron.modifiable-key-store.generate-key-pair=Generate a key pair and wrap the resulting public key in a self-signed X.509 certificate. The generated private key and self-signed certificate will be added to the KeyStore.
elytron.modifiable-key-store.generate-key-pair.alias=The alias of the new KeyStore entry.
elytron.modifiable-key-store.generate-key-pair.algorithm=The algorithm to be used to generate the key pair.
elytron.modifiable-key-store.generate-key-pair.key-size=The key size to use when generating the key pair.
elytron.modifiable-key-store.generate-key-pair.signature-algorithm=The signature algorithm name to use when signing the self-signed certificate.
elytron.modifiable-key-store.generate-key-pair.distinguished-name=The DN to use as both the subject DN and the issuer DN.
elytron.modifiable-key-store.generate-key-pair.not-before=The starting date and time the self-signed certificate is valid.
elytron.modifiable-key-store.generate-key-pair.validity=The number of days for which the self-signed certificate should be considered valid. The default value is 90 days.
elytron.modifiable-key-store.generate-key-pair.extensions=The list of X.509 certificate extensions to include in the self-signed certificate.
elytron.modifiable-key-store.generate-key-pair.credential-reference=The credential reference to be used to protect the generated private key.

elytron.modifiable-key-store.generate-certificate-signing-request=Generate a PKCS #10 certificate signing request.
elytron.modifiable-key-store.generate-certificate-signing-request.alias=The alias that identifies the PrivateKeyEntry to use to generate the certificate signing request.
elytron.modifiable-key-store.generate-certificate-signing-request.signature-algorithm=The signature algorithm name to use when signing the certificate signing request.
elytron.modifiable-key-store.generate-certificate-signing-request.distinguished-name=The DN to use in the certificate signing request. If not specified, the DN from the certificate will be used.
elytron.modifiable-key-store.generate-certificate-signing-request.extensions=The list of X.509 certificate extensions to include in the certificate signing request.
elytron.modifiable-key-store.generate-certificate-signing-request.credential-reference=The credential reference to be used to access the private key.
elytron.modifiable-key-store.generate-certificate-signing-request.path=The path to the file where the certificate signing request should be stored.
elytron.modifiable-key-store.generate-certificate-signing-request.relative-to=The base path of the certificate signing request file.

elytron.modifiable-key-store.extensions.name=The name of the X.509 certificate extension.
elytron.modifiable-key-store.extensions.critical=Specifies whether the X.509 certificate extension should be marked as critical. The default value is false.
elytron.modifiable-key-store.extensions.value=The value of the X.509 certificate extension.
elytron.modifiable-key-store.credential-reference.store=The name of the credential store holding the alias to the credential.
elytron.modifiable-key-store.credential-reference.alias=The alias which denotes the stored secret or credential in the store.
elytron.modifiable-key-store.credential-reference.type=The type of credential this reference is denoting.
elytron.modifiable-key-store.credential-reference.clear-text=Secret specified using clear text.

elytron.modifiable-key-store.import-certificate=Import a certificate or certificate chain from a file into a KeyStore entry.
elytron.modifiable-key-store.import-certificate.alias=The alias that identifies the KeyStore entry.
elytron.modifiable-key-store.import-certificate.credential-reference=The credential reference to be used to access the private key.
elytron.modifiable-key-store.import-certificate.path=The path to the file that contains the certificate or certificate chain to import in binary encoding format or printable encoding format.
elytron.modifiable-key-store.import-certificate.relative-to=The base path of the certificate file.
elytron.modifiable-key-store.import-certificate.trust-cacerts=Specifies whether certificates from the cacerts file should be included when creating / validating the certificate chain.
elytron.modifiable-key-store.import-certificate.validate=Specifies whether to validate that the top-most certificate is actually trusted when importing a certificate chain or whether to validate the certificate is actually trusted when importing a certificate. The default value is true. When this is set to true and validation fails, the certificate or certificate chain will not be imported into a KeyStore entry.

elytron.modifiable-key-store.export-certificate=Export a certificate from a KeyStore entry to a file.
elytron.modifiable-key-store.export-certificate.alias=The alias that identifies the KeyStore entry.
elytron.modifiable-key-store.export-certificate.path=The path to the file to export the certificate to.
elytron.modifiable-key-store.export-certificate.relative-to=The base path of the export file.
elytron.modifiable-key-store.export-certificate.pem=Specifies whether to export the certificate in printable encoding format. If not specified, the certificate will be exported in binary encoding format.

elytron.modifiable-key-store.change-alias=Move an existing KeyStore entry to a new alias.
elytron.modifiable-key-store.change-alias.alias=The alias that identifies the existing KeyStore entry to move.
elytron.modifiable-key-store.change-alias.new-alias=The new alias to use.
elytron.modifiable-key-store.change-alias.credential-reference=The credential reference to be used to access the existing KeyStore entry, if needed.

elytron.modifiable-key-store.obtain-certificate=Obtain a signed certificate from a certificate authority and store it in a KeyStore entry.
elytron.modifiable-key-store.obtain-certificate.alias=The alias of the KeyStore entry.
elytron.modifiable-key-store.obtain-certificate.domain-names=The list of DNS name(s) to request the certificate for.
elytron.modifiable-key-store.obtain-certificate.certificate-authority-account=A reference to the certificate authority account information that should be used to obtain the certificate.
elytron.modifiable-key-store.obtain-certificate.agree-to-terms-of-service=Indicates whether or not the user agrees to the certificate authority's terms of service.
elytron.modifiable-key-store.obtain-certificate.staging=Indicates whether or not the certificate authority's staging URL should be used. This should only be set to true for testing purposes. This should never be set to true in a production environment.
elytron.modifiable-key-store.obtain-certificate.algorithm=The algorithm to be used to generate the key pair. The default value is RSA.
elytron.modifiable-key-store.obtain-certificate.key-size=The key size to use when generating the key pair. The default value is 2048.
elytron.modifiable-key-store.obtain-certificate.credential-reference=The credential reference to be used to protect the generated private key.

elytron.modifiable-key-store.revoke-certificate=Revoke a signed certificate.
elytron.modifiable-key-store.revoke-certificate.alias=The alias that identifies the KeyStore entry that contains the certificate to be revoked.
elytron.modifiable-key-store.revoke-certificate.reason=The reason for revocation.
elytron.modifiable-key-store.revoke-certificate.certificate-authority-account=A reference to the certificate authority account information that should be uesd to revoke the certificate.
elytron.modifiable-key-store.revoke-certificate.staging=Indicates whether or not the certificate authority's staging URL should be used. This should only be set to true for testing purposes. This should never be set to true in a production environment.

elytron.modifiable-key-store.should-renew-certificate=Check if a signed certificate is due for renewal.
elytron.modifiable-key-store.should-renew-certificate.alias=The alias that identifies the KeyStore entry that contains the certificate to check.
elytron.modifiable-key-store.should-renew-certificate.expiration=The number of days to expiry to be checked.

elytron.ldap-key-store=A LdapKeyStore definition.
elytron.ldap-key-store.add=Add a new LDAP KeyStore.
elytron.ldap-key-store.remove=Remove the LDAP KeyStore.
elytron.ldap-key-store.size=The size of LDAP KeyStore in amount of items/aliases.
elytron.ldap-key-store.state=The state of the underlying service that represents this KeyStore at runtime, if it is anything other than UP runtime operations will not be available.

elytron.ldap-key-store.dir-context=The name of DirContext, which will be used to communication with LDAP server.
elytron.ldap-key-store.search-path=The path in LDAP, where will be KeyStore items searched.
elytron.ldap-key-store.search-recursive=If the LDAP search should be recursive.
elytron.ldap-key-store.search-time-limit=The time limit for obtaining keystore items from LDAP.

elytron.ldap-key-store.filter-alias=The LDAP filter for obtaining an item of the KeyStore by alias. If this is not specified then the default value will be (alias_attribute={0}). The string '{0}' will be replaced by the searched alias and the 'alias_attribute' value will be the value of the attribute 'alias-attribute'.
elytron.ldap-key-store.filter-certificate=The LDAP filter for obtaining an item of the KeyStore by certificate. If this is not specified then the default value will be (certificate_attribute={0}). The string '{0}' will be replaced by searched encoded certificate and the 'certificate_attribute' will be the value of the attribute 'certificate-attribute'.
elytron.ldap-key-store.filter-iterate=The LDAP filter for iterating over all items of the KeyStore. If this is not specified then the default value will be (alias_attribute=*). The 'alias_attribute' will be the value of the attribute 'alias-attribute'.

elytron.ldap-key-store.new-item-template=Configuration for item creation. Define how will look LDAP entry of newly created keystore item.
elytron.ldap-key-store.new-item-template.new-item-path=The path in LDAP, where will be newly created KeyStore items stored.
elytron.ldap-key-store.new-item-template.new-item-rdn=The name of LDAP attribute, which will be used in RDN of newly created items.
elytron.ldap-key-store.new-item-template.new-item-attributes=The LDAP attributes, which will be set for newly created items.
elytron.ldap-key-store.new-item-template.name=The name of the LDAP attribute.
elytron.ldap-key-store.new-item-template.value=The value of LDAP attribute.

elytron.ldap-key-store.alias-attribute=The name of LDAP attribute, where will be item alias stored.
elytron.ldap-key-store.certificate-attribute=The name of LDAP attribute, where will be certificate stored.
elytron.ldap-key-store.certificate-type=The type of the Certificate.
elytron.ldap-key-store.certificate-chain-attribute=The name of LDAP attribute, where will be certificate chain stored.
elytron.ldap-key-store.certificate-chain-type=The type of the Certificates in certificate chain.
elytron.ldap-key-store.certificate-chain-encoding=The encoding of the certificate chain.
elytron.ldap-key-store.key-attribute=The name of LDAP attribute, where will be key stored.
elytron.ldap-key-store.key-type=The type of KeyStore, in which will be key serialized to LDAP attribute.

elytron.ldap-key-store.alias=An individual alias within the KeyStore.
elytron.ldap-key-store.alias.remove=Immediately remove the alias from the KeyStore, the success of this operation will be dependent on the underlying KeyStore provider supporting removals.
elytron.ldap-key-store.alias.creation-date=The creation date of the entry represented by this alias.
elytron.ldap-key-store.alias.entry-type=The type of the entry for this alias. Note: Unrecognised types will be reported as 'Other'.

elytron.ldap-key-store.alias.certificate=The certificate associated with the alias (Note: If the alias has a certificate chain this will always be undefined).
elytron.ldap-key-store.alias.certificate-chain=The certificate chain associated with the alias.

elytron.ldap-key-store.alias.certificate.type=The type of the certificate.
elytron.ldap-key-store.alias.certificate.algorithm=The algorithm of the public key.
elytron.ldap-key-store.alias.certificate.format=The format of the public key.
elytron.ldap-key-store.alias.certificate.public-key=The encoded public key associated with the certificate.
elytron.ldap-key-store.alias.certificate.sha-1-digest=The SHA-1 digest (finger print) of the certificate.
elytron.ldap-key-store.alias.certificate.sha-256-digest=The SHA-256 digest (finger print) of the certificate.
elytron.ldap-key-store.alias.certificate.encoded=The encoded value of the certificate.
elytron.ldap-key-store.alias.certificate.subject=The subject from the certificate.
elytron.ldap-key-store.alias.certificate.issuer=The issuer of the certificate.
elytron.ldap-key-store.alias.certificate.not-before=The starting date and time the certificate is valid.
elytron.ldap-key-store.alias.certificate.not-after=The expiration date and time of the certificate.
elytron.ldap-key-store.alias.certificate.serial-number=The serial number of the certificate.
elytron.ldap-key-store.alias.certificate.signature-algorithm=The algorithm used to generate the certificates signature.
elytron.ldap-key-store.alias.certificate.signature=The signature of the certificate.
elytron.ldap-key-store.alias.certificate.version=The certificate version.

elytron.ldap-key-store.alias.certificate-chain.type=The type of the certificate.
elytron.ldap-key-store.alias.certificate-chain.algorithm=The algorithm of the public key.
elytron.ldap-key-store.alias.certificate-chain.format=The format of the public key.
elytron.ldap-key-store.alias.certificate-chain.public-key=The encoded public key associated with the certificate.
elytron.ldap-key-store.alias.certificate-chain.sha-1-digest=The SHA-1 digest (finger print) of the certificate.
elytron.ldap-key-store.alias.certificate-chain.sha-256-digest=The SHA-256 digest (finger print) of the certificate.
elytron.ldap-key-store.alias.certificate-chain.encoded=The encoded value of the certificate.
elytron.ldap-key-store.alias.certificate-chain.subject=The subject from the certificate.
elytron.ldap-key-store.alias.certificate-chain.issuer=The issuer of the certificate.
elytron.ldap-key-store.alias.certificate-chain.not-before=The starting date and time the certificate is valid.
elytron.ldap-key-store.alias.certificate-chain.not-after=The expiration date and time of the certificate.
elytron.ldap-key-store.alias.certificate-chain.serial-number=The serial number of the certificate.
elytron.ldap-key-store.alias.certificate-chain.signature-algorithm=The algorithm used to generate the certificates signature.
elytron.ldap-key-store.alias.certificate-chain.signature=The signature of the certificate.
elytron.ldap-key-store.alias.certificate-chain.version=The certificate version.

elytron.filtering-key-store=A filtering KeyStore definition.
elytron.filtering-key-store.add=Add a new KeyStore definition.
elytron.filtering-key-store.remove=Remove the KeyStore definition.
elytron.filtering-key-store.alias-filter=A filter to apply to the aliases returned from the KeyStore, can either be a comma separated list of aliases to return or one of the following formats ALL:-alias1:-alias2, NONE:+alias1:+alias2
elytron.filtering-key-store.key-store=Name of filtered KeyStore.
elytron.filtering-key-store.state=The state of the underlying service that represents this KeyStore at runtime, if it is anything other than UP runtime operations will not be available.
elytron.filtering-key-store.alias=An individual alias within the filtering KeyStore.

elytron.key-manager=A key manager definition for creating the KeyManager as used to create an SSLContext.
#operations
elytron.key-manager.add=Add the new key manager definition.
elytron.key-manager.remove=Remove the key manager definition.
elytron.key-manager.init=Reinitialize key manager.
# Attributes
elytron.key-manager.algorithm=The name of the algorithm to use to create the underlying KeyManagerFactory.
elytron.key-manager.providers=Reference to obtain the Provider[] to use when creating the underlying KeyManagerFactory.
elytron.key-manager.provider-name=The name of the provider to use to create the underlying KeyManagerFactory.
elytron.key-manager.credential-reference=The credential reference to decrypt KeyStore item. (Not a password of the KeyStore.)
elytron.key-manager.credential-reference.store=The name of the credential store holding the alias to credential.
elytron.key-manager.credential-reference.alias=The alias which denotes stored secret or credential in the store.
elytron.key-manager.credential-reference.type=The type of credential this reference is denoting.
elytron.key-manager.credential-reference.clear-text=The secret specified using clear text. Check credential store way of supplying credential/secrets to services.
elytron.key-manager.key-store=Reference to the KeyStore to use to initialise the underlying KeyManagerFactory.
elytron.key-manager.alias-filter=A filter to apply to the aliases returned from the KeyStore, can either be a comma separated list of aliases to return or one of the following formats ALL:-alias1:-alias2, NONE:+alias1:+alias2

elytron.trust-manager=A trust manager definition for creating the TrustManager[] as used to create an SSLContext.
#operations
elytron.trust-manager.add=Add the new trust manager definition.
elytron.trust-manager.remove=Remove the trust manager definition.
elytron.trust-manager.init=Reinitialize trust manager.
# Attributes
elytron.trust-manager.algorithm=The name of the algorithm to use to create the underlying TrustManagerFactory.
elytron.trust-manager.providers=Reference to obtain the Provider[] to use when creating the underlying TrustManagerFactory.
elytron.trust-manager.provider-name=The name of the provider to use to create the underlying TrustManagerFactory.
elytron.trust-manager.key-store=Reference to the KeyStore to use to initialise the underlying TrustManagerFactory.
elytron.trust-manager.alias-filter=A filter to apply to the aliases returned from the KeyStore, can either be a comma separated list of aliases to return or one of the following formats ALL:-alias1:-alias2, NONE:+alias1:+alias2
elytron.trust-manager.certificate-revocation-list=Enables certificate revocation list checks to a trust manager.
elytron.trust-manager.certificate-revocation-list.path=The path to the configuration to use to initialise the provider.
elytron.trust-manager.certificate-revocation-list.relative-to=The base path of the certificate revocation list file.
elytron.trust-manager.certificate-revocation-list.maximum-cert-path=The maximum number of non-self-issued intermediate certificates that may exist in a certification path.
elytron.trust-manager.reload-certificate-revocation-list=Notify the trust manager in order to reload the certificate revocation list, if defined.

elytron.client-ssl-context=An SSLContext for use on the client side of a connection.
# operations
elytron.client-ssl-context.add=Add the SSLContext definition.
elytron.client-ssl-context.remove=Remove the SSLContext definition.
#Attributes
elytron.client-ssl-context.cipher-suite-filter=The filter to apply to specify the enabled cipher suites.
elytron.client-ssl-context.protocols=The enabled protocols.
elytron.client-ssl-context.use-cipher-suites-order=To honor local cipher suites preference.
elytron.client-ssl-context.maximum-session-cache-size=The maximum number of SSL sessions in the cache. The default value -1 means use the JVM default value. Value zero means there is no limit.
elytron.client-ssl-context.session-timeout=The timeout for SSL sessions, in seconds. The default value -1 means use the JVM default value. Value zero means there is no limit.
elytron.client-ssl-context.key-manager=Reference to the key manager to use within the SSLContext.
elytron.client-ssl-context.key-refresh=Refresh KeyManager used by SSLContext.
elytron.client-ssl-context.trust-manager=Reference to the trust manager to use within the SSLContext.
elytron.client-ssl-context.provider-name=The name of the provider to use. If not specified, all providers from providers will be passed to the SSLContext.
elytron.client-ssl-context.providers=The name of the providers to obtain the Provider[] to use to load the SSLContext.
# Runtime Attributes
elytron.client-ssl-context.active-session-count=The count of current active sessions.

elytron.client-ssl-context.ssl-session=A currently established SSL session.
elytron.client-ssl-context.ssl-session.application-buffer-size=The application buffer size as reported by the SSLSession.
elytron.client-ssl-context.ssl-session.cipher-suite=The selected cipher suite as reported by the SSLSession.
elytron.client-ssl-context.ssl-session.creation-time=The creation time as reported by the SSLSession.
elytron.client-ssl-context.ssl-session.last-accessed-time=The last accessed time as reported by the SSLSession.
elytron.client-ssl-context.ssl-session.local-principal=The local principal as reported by the SSLSession.
elytron.client-ssl-context.ssl-session.packet-buffer-size=The packet buffer size as reported by the SSLSession.
elytron.client-ssl-context.ssl-session.peer-host=The peer host as reported by the SSLSession.
elytron.client-ssl-context.ssl-session.peer-port=The peer port as reported by the SSLSession.
elytron.client-ssl-context.ssl-session.peer-principal=The peer principal as reported by the SSLSession.
elytron.client-ssl-context.ssl-session.protocol=The protocol as reported by the SSLSession.
elytron.client-ssl-context.ssl-session.valid=The validity of the session as reported by the SSLSession.

elytron.client-ssl-context.ssl-session.local-certificates=The local certificates from the SSLSession.
elytron.client-ssl-context.ssl-session.local-certificates.type=The type of the certificate.
elytron.client-ssl-context.ssl-session.local-certificates.algorithm=The algorithm of the public key.
elytron.client-ssl-context.ssl-session.local-certificates.format=The format of the public key.
elytron.client-ssl-context.ssl-session.local-certificates.public-key=The encoded public key associated with the certificate.
elytron.client-ssl-context.ssl-session.local-certificates.sha-1-digest=The SHA-1 digest (finger print) of the certificate.
elytron.client-ssl-context.ssl-session.local-certificates.sha-256-digest=The SHA-256 digest (finger print) of the certificate.
elytron.client-ssl-context.ssl-session.local-certificates.encoded=The encoded value of the certificate.
elytron.client-ssl-context.ssl-session.local-certificates.subject=The subject from the certificate.
elytron.client-ssl-context.ssl-session.local-certificates.issuer=The issuer of the certificate.
elytron.client-ssl-context.ssl-session.local-certificates.not-before=The starting date and time the certificate is valid.
elytron.client-ssl-context.ssl-session.local-certificates.not-after=The expiration date and time of the certificate.
elytron.client-ssl-context.ssl-session.local-certificates.serial-number=The serial number of the certificate.
elytron.client-ssl-context.ssl-session.local-certificates.signature-algorithm=The algorithm used to generate the certificates signature.
elytron.client-ssl-context.ssl-session.local-certificates.signature=The signature of the certificate.
elytron.client-ssl-context.ssl-session.local-certificates.version=The certificate version.

elytron.client-ssl-context.ssl-session.peer-certificates=The peer certificates from the SSLSession.
elytron.client-ssl-context.ssl-session.peer-certificates.type=The type of the certificate.
elytron.client-ssl-context.ssl-session.peer-certificates.algorithm=The algorithm of the public key.
elytron.client-ssl-context.ssl-session.peer-certificates.format=The format of the public key.
elytron.client-ssl-context.ssl-session.peer-certificates.public-key=The encoded public key associated with the certificate.
elytron.client-ssl-context.ssl-session.peer-certificates.sha-1-digest=The SHA-1 digest (finger print) of the certificate.
elytron.client-ssl-context.ssl-session.peer-certificates.sha-256-digest=The SHA-256 digest (finger print) of the certificate.
elytron.client-ssl-context.ssl-session.peer-certificates.encoded=The encoded value of the certificate.
elytron.client-ssl-context.ssl-session.peer-certificates.subject=The subject from the certificate.
elytron.client-ssl-context.ssl-session.peer-certificates.issuer=The issuer of the certificate.
elytron.client-ssl-context.ssl-session.peer-certificates.not-before=The starting date and time the certificate is valid.
elytron.client-ssl-context.ssl-session.peer-certificates.not-after=The expiration date and time of the certificate.
elytron.client-ssl-context.ssl-session.peer-certificates.serial-number=The serial number of the certificate.
elytron.client-ssl-context.ssl-session.peer-certificates.signature-algorithm=The algorithm used to generate the certificates signature.
elytron.client-ssl-context.ssl-session.peer-certificates.signature=The signature of the certificate.
elytron.client-ssl-context.ssl-session.peer-certificates.version=The certificate version.

# Operations
elytron.client-ssl-context.ssl-session.invalidate=Invalidate the SSLSession (Note: This does not terminate current connections, only prevents future connections from joining or resuming this session).

elytron.server-ssl-context=An SSLContext for use on the server side of a connection.
# operations
elytron.server-ssl-context.add=Add the SSLContext definition.
elytron.server-ssl-context.remove=Remove the SSLContext definition.
#Attributes
elytron.server-ssl-context.security-domain=The security domain to use for authentication during SSL session establishment.
elytron.server-ssl-context.cipher-suite-filter=The filter to apply to specify the enabled cipher suites.
elytron.server-ssl-context.protocols=The enabled protocols.
elytron.server-ssl-context.want-client-auth=To request (but not to require) a client certificate on SSL handshake. If a security domain is referenced and supports X509 evidence, this will be set to true automatically. Ignored when need-client-auth is set.
elytron.server-ssl-context.need-client-auth=To require a client certificate on SSL handshake. Connection without trusted client certificate (see trust-manager) will be rejected.
elytron.server-ssl-context.authentication-optional=Rejecting of the client certificate by the security domain will not prevent the connection. Allows a fall through to use other authentication mechanisms (like form login) when the client certificate is rejected by security domain. Has an effect only when the security domain is set.
elytron.server-ssl-context.use-cipher-suites-order=To honor local cipher suites preference.
elytron.server-ssl-context.maximum-session-cache-size=The maximum number of SSL sessions in the cache. The default value -1 means use the JVM default value. Value zero means there is no limit.
elytron.server-ssl-context.session-timeout=The timeout for SSL sessions, in seconds. The default value -1 means use the JVM default value. Value zero means there is no limit.
elytron.server-ssl-context.wrap=Should the SSLEngine, SSLSocket, and SSLServerSocket instances returned be wrapped to protect against further modification.
elytron.server-ssl-context.key-manager=Reference to the key manager to use within the SSLContext.
elytron.server-ssl-context.key-refresh=Refresh KeyManager used by SSLContext.
elytron.server-ssl-context.trust-manager=Reference to the trust manager to use within the SSLContext.
elytron.server-ssl-context.pre-realm-principal-transformer=A principal transformer to apply before the realm is selected.
elytron.server-ssl-context.post-realm-principal-transformer=A principal transformer to apply after the realm is selected.
elytron.server-ssl-context.final-principal-transformer=A final principal transformer to apply for this mechanism realm.
elytron.server-ssl-context.realm-mapper=The realm mapper to be used for SSL authentication.
elytron.server-ssl-context.provider-name=The name of the provider to use. If not specified, all providers from providers will be passed to the SSLContext.
elytron.server-ssl-context.providers=The name of the providers to obtain the Provider[] to use to load the SSLContext.
# Runtime Attributes
elytron.server-ssl-context.active-session-count=The count of current active sessions.

elytron.server-ssl-context.ssl-session=A currently established SSL session.
elytron.server-ssl-context.ssl-session.application-buffer-size=The application buffer size as reported by the SSLSession.
elytron.server-ssl-context.ssl-session.cipher-suite=The selected cipher suite as reported by the SSLSession.
elytron.server-ssl-context.ssl-session.creation-time=The creation time as reported by the SSLSession.
elytron.server-ssl-context.ssl-session.last-accessed-time=The last accessed time as reported by the SSLSession.
elytron.server-ssl-context.ssl-session.local-principal=The local principal as reported by the SSLSession.
elytron.server-ssl-context.ssl-session.packet-buffer-size=The packet buffer size as reported by the SSLSession.
elytron.server-ssl-context.ssl-session.peer-host=The peer host as reported by the SSLSession.
elytron.server-ssl-context.ssl-session.peer-port=The peer port as reported by the SSLSession.
elytron.server-ssl-context.ssl-session.peer-principal=The peer principal as reported by the SSLSession.
elytron.server-ssl-context.ssl-session.protocol=The protocol as reported by the SSLSession.
elytron.server-ssl-context.ssl-session.valid=The validity of the session as reported by the SSLSession.

elytron.server-ssl-context.ssl-session.local-certificates=The local certificates from the SSLSession.
elytron.server-ssl-context.ssl-session.local-certificates.type=The type of the certificate.
elytron.server-ssl-context.ssl-session.local-certificates.algorithm=The algorithm of the public key.
elytron.server-ssl-context.ssl-session.local-certificates.format=The format of the public key.
elytron.server-ssl-context.ssl-session.local-certificates.public-key=The encoded public key associated with the certificate.
elytron.server-ssl-context.ssl-session.local-certificates.sha-1-digest=The SHA-1 digest (finger print) of the certificate.
elytron.server-ssl-context.ssl-session.local-certificates.sha-256-digest=The SHA-256 digest (finger print) of the certificate.
elytron.server-ssl-context.ssl-session.local-certificates.encoded=The encoded value of the certificate.
elytron.server-ssl-context.ssl-session.local-certificates.subject=The subject from the certificate.
elytron.server-ssl-context.ssl-session.local-certificates.issuer=The issuer of the certificate.
elytron.server-ssl-context.ssl-session.local-certificates.not-before=The starting date and time the certificate is valid.
elytron.server-ssl-context.ssl-session.local-certificates.not-after=The expiration date and time of the certificate.
elytron.server-ssl-context.ssl-session.local-certificates.serial-number=The serial number of the certificate.
elytron.server-ssl-context.ssl-session.local-certificates.signature-algorithm=The algorithm used to generate the certificates signature.
elytron.server-ssl-context.ssl-session.local-certificates.signature=The signature of the certificate.
elytron.server-ssl-context.ssl-session.local-certificates.version=The certificate version.

elytron.server-ssl-context.ssl-session.peer-certificates=The peer certificates from the SSLSession.
elytron.server-ssl-context.ssl-session.peer-certificates.type=The type of the certificate.
elytron.server-ssl-context.ssl-session.peer-certificates.algorithm=The algorithm of the public key.
elytron.server-ssl-context.ssl-session.peer-certificates.format=The format of the public key.
elytron.server-ssl-context.ssl-session.peer-certificates.public-key=The encoded public key associated with the certificate.
elytron.server-ssl-context.ssl-session.peer-certificates.sha-1-digest=The SHA-1 digest (finger print) of the certificate.
elytron.server-ssl-context.ssl-session.peer-certificates.sha-256-digest=The SHA-256 digest (finger print) of the certificate.
elytron.server-ssl-context.ssl-session.peer-certificates.encoded=The encoded value of the certificate.
elytron.server-ssl-context.ssl-session.peer-certificates.subject=The subject from the certificate.
elytron.server-ssl-context.ssl-session.peer-certificates.issuer=The issuer of the certificate.
elytron.server-ssl-context.ssl-session.peer-certificates.not-before=The starting date and time the certificate is valid.
elytron.server-ssl-context.ssl-session.peer-certificates.not-after=The expiration date and time of the certificate.
elytron.server-ssl-context.ssl-session.peer-certificates.serial-number=The serial number of the certificate.
elytron.server-ssl-context.ssl-session.peer-certificates.signature-algorithm=The algorithm used to generate the certificates signature.
elytron.server-ssl-context.ssl-session.peer-certificates.signature=The signature of the certificate.
elytron.server-ssl-context.ssl-session.peer-certificates.version=The certificate version.

# Operations
elytron.server-ssl-context.ssl-session.invalidate=Invalidate the SSLSession (Note: This does not terminate current connections, only prevents future connections from joining or resuming this session).

elytron.certificate-authority=A certificate authority definition.
# Operations
elytron.certificate-authority.add=Add a new certificate authority definition.
elytron.certificate-authority.remove=Remove the certificate authority definition.
# Configuration Attributes
elytron.certificate-authority.url=URL of the certificate authority.
elytron.certificate-authority.staging-url=URL of the certificate authority to use in pre-production.

elytron.certificate-authority-account=A certificate authority account definition.
# Operations
elytron.certificate-authority-account.add=Add a new certificate authority account definition.
elytron.certificate-authority-account.remove=Remove the certificate authority account definition.
elytron.certificate-authority-account.create-account=Create an account with the certificate authority if one doesn't already exist.
elytron.certificate-authority-account.create-account.agree-to-terms-of-service=Indicates whether or not the user agrees to the certificate authority's terms of service.
elytron.certificate-authority-account.create-account.staging=Indicates whether or not the certificate authority's staging URL should be used. The default value is false. This should only be set to true for testing purposes. This should never be set to true in a production environment.
elytron.certificate-authority-account.update-account=Update an account with the certificate authority.
elytron.certificate-authority-account.update-account.agree-to-terms-of-service=Indicates whether or not the user agrees to the certificate authority's terms of service.
elytron.certificate-authority-account.update-account.staging=Indicates whether or not the certificate authority's staging URL should be used. The default value is false. This should only be set to true for testing purposes. This should never be set to true in a production environment.
elytron.certificate-authority-account.change-account-key=Change the key associated with this certificate authority account.
elytron.certificate-authority-account.change-account-key.staging=Indicates whether or not the certificate authority's staging URL should be used. The default value is false. This should only be set to true for testing purposes. This should never be set to true in a production environment.
elytron.certificate-authority-account.deactivate-account=Deactivate this certificate authority account.
elytron.certificate-authority-account.deactivate-account.staging=Indicates whether or not the certificate authority's staging URL should be used. The default value is false. This should only be set to true for testing purposes. This should never be set to true in a production environment.
elytron.certificate-authority-account.get-metadata=Get the metadata associated with the certificate authority.
elytron.certificate-authority-account.get-metadata.staging=Indicates whether or not the certificate authority's staging URL should be used. The default value is false. This should only be set to true for testing purposes. This should never be set to true in a production environment.

# Configuration Attributes
elytron.certificate-authority-account.certificate-authority=The name of the certificate authority to use.
elytron.certificate-authority-account.contact-urls=A list of URLs that the certificate authority can contact about any issues related to this account.
elytron.certificate-authority-account.key-store=The keystore that contains the certificate authority account key.
elytron.certificate-authority-account.alias=The alias of certificate authority account key in the keystore. If the alias does not already exist in the keystore, a certificate authority account key will be automatically generated and stored as a PrivateKeyEntry under the alias.
elytron.certificate-authority-account.credential-reference=Credential to be used when accessing the certificate authority account key.
elytron.certificate-authority-account.credential-reference.store=The name of the credential store holding the alias to credential.
elytron.certificate-authority-account.credential-reference.alias=The alias which denotes stored secret or credential in the store.
elytron.certificate-authority-account.credential-reference.type=The type of credential this reference is denoting.
elytron.certificate-authority-account.credential-reference.clear-text=Secret specified using clear text. Check credential store way of supplying credential/secrets to services.
elytron.server-ssl-sni-context=A server side SNI Aware SSLContext that selects between an underlying context based on the provided SNI name
elytron.server-ssl-sni-context.add=Adds a SNI context
elytron.server-ssl-sni-context.remove=Removes a SNI context
elytron.server-ssl-sni-context.default-ssl-context=The context to use if no SNI information is present, or if it does not match any mappings
elytron.server-ssl-sni-context.host-context-map=A mapping between a server name and an SSContext

####################
# Credential Store #
####################
elytron.credential-store=Credential store to keep alias for sensitive information such as passwords for external services.
elytron.credential-store.name=Name of the credential store.
elytron.credential-store.type=The credential store type, e.g. KeyStoreCredentialStore.
elytron.credential-store.credential-reference=Credential reference to be used to create protection parameter.
elytron.credential-store.credential-reference.store=The name of the credential store holding the alias to credential.
elytron.credential-store.credential-reference.alias=The alias which denotes stored secret or credential in the store.
elytron.credential-store.credential-reference.type=The type of credential this reference is denoting.
elytron.credential-store.credential-reference.clear-text=Secret specified using clear text. Check credential store way of supplying credential/secrets to services.
elytron.credential-store.loaded-provider=Information about the provider that loaded implementation of this credential store type.
elytron.credential-store.loaded-provider.name=The name of the provider loader.
elytron.credential-store.loaded-provider.info=The information string about the provider loader.
elytron.credential-store.loaded-provider.version=The version of the provider used to load the credential store.
elytron.credential-store.providers=The name of the providers defined within the subsystem to obtain the Providers to search for the one that can create the required CredentialStore type. If this is not specified then the global list of Providers is used instead.
elytron.credential-store.other-providers=The name of the providers defined within the subsystem to obtain the Providers to search for the one that can create the required JCA objects within credential store. This is valid only for key-store based CredentialStore. If this is not specified then the global list of Providers is used instead.
elytron.credential-store.provider-name=The name of the provider to use to instantiate the CredentialStoreSpi. If the provider is not specified then the first provider found that can create an instance of the specified 'type' will be used.
elytron.credential-store.implementation-properties=Map of credentials store implementation specific properties.
elytron.credential-store.location=File name of credential store storage.
elytron.credential-store.modifiable=Specifies whether credential store is modifiable.
elytron.credential-store.create=Specifies whether credential store should create storage when it doesn't exist.
elytron.credential-store.relative-to=A reference to a previously defined path that the file name is relative to.
elytron.credential-store.add=Add another credential store to the configuration.
elytron.credential-store.remove=Remove credential store from the configuration.
elytron.credential-store.reload=Reload credential store (reinitialize and load new data if present).
elytron.credential-store.state=The state of the underlying service that represents this credential store at runtime.
elytron.credential-store.read-aliases=Read aliases (entries) from a credential store.
elytron.credential-store.add-alias=Add an alias to the credential store.
elytron.credential-store.add-alias.alias=The alias of the credential store item to add.
elytron.credential-store.add-alias.entry-type=Type of a credential (entry) stored in the credential store.
elytron.credential-store.add-alias.secret-value=Secret value such as a password.
elytron.credential-store.remove-alias=Remove a credential (entry) stored in the credential store.
elytron.credential-store.remove-alias.alias=The alias of the credential store item to remove.
elytron.credential-store.set-secret=Set the secret value of a credential (entry) stored in the credential store.
elytron.credential-store.set-secret.alias=The alias of the credential store item to set.
elytron.credential-store.set-secret.entry-type=Type of a credential (entry) stored in the credential store.
elytron.credential-store.set-secret.secret-value=Secret value such as a password.

##############
# DirContext #
##############
elytron.dir-context=The configuration to connect to a directory (LDAP) server.
elytron.dir-context.add=Add the DirContext definition.
elytron.dir-context.remove=Remove the DirContext definition.
elytron.dir-context.url=The connection url.
elytron.dir-context.authentication-level=The authentication level (security level/authentication mechanism) to use. Corresponds to SECURITY_AUTHENTICATION ('java.naming.security.authentication') environment property. Allowed values: 'none', 'simple', sasl_mech, where sasl_mech is a space-separated list of SASL mechanism names.
elytron.dir-context.authentication-context=The authentication context to obtain login credentials to connect to the LDAP server. Can be omitted if authentication-level is 'none' (anonymous).
elytron.dir-context.principal=The principal to authenticate and connect to the LDAP server. Can be omitted if authentication-level is 'none' (anonymous).
elytron.dir-context.credential-reference=The credential reference to authenticate and connect to the LDAP server. Can be omitted if authentication-level is 'none' (anonymous).
elytron.dir-context.credential-reference.store=The name of the credential store holding the alias to credential.
elytron.dir-context.credential-reference.alias=The alias which denotes stored secret or credential in the store.
elytron.dir-context.credential-reference.type=The type of credential this reference is denoting.
elytron.dir-context.credential-reference.clear-text=Secret specified using clear text. Check credential store way of supplying credential/secrets to services.
elytron.dir-context.enable-connection-pooling=Indicates if connection pooling is enabled.
elytron.dir-context.module=Name of module that will be used as class loading base.
elytron.dir-context.referral-mode=If referrals should be followed.
elytron.dir-context.ssl-context=The name of ssl-context used to secure connection to the LDAP server.
elytron.dir-context.connection-timeout=The timeout for connecting to the LDAP server in milliseconds.
elytron.dir-context.read-timeout=The read timeout for an LDAP operation in milliseconds.
elytron.dir-context.properties=The additional connection properties for the DirContext.

#######################
# Policies #
#######################

elytron.policy=A definition that sets up a policy provider.
# Operations
elytron.policy.add=Add operation for adding a policy provider.
elytron.policy.remove=Remove operation for removing a policy provider.
# Attributes
elytron.policy.default-policy=Not used.
elytron.policy.default-policy.deprecated=The 'default-policy' attribute is ignored, as a policy resource should be configured with only one policy.

# JACC
elytron.policy.jacc-policy=A policy provider definition that sets up JACC and related services.
# Attributes
elytron.policy.jacc-policy.name=The name of this provider.
elytron.policy.jacc-policy.policy=The name of a java.security.Policy implementation referencing a policy provider.
elytron.policy.jacc-policy.configuration-factory=The name of a javax.security.jacc.PolicyConfigurationFactory implementation referencing a policy configuration factory provider.
elytron.policy.jacc-policy.module=The name of the module to load the provider from.

# Custom
elytron.policy.custom-policy=A custom policy provider definition.
# Operations
elytron.policy.custom-policy.add=Add operation for adding the custom provider.
elytron.policy.custom-policy.remove=Remove operation for removing the custom provider.
# Attributes
elytron.policy.custom-policy.name=The name of this provider
elytron.policy.custom-policy.class-name=The name of a java.security.Policy implementation referencing a policy provider.
elytron.policy.custom-policy.module=The name of the module to load the provider from.
