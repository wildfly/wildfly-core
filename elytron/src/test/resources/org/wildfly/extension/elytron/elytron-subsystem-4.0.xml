<!--
  ~ JBoss, Home of Professional Open Source
  ~ Copyright 2018, Red Hat, Inc., and individual contributors as indicated
  ~ by the @authors tag.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!-- for needs of DomainTestCase -->
<subsystem xmlns="urn:wildfly:elytron:4.0">
    <security-domains>
        <security-domain name="MyDomain" default-realm="FileRealm" realm-mapper="MyRealmMapper" permission-mapper="MyPermissionMapper"
                         pre-realm-principal-transformer="NameRewriterXY" post-realm-principal-transformer="NameRewriterYU" trusted-security-domains="AnotherDomain">
            <realm name="FileRealm" role-decoder="MyRoleDecoder" role-mapper="MyRoleMapper"/>
            <realm name="PropRealm" principal-transformer="NameRewriterRealmRemover"/>
        </security-domain>
        <security-domain name="X500Domain" default-realm="FileRealm" principal-decoder="MyX500PrincipalDecoder">
            <realm name="FileRealm"/>
        </security-domain>
        <security-domain name="X500DomainTwo" default-realm="FileRealm" principal-decoder="MyX500PrincipalDecoderTwo">
            <realm name="FileRealm"/>
        </security-domain>
        <security-domain name="X500DomainThree" default-realm="FileRealm" principal-decoder="MyX500PrincipalDecoderThree">
            <realm name="FileRealm"/>
        </security-domain>
        <security-domain name="AnotherDomain" default-realm="PropRealm" permission-mapper="LoginPermissionMapper" trusted-security-domains="MyDomain">
            <realm name="PropRealm"/>
        </security-domain>
    </security-domains>
    <security-realms>
        <jdbc-realm name="NewJdbcScramSha384">
            <principal-query sql="SELECT" data-source="ExampleDS">
                <scram-mapper algorithm="scram-sha-384" password-index="1" salt-index="2" iteration-count-index="10000"/>
            </principal-query>
        </jdbc-realm>
        <jdbc-realm name="NewJdbcScramSha512">
            <principal-query sql="SELECT" data-source="ExampleDS">
                <scram-mapper algorithm="scram-sha-512" password-index="1" salt-index="2" iteration-count-index="10000"/>
            </principal-query>
        </jdbc-realm>
        <properties-realm name="PropRealm">
            <users-properties path="users-hashed.properties" relative-to="jboss.server.config.dir"/>
        </properties-realm>
        <properties-realm name="NonDomainRealm">
            <users-properties path="users-hashed.properties" relative-to="jboss.server.config.dir"/>
        </properties-realm>
        <filesystem-realm name="FileRealm" levels="2" encoded="false">
            <file path="filesystem-realm" relative-to="jboss.server.config.dir"/>
        </filesystem-realm>
    </security-realms>
    <credential-security-factories>
        <custom-credential-security-factory name="CustomFactory" module="a.b.c" class-name="org.wildfly.security.ElytronFactory">
            <configuration>
                <property name="a" value="b"/>
                <property name="c" value="d"/>
            </configuration>
        </custom-credential-security-factory>

        <kerberos-security-factory name="KerberosFactory"
                                   principal="bob@Elytron.org"
                                   path="bob.keytab"
                                   relative-to="server.config.dir"
                                   minimum-remaining-lifetime="10"
                                   request-lifetime="120"
                                   server="false"
                                   obtain-kerberos-ticket="true"
                                   debug="true"
                                   wrap-gss-credential="true"
                                   required="true"
                                   mechanism-names="KRB5 KRB5LEGACY"
                                   mechanism-oids="1.2.840.113554.1.2.2 1.3.6.1.5.5.2">
            <option name="a" value="b"/>
            <option name="c" value="d"/>
        </kerberos-security-factory>
        <kerberos-security-factory name="OptionLessKerberosFactory"
                                   principal="bob@Elytron.org"
                                   path="bob.keytab"
                                   relative-to="server.config.dir"
                                   minimum-remaining-lifetime="10"
                                   request-lifetime="120"
                                   server="false"
                                   obtain-kerberos-ticket="true"
                                   debug="true"
                                   wrap-gss-credential="true"
                                   mechanism-oids="1.2.840.113554.1.2.2 1.3.6.1.5.5.2"/>
    </credential-security-factories>
    <mappers>
        <custom-permission-mapper class-name="org.wildfly.extension.elytron.DomainTestCase$MyPermissionMapper" name="MyPermissionMapper" module="a.b.c"/>
        <custom-permission-mapper class-name="org.wildfly.extension.elytron.DomainTestCase$LoginPermissionMapper" name="LoginPermissionMapper" module="a.b.c"/>
        <simple-permission-mapper name="SimplePermissionMapperLegacy" mapping-mode="and">
            <permission-mapping>
                <principal name="John"/>
                <principal name="Joe"/>
                <role name="User"/>
                <role name="Administrator"/>
                <permission class-name="a.b.MyPermission"/>
                <permission class-name="a.b.MyOtherPermission" target-name="../c" action="delete"/>
            </permission-mapping>
            <permission-mapping>
                <principal name="John Doe"/>
                <permission class-name="a.b.JohnPermission"/>
            </permission-mapping>
            <permission-mapping>
                <principal name="User"/>
                <permission class-name="a.b.UserPermission"/>
            </permission-mapping>
            <permission-mapping match-all="true"/>
        </simple-permission-mapper>
        <simple-permission-mapper name="SimplePermissionMapper" mapping-mode="and">
            <permission-mapping>
                <principal name="John"/>
                <principal name="Joe"/>
                <role name="User"/>
                <role name="Administrator"/>
                <permission class-name="a.b.MyPermission" />
                <permission-set name="my-permissions"/>
            </permission-mapping>
            <permission-mapping>
                <principal name="John Doe"/>
                <permission-set name="john-permissions"/>
            </permission-mapping>
            <permission-mapping>
                <principal name="User"/>
                <permission-set name="user-permissions"/>
            </permission-mapping>
            <permission-mapping match-all="true"/>
        </simple-permission-mapper>
        <constant-permission-mapper name="ConstantPermissionMapperLegacy">
            <permission class-name="a.b.UserPermission"/>
        </constant-permission-mapper>
        <constant-permission-mapper name="ConstantPermissionMapper">
            <permission-set name="user-permissions"/>
        </constant-permission-mapper>
        <concatenating-principal-decoder joiner="@" name="MyX500PrincipalDecoderThree">
            <principal-decoder name="MyCnDecoder"/>
            <principal-decoder name="MyDcDecoder"/>
        </concatenating-principal-decoder>
        <x500-attribute-principal-decoder joiner="," maximum-segments="6" name="MyX500PrincipalDecoder" oid="2.5.4.3"/>
        <x500-attribute-principal-decoder joiner="," maximum-segments="1" name="MyX500PrincipalDecoderTwo" oid="2.5.4.3" required-oids="2.5.4.3 2.5.4.11"
                                          required-attributes="cN" reverse="true"
                                          start-segment="2"/>
        <x500-attribute-principal-decoder maximum-segments="1" name="MyCnDecoder" attribute-name="Cn" start-segment="1"/>
        <x500-attribute-principal-decoder name="MyDcDecoder" oid="0.9.2342.19200300.100.1.25"/>
        <regex-principal-transformer name="NameRewriterXY" pattern="x(.*)" replacement="y$1"/>
        <regex-principal-transformer name="NameRewriterYU" pattern="y(.*)" replacement="u$1"/>
        <regex-principal-transformer name="NameRewriterRealmRemover" pattern="(.*)@.*" replacement="$1"/>
        <simple-regex-realm-mapper name="MyRealmMapper" pattern=".*@(.*)"/>
        <simple-role-decoder attribute="roles" name="MyRoleDecoder"/>
        <add-prefix-role-mapper name="RolePrefixer" prefix="prefix"/>
        <add-suffix-role-mapper name="RoleSuffixer" suffix="suffix"/>
        <aggregate-role-mapper name="MyRoleMapper">
            <role-mapper name="RolePrefixer"/>
            <role-mapper name="RoleSuffixer"/>
        </aggregate-role-mapper>
        <mapped-role-mapper name="MappedRoleMapper" keep-mapped="false" keep-non-mapped="true">
            <role-mapping from="Admin" to="Administrator"/>
            <role-mapping from="foo" to="bar baz"/>
        </mapped-role-mapper>
    </mappers>
    <permission-sets>
        <permission-set name="my-permissions">
            <permission class-name="a.b.MyPermission" />
            <permission class-name="a.b.MyOtherPermission" target-name="../c" action="delete" />
        </permission-set>
        <permission-set name="john-permissions">
            <permission class-name="a.b.JohnPermission" />
        </permission-set>
        <permission-set name="user-permissions">
            <permission class-name="a.b.UserPermission" />
        </permission-set>
    </permission-sets>
    <sasl>
        <sasl-authentication-factory name="SaslAuthenticationDefinition" security-domain="MyDomain" sasl-server-factory="ConfigurableSaslServerFactory">
            <mechanism-configuration>
                <mechanism mechanism-name="PLAIN" pre-realm-principal-transformer="PreRealmNameRewriter" post-realm-principal-transformer="PostRealmNameRewriter"
                           final-principal-transformer="FinalNameRewriter" realm-mapper="RegexMapper">
                    <mechanism-realm realm-name="Test Realm" pre-realm-principal-transformer="PreRealmNameRewriter_II"
                                     post-realm-principal-transformer="PostRealmNameRewriter_II" final-principal-transformer="FinalNameRewriter_II"
                                     realm-mapper="RegexMapper_II"/>
                </mechanism>
            </mechanism-configuration>
        </sasl-authentication-factory>
        <sasl-authentication-factory name="KerberosHttpMgmtSaslTestCase" sasl-server-factory="KerberosHttpMgmtSaslTestCase"
                                     security-domain="KerberosHttpMgmtSaslTestCase">
            <mechanism-configuration>
                <mechanism mechanism-name="GSSAPI" credential-security-factory="KerberosHttpMgmtSaslTestCase">
                    <mechanism-realm realm-name="KerberosHttpMgmtSaslTestCase" />
                </mechanism>
                <mechanism mechanism-name="GS2-KRB5" credential-security-factory="KerberosHttpMgmtSaslTestCase">
                    <mechanism-realm realm-name="KerberosHttpMgmtSaslTestCase" />
                </mechanism>
                <mechanism mechanism-name="GS2-KRB5-PLUS" credential-security-factory="KerberosHttpMgmtSaslTestCase">
                    <mechanism-realm realm-name="KerberosHttpMgmtSaslTestCase" />
                </mechanism>
            </mechanism-configuration>
        </sasl-authentication-factory>
        <aggregate-sasl-server-factory name="AggregateSaslFactory">
            <sasl-server-factory name="ProviderSaslFactory"/>
            <sasl-server-factory name="ServiceSaslFactory"/>
        </aggregate-sasl-server-factory>
        <configurable-sasl-server-factory name="ConfigurableSaslServerFactory" server-name="server" protocol="test-protocol" sasl-server-factory="MechFiltering">
            <properties>
                <property name="a" value="b"/>
                <property name="c" value="d"/>
            </properties>
            <filters>
                <filter enabling="false" pattern="x"/>
                <filter enabling="false" predefined="HASH_MD5"/>
            </filters>
        </configurable-sasl-server-factory>
        <mechanism-provider-filtering-sasl-server-factory name="MechFiltering" sasl-server-factory="AggregateSaslFactory" enabling="false">
            <filters>
                <filter mechanism-name="Digest" provider-name="Sun" provider-version="1.5" version-comparison="greater-than"/>
                <filter mechanism-name="Scram" provider-name="Sun" provider-version="1.5" version-comparison="greater-than"/>
            </filters>
        </mechanism-provider-filtering-sasl-server-factory>
        <provider-sasl-server-factory name="ProviderSaslFactory" providers="TestProviderLoader"/>
        <service-loader-sasl-server-factory name="ServiceSaslFactory" module="a.b.c"/>
    </sasl>
    <tls>
        <key-stores>
            <key-store name="PKCS_11">
                <credential-reference clear-text="password"/>
                <implementation type="PKCS#11" provider-name="SunPKCS#11"/>
            </key-store>
            <key-store name="jks_store" alias-filter="one,two,three">
                <credential-reference clear-text="password"/>
                <implementation type="jks"/>
                <file relative-to="jboss.server.config.dir" path="keystore.jks" required="true"/>
            </key-store>
            <key-store name="jceks_store">
                <credential-reference clear-text="password"/>
                <implementation type="jceks"/>
                <file relative-to="jboss.server.config.dir" path="keystore.jceks"/>
            </key-store>
            <key-store name="Custom_PKCS_11">
                <credential-reference clear-text="password"/>
                <implementation type="PKCS#11" provider-name="SunPKCS#11" providers="custom-loader"/>
            </key-store>
            <key-store name="accounts.keystore">
                <credential-reference clear-text="elytron"/>
                <implementation type="JKS"/>
                <file path="accounts.keystore.jks" relative-to="jboss.server.config.dir"/>
            </key-store>
            <filtering-key-store name="FilteringKeyStore" key-store="Custom_PKCS_11" alias-filter="NONE:+firefly"/>
        </key-stores>
        <key-managers>
            <key-manager name="serverKey" algorithm="SunX509" key-store="jks_store">
                <credential-reference clear-text="password"/>
            </key-manager>
            <key-manager name="serverKey2" algorithm="SunX509" key-store="jks_store" providers="custom-loader" provider-name="first">
                <credential-reference store="credstore1" alias="password-alias" type="PasswordCredential"/>
            </key-manager>
            <key-manager name="clientKey" algorithm="SunX509" key-store="jks_store">
                <credential-reference store="credstore1" alias="password-alias" type="PasswordCredential"/>
            </key-manager>
        </key-managers>
        <trust-managers>
            <trust-manager name="serverTrust" algorithm="SunX509" key-store="jks_store"/>
            <trust-manager name="serverTrust2" algorithm="SunX509" key-store="jks_store" providers="custom-loader" provider-name="first"/>
            <trust-manager name="trust-with-crl" algorithm="SunX509" key-store="jks_store">
                <certificate-revocation-list path="crl.pem" relative-to="jboss.server.config.dir" maximum-cert-path="2"/>
            </trust-manager>
            <trust-manager name="trust-with-crl-dp" algorithm="SunX509" key-store="jks_store">
                <certificate-revocation-list/>
            </trust-manager>
        </trust-managers>
        <server-ssl-contexts>
            <server-ssl-context name="server" protocols="TLSv1.2" want-client-auth="true" need-client-auth="true" authentication-optional="true"
                                use-cipher-suites-order="false" maximum-session-cache-size="10"
                                session-timeout="120" wrap="false" key-manager="serverKey" trust-manager="serverTrust" pre-realm-principal-transformer="a"
                                post-realm-principal-transformer="b" final-principal-transformer="c" realm-mapper="d" providers="custom-loader" provider-name="first"/>
        </server-ssl-contexts>
        <client-ssl-contexts>
            <client-ssl-context name="client" protocols="TLSv1.3 TLSv1.2" key-manager="clientKey" trust-manager="serverTrust" providers="custom-loader"
                                provider-name="first"/>
        </client-ssl-contexts>
        <certificate-authority-accounts>
            <certificate-authority-account name="MyCA" certificate-authority="LetsEncrypt">
                <account-key key-store="accounts.keystore" alias="server">
                    <credential-reference clear-text="elytron"/>
                </account-key>
            </certificate-authority-account>
        </certificate-authority-accounts>
    </tls>
    <credential-stores>
        <credential-store name="test1" relative-to="jboss.server.data.dir" location="test1.store" create="true">
            <implementation-properties>
                <property name="keyStoreType" value="JCEKS"/>
                <property name="keyAlias" value="adminKey"/>
            </implementation-properties>
            <credential-reference clear-text="secret2"/>
        </credential-store>
        <credential-store name="test2" relative-to="jboss.server.data.dir" modifiable="true">
            <credential-reference store="test1" alias="to_open_test2"/>
        </credential-store>
    </credential-stores>
</subsystem>
