<subsystem xmlns="urn:wildfly:elytron:8.0" default-ssl-context="ClientContext">
    <jaspi>
        <jaspi-configuration name="minimal">
            <server-auth-modules>
                <server-auth-module class-name="org.wildfly.Test3" />
            </server-auth-modules>
        </jaspi-configuration>
    </jaspi>
    <audit-logging>
        <!-- autoflush was added in 5.0 - should be rejected when different from synchronized -->
        <file-audit-log name="audit1" path="audit.log" synchronized="true" autoflush="false"/>
        <file-audit-log name="audit2" path="audit.log" synchronized="false" autoflush="true"/>
        <periodic-rotating-file-audit-log name="audit3" path="target/audit.log" format="JSON" suffix="y-M-d" synchronized="true" autoflush="false" />
        <periodic-rotating-file-audit-log name="audit4" path="target/audit.log" format="JSON" suffix="y-M-d" synchronized="false" autoflush="true" />
        <size-rotating-file-audit-log name="audit5" path="target/audit.log" format="JSON" max-backup-index="5" rotate-on-boot="true" rotate-size="5" suffix="y-M-d" synchronized="true" autoflush="false" />
        <size-rotating-file-audit-log name="audit6" path="target/audit.log" format="JSON" max-backup-index="5" rotate-on-boot="true" rotate-size="5" suffix="y-M-d" synchronized="false" autoflush="true" />
    </audit-logging>
    <security-realms>
        <jdbc-realm name="JdbcBcryptHashHex">
            <principal-query sql="SELECT role, password, salt, ic FROM User WHERE username = ?" data-source="ExampleDS">
                <bcrypt-mapper password-index="2" salt-index="3" iteration-count-index="4" hash-encoding="hex"/>
            </principal-query>
        </jdbc-realm>
        <jdbc-realm name="JdbcBcryptSaltHex">
            <principal-query sql="SELECT role, password, salt, ic FROM User WHERE username = ?" data-source="ExampleDS">
                <bcrypt-mapper password-index="2" salt-index="3" iteration-count-index="4" salt-encoding="hex"/>
            </principal-query>
        </jdbc-realm>
        <jdbc-realm name="JdbcSaltedSimpleDigestHashHex">
            <principal-query sql="SELECT role, password, salt, ic FROM User WHERE username = ?" data-source="ExampleDS">
                <salted-simple-digest-mapper password-index="2" salt-index="3" algorithm="password-salt-digest-sha-1" hash-encoding="hex"/>
            </principal-query>
        </jdbc-realm>
        <jdbc-realm name="JdbcSaltedSimpleDigestSaltHex">
            <principal-query sql="SELECT role, password, salt, ic FROM User WHERE username = ?" data-source="ExampleDS">
                <salted-simple-digest-mapper password-index="2" salt-index="3" algorithm="password-salt-digest-sha-1" salt-encoding="hex"/>
            </principal-query>
        </jdbc-realm>
        <jdbc-realm name="JdbcSimpleDigestHashHex">
            <principal-query sql="SELECT role, password, salt, ic FROM User WHERE username = ?" data-source="ExampleDS">
                <simple-digest-mapper password-index="2" hash-encoding="hex" algorithm="simple-digest-sha-1"/>
            </principal-query>
        </jdbc-realm>
        <jdbc-realm name="JdbcScramHashHex">
            <principal-query sql="SELECT role, password, salt, ic FROM User WHERE username = ?" data-source="ExampleDS">
                <scram-mapper password-index="2" salt-index="3" iteration-count-index="4" hash-encoding="hex" algorithm="scram-sha-1"/>
            </principal-query>
        </jdbc-realm>
        <jdbc-realm name="JdbcScramSaltHex">
            <principal-query sql="SELECT role, password, salt, ic FROM User WHERE username = ?" data-source="ExampleDS">
                <scram-mapper password-index="2" salt-index="3" iteration-count-index="4" salt-encoding="hex" algorithm="scram-sha-1"/>
            </principal-query>
        </jdbc-realm>
        <jdbc-realm name="JdbcModularCrypt">
            <principal-query sql="SELECT role, password, salt, ic FROM User WHERE username = ?" data-source="ExampleDS">
                <modular-crypt-mapper password-index="2"/>
            </principal-query>
        </jdbc-realm>
        <token-realm name="SslTokenRealm">
            <jwt host-name-verification-policy="ANY" client-ssl-context="ClientContext"/>
        </token-realm>
        <token-realm name="KeyMapTokenRealm">
            <jwt>
                <key kid="1" public-key="-----BEGIN PUBLIC KEY-----MIGeMA0GCSqGSIb3DQEBAQUAA4GMADCBiAKBgF1mQenACcf3tWRJ8nugSIXXdlgaAh3xf6K1ak8r4fI7vigfzYa/+OfvJeKgWL/fO1PTkYAqyDfxi+k3AORQRE3I0zqQoZBhtm99ZPluZGRU9+COLlbIK3Uac0K/t1dEjo9Cb2EMHyHBaaX3mwmS296zHyDFVDEm7Sw1G98TLnz9AgMBAAE=-----END PUBLIC KEY-----"/>
            </jwt>
        </token-realm>
    </security-realms>
    <tls>
        <key-stores>
            <key-store name="accounts.keystore">
                <credential-reference clear-text="elytron"/>
                <implementation type="JKS"/>
                <file path="accounts.keystore.jks" relative-to="jboss.server.config.dir"/>
            </key-store>
            <key-store name="automatic.keystore">
                <credential-reference clear-text="elytron"/>
                <implementation/>
                <file path="accounts.keystore.jks" relative-to="jboss.server.config.dir"/>
            </key-store>
        </key-stores>
        <key-managers>
            <key-manager name="key1" key-store="accounts.keystore">
                <credential-reference clear-text="password"/>
            </key-manager>
        </key-managers>
        <server-ssl-contexts>
            <server-ssl-context name="ctx" key-manager="key1"/>
        </server-ssl-contexts>
        <server-ssl-sni-contexts>
            <server-ssl-sni-context name="test" default-ssl-context="ctx"></server-ssl-sni-context>
        </server-ssl-sni-contexts>
        <client-ssl-contexts>
            <client-ssl-context name="ClientContext"/>
        </client-ssl-contexts>
        <certificate-authorities>
            <certificate-authority name="testCA" url="http://www.test.com"/>
        </certificate-authorities>
        <certificate-authority-accounts>
            <certificate-authority-account name="validCAA">
                <account-key key-store="accounts.keystore" alias="alias">
                    <credential-reference clear-text="elytron"/>
                </account-key>
            </certificate-authority-account>
            <certificate-authority-account name="invalidCAA" certificate-authority="testCA">
                <account-key key-store="accounts.keystore" alias="alias">
                    <credential-reference clear-text="elytron"/>
                </account-key>
            </certificate-authority-account>
        </certificate-authority-accounts>
    </tls>
</subsystem>
