<!--
  ~ JBoss, Home of Professional Open Source
  ~ Copyright 2020, Red Hat, Inc., and individual contributors as indicated
  ~ by the @authors tag.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!-- for needs of DomainTestCase -->
<subsystem xmlns="urn:wildfly:elytron:18.0" register-jaspi-factory="${exp.jaspi:false}" default-ssl-context="client" disallowed-providers="${exp.providers:test}">
    <providers>
        <provider-loader name="openssl" module="org.wildfly.openssl">
            <configuration>
                <property name="prop" value="${exp.value:val}"/>
            </configuration>
        </provider-loader>
        <provider-loader name="elytron" module="org.wildfly.security.elytron" argument="${exp.argument:arg}"/>
    </providers>
    <security-domains>
        <security-domain name="MyDomain" default-realm="FileRealm" realm-mapper="MyRealmMapper" permission-mapper="MyPermissionMapper"
                         pre-realm-principal-transformer="NameRewriterXY" post-realm-principal-transformer="NameRewriterYU" trusted-security-domains="AnotherDomain">
            <realm name="FileRealm" role-decoder="MyRoleDecoder" role-mapper="MyRoleMapper"/>
            <realm name="PropRealm" principal-transformer="NameRewriterRealmRemover"/>
        </security-domain>
        <security-domain name="X500Domain" default-realm="FileRealm" principal-decoder="MyX500PrincipalDecoder">
            <realm name="FileRealm"/>
        </security-domain>
        <security-domain name="X500DomainTwo" default-realm="FileRealm" principal-decoder="MyX500PrincipalDecoderTwo">
            <realm name="FileRealm"/>
        </security-domain>
        <security-domain name="X500DomainThree" default-realm="FileRealm" principal-decoder="MyX500PrincipalDecoderThree">
            <realm name="FileRealm"/>
        </security-domain>
        <security-domain name="X500DomainFour" default-realm="FileRealm" principal-decoder="MyX500PrincipalDecoderThree" evidence-decoder="aggregateEvidenceDecoder">
            <realm name="FileRealm"/>
        </security-domain>
        <security-domain name="AnotherDomain" default-realm="PropRealm" permission-mapper="LoginPermissionMapper" trusted-security-domains="MyDomain">
            <realm name="PropRealm"/>
        </security-domain>
        <security-domain name="AggregateRealm" default-realm="PropRealm" role-decoder="aggregateRoleDecoder">
            <realm name="PropRealm"/>
        </security-domain>
        <security-domain name="TestDomain" default-realm="PropRealm" permission-mapper="LoginPermissionMapper" trusted-virtual-security-domains="VirtualDomain">
            <realm name="PropRealm"/>
        </security-domain>
        <virtual-security-domain name="VirtualDomain" outflow-security-domains="MyDomain" outflow-anonymous="${exp.anonymous:true}" />
        <virtual-security-domain name="AnotherVirtualDomain" outflow-security-domains="MyDomain" outflow-anonymous="${exp.anonymous:true}" auth-method="OIDC"/>
    </security-domains>
    <security-realms>
        <aggregate-realm name="AggregateOne" authentication-realm="PropRealm" authorization-realm="FileRealm" principal-transformer="${exp.transformer:NameRewriterXY}"/>
        <aggregate-realm name="AggregateTwo" authentication-realm="JdbcRealm" authorization-realms="AggregateOne FileRealm" />
        <identity-realm name="local" identity="${exp.identity:$local}" attribute-name="${exp.name:groups}" attribute-values="${exp.values:SuperUser}" />
        <jdbc-realm name="NewJdbcScramSha384">
            <principal-query sql="SELECT" data-source="ExampleDS">
                <scram-mapper algorithm="scram-sha-384" password-index="1" salt-index="2" iteration-count-index="10000"/>
            </principal-query>
        </jdbc-realm>
        <jdbc-realm name="NewJdbcScramSha512">
            <principal-query sql="SELECT" data-source="ExampleDS">
                <scram-mapper algorithm="scram-sha-512" password-index="1" salt-index="2" iteration-count-index="10000"/>
            </principal-query>
        </jdbc-realm>
        <jdbc-realm name="JdbcRealm">
            <principal-query sql="SELECT role, password, salt, ic FROM User WHERE username = ?" data-source="ExampleDS">
                <attribute-mapping>
                    <attribute index="1" to="role"/>
                </attribute-mapping>
                <clear-password-mapper password-index="${exp.password:2}"/>
                <bcrypt-mapper password-index="${exp.password:2}" salt-index="${exp.salt:3}" iteration-count-index="${exp.iteration:4}" hash-encoding="${exp.encoding:hex}" salt-encoding="${exp.encoding:hex}"/>
                <salted-simple-digest-mapper password-index="${exp.password:2}" salt-index="${exp.salt:3}" algorithm="${exp.algo:password-salt-digest-sha-1}" hash-encoding="${exp.encoding:hex}" salt-encoding="${exp.encoding:hex}"/>
                <simple-digest-mapper password-index="${exp.password:2}" hash-encoding="${exp.encoding:hex}" algorithm="simple-digest-sha-1"/>
                <scram-mapper password-index="${exp.password:2}" salt-index="${exp.salt:3}" iteration-count-index="${exp.iteration:4}" hash-encoding="${exp.encoding:hex}" salt-encoding="${exp.encoding:hex}" algorithm="${exp.algorithm:scram-sha-1}"/>
                <modular-crypt-mapper password-index="${exp.password:2}"/>
            </principal-query>
        </jdbc-realm>
        <properties-realm name="PropRealm" groups-attribute="${exp.groups:groups}">
            <users-properties path="users-hashed.properties" relative-to="jboss.server.config.dir" digest-realm-name="${exp.digest.realm:FileRealm}" plain-text="${exp.plain:false}"/>
        </properties-realm>
        <properties-realm name="NonDomainRealm">
            <users-properties path="users-hashed.properties" relative-to="jboss.server.config.dir"/>
        </properties-realm>
        <ldap-realm name="LdapRealmWithAttributeMapping" dir-context="dircontext1" allow-blank-password="${exp.blank:true}" direct-verification="${exp.verification:false}">
            <identity-mapping rdn-identifier="${exp.rdn:uid}" use-recursive-search="${exp.recursive:true}" search-base-dn="${exp.search:dc=elytron,dc=wildfly,dc=org}" filter-name="${exp.filter:(rdn_identifier={0})}" iterator-filter="${exp.filter:(uid=*)}" new-identity-parent-dn="${exp.parent:dc=elytron,dc=wildfly,dc=org}">
                <attribute-mapping>
                    <attribute filter-base-dn="${exp.base:ou=Finance,dc=elytron,dc=wildfly,dc=org}" filter="${exp.filter:(&amp;(objectClass=groupOfNames)(member={0}))}" from="${exp.from:CN}" extract-rdn="OU" to="${exp.to:businessUnit}"
                               reference="${exp.reference:ref}" search-recursive="${exp.recursive:true}" role-recursion="${exp.role:0}" role-recursion-name="${exp.name:cn}"/>
                    <attribute filter-base-dn="ou=Sales,dc=elytron,dc=wildfly,dc=org" filter="(&amp;(objectClass=groupOfNames)(member={0}))" from="CN" extract-rdn="${exp.extract:OU}" to="businessUnit"/>
                </attribute-mapping>
                <new-identity-attributes>
                    <attribute name="${exp.name:sn}" value="${exp.value:BlankSurname}"/>
                </new-identity-attributes>
                <user-password-mapper from="${exp.from:userPassword}" writable="${exp.writable:true}" verifiable="${exp.verifiable:true}" />
                <otp-credential-mapper algorithm-from="${exp.alg:otpAlgorithm}" hash-from="${exp.hash:otpHash}" seed-from="${exp.seed:otpSeed}" sequence-from="${exp.sequence:otpSequenc}e"/>
                <x509-credential-mapper digest-from="${exp.digest:x509digest}" certificate-from="${exp.certificate:usercertificate}" subject-dn-from="${exp.subject:x509subject}" serial-number-from="${exp.serial:x509serialNumber}" digest-algorithm="${exp.algo:SHA-1}" />
            </identity-mapping>
        </ldap-realm>
        <filesystem-realm name="FileRealm" levels="${exp.levels:2}" encoded="${exp.encoded:false}">
            <file path="filesystem-realm" relative-to="jboss.server.config.dir"/>
        </filesystem-realm>
        <filesystem-realm name="FileSystemRealmEncrypted" levels="${exp.levels:2}" encoded="${exp.encoded:false}" credential-store="${exp.credstore:secretkeycredstore}" secret-key="${exp.secretkey:key}">
            <file path="filesystem-realm-encrypted" relative-to="jboss.server.config.dir"/>
        </filesystem-realm>
        <token-realm name="JwtRealmOne" principal-claim="${exp.principal:sub}" >
            <jwt issuer="${exp.issuer:some-issuer-a}" audience="${exp.audience:some-audience-a}" public-key="${exp.key:MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCrVrCuTtArbgaZzL1hvh0xtL5mc7o0NqP}"
                 certificate="${exp.cert:cert}">
                <key kid="kid" public-key="${exp.public:public}"/>
            </jwt>
        </token-realm>
        <token-realm name="OAuth2Realm" principal-claim="sub">
            <oauth2-introspection client-id="${exp.id:a}" client-secret="${exp.secret:b}" introspection-url="${exp.url:https://localhost/token/introspect}" host-name-verification-policy="${exp.host:host}"/>
        </token-realm>
        <distributed-realm name="DistributedRealm" realms="FileRealm PropRealm" ignore-unavailable-realms="${exp.ignore:true}" emit-events="${exp.emit:true}"/>
        <failover-realm name="FailoverRealm" delegate-realm="JdbcRealm" failover-realm="PropRealm" emit-events="${exp.emit:true}"/>
    </security-realms>
    <credential-security-factories>
        <custom-credential-security-factory name="CustomFactory" module="a.b.c" class-name="org.wildfly.security.ElytronFactory">
            <configuration>
                <property name="a" value="b"/>
                <property name="c" value="d"/>
            </configuration>
        </custom-credential-security-factory>

        <kerberos-security-factory name="KerberosFactory"
                                   principal="${exp.principal:bob@Elytron.org}"
                                   path="bob.keytab"
                                   relative-to="server.config.dir"
                                   minimum-remaining-lifetime="${exp.life:10}"
                                   request-lifetime="${exp.request:120}"
                                   server="${exp.server:false}"
                                   obtain-kerberos-ticket="${exp.ticket:true}"
                                   debug="${exp.debug:true}"
                                   wrap-gss-credential="${exp.wrap:true}"
                                   required="${exp.required:true}"
                                   mechanism-names="${exp.test:KRB5} ${exp.legacy:KRB5LEGACY}"
                                   mechanism-oids="${exp.oid:1.2.840.113554.1.2.2} ${exp.oid:1.3.6.1.5.5.2}"
                                   fail-cache="${exp.fail:100}">
            <option name="a" value="b"/>
            <option name="c" value="d"/>
        </kerberos-security-factory>
        <kerberos-security-factory name="OptionLessKerberosFactory"
                                   principal="bob@Elytron.org"
                                   path="bob.keytab"
                                   relative-to="server.config.dir"
                                   minimum-remaining-lifetime="10"
                                   request-lifetime="120"
                                   server="false"
                                   obtain-kerberos-ticket="true"
                                   debug="true"
                                   wrap-gss-credential="true"
                                   mechanism-oids="1.2.840.113554.1.2.2 1.3.6.1.5.5.2"/>
    </credential-security-factories>
    <mappers>
        <custom-permission-mapper class-name="org.wildfly.extension.elytron.DomainTestCase$MyPermissionMapper" name="MyPermissionMapper" module="a.b.c">
            <configuration>
                <property name="test" value="${exp.value:value}"/>
            </configuration>
        </custom-permission-mapper>
        <custom-permission-mapper class-name="org.wildfly.extension.elytron.DomainTestCase$LoginPermissionMapper" name="LoginPermissionMapper" module="a.b.c"/>
        <simple-permission-mapper name="SimplePermissionMapperLegacy" mapping-mode="${exp.mapping:and}">
            <permission-mapping>
                <principal name="John"/>
                <principal name="Joe"/>
                <role name="User"/>
                <role name="Administrator"/>
                <permission class-name="a.b.MyPermission"/>
                <permission class-name="a.b.MyOtherPermission" target-name="${exp.target:../c}" action="${exp.action:delete}"/>
            </permission-mapping>
            <permission-mapping>
                <principal name="John Doe"/>
                <permission class-name="a.b.JohnPermission"/>
            </permission-mapping>
            <permission-mapping>
                <principal name="User"/>
                <permission class-name="a.b.UserPermission"/>
            </permission-mapping>
            <permission-mapping match-all="true"/>
        </simple-permission-mapper>
        <simple-permission-mapper name="SimplePermissionMapper" mapping-mode="and">
            <permission-mapping>
                <principal name="John"/>
                <principal name="Joe"/>
                <role name="User"/>
                <role name="Administrator"/>
                <permission class-name="a.b.MyPermission" />
                <permission-set name="my-permissions"/>
            </permission-mapping>
            <permission-mapping>
                <principal name="John Doe"/>
                <permission-set name="john-permissions"/>
            </permission-mapping>
            <permission-mapping>
                <principal name="User"/>
                <permission-set name="user-permissions"/>
            </permission-mapping>
            <permission-mapping match-all="true"/>
        </simple-permission-mapper>
        <constant-permission-mapper name="ConstantPermissionMapperLegacy">
            <permission class-name="a.b.UserPermission"/>
        </constant-permission-mapper>
        <constant-permission-mapper name="ConstantPermissionMapper">
            <permission-set name="user-permissions"/>
        </constant-permission-mapper>
        <concatenating-principal-decoder joiner="@" name="MyX500PrincipalDecoderThree">
            <principal-decoder name="MyCnDecoder"/>
            <principal-decoder name="MyDcDecoder"/>
        </concatenating-principal-decoder>
        <constant-principal-decoder name="ConstantDecoder" constant="${exp.constant:test}"/>
        <x500-attribute-principal-decoder joiner="," maximum-segments="6" name="MyX500PrincipalDecoder" oid="2.5.4.3"/>
        <x500-attribute-principal-decoder joiner="${exp.joiner:,}" maximum-segments="${exp.map:1}" name="MyX500PrincipalDecoderTwo" oid="${exp.oid:2.5.4.3}" required-oids="${exp.required.oids:2.5.4.3} ${exp.oids:2.5.4.11}"
                                          required-attributes="cN" reverse="${exp.reverse:true}"
                                          start-segment="${exp.start:2}"
                                          convert="${exp.convert:true}"/>
        <x500-attribute-principal-decoder maximum-segments="1" name="MyCnDecoder" attribute-name="${exp.attribute:Cn}" start-segment="1"/>
        <x500-attribute-principal-decoder name="MyDcDecoder" oid="0.9.2342.19200300.100.1.25"/>
        <constant-principal-transformer name="ConstantNameRewriter" constant="${exp.constant:test}"/>
        <regex-principal-transformer name="NameRewriterXY" pattern="${exp.pattern:x(.*)}" replacement="${exp.replacement:y$1}" replace-all="${exp.replace:false}"/>
        <regex-principal-transformer name="NameRewriterYU" pattern="y(.*)" replacement="u$1"/>
        <regex-principal-transformer name="NameRewriterRealmRemover" pattern="(.*)@.*" replacement="$1"/>
        <regex-validating-principal-transformer name="RegexValidateNameRewriter" pattern="x(.*)" match="${exp.match:true}"/>
        <simple-regex-realm-mapper name="MyRealmMapper" pattern=".*@(.*)"/>
        <mapped-regex-realm-mapper name="MappedRealmMapper" pattern="${exp.pattern:.*@(.*)}">
            <realm-mapping from="test" to="${exp.to:test}"/>
        </mapped-regex-realm-mapper>
        <simple-role-decoder attribute="roles" name="MyRoleDecoder"/>
        <add-prefix-role-mapper name="RolePrefixer" prefix="${exp.prefix:prefix}"/>
        <add-suffix-role-mapper name="RoleSuffixer" suffix="${exp.suffix:suffix}"/>
        <aggregate-role-mapper name="MyRoleMapper">
            <role-mapper name="RolePrefixer"/>
            <role-mapper name="RoleSuffixer"/>
        </aggregate-role-mapper>
        <constant-role-mapper name="ConstantRoleMapper">
            <role name="${exp.role:role}"/>
        </constant-role-mapper>
        <logical-role-mapper name="LogicalRoleMapper" logical-operation="${exp.logical:and}" />
        <mapped-role-mapper name="MappedRoleMapper" keep-mapped="${exp.mapped:false}" keep-non-mapped="${exp.non.mapped:true}">
            <role-mapping from="Admin" to="Administrator"/>
            <role-mapping from="foo" to="bar baz"/>
        </mapped-role-mapper>
        <x500-subject-evidence-decoder name="subjectDecoder" />
        <x509-subject-alt-name-evidence-decoder name="rfc822Decoder" alt-name-type="${exp.alt.name:rfc822Name}" segment="${exp.segment:1}" />
        <custom-evidence-decoder name="customEvidenceDecoder" class-name="org.wildfly.elytron.CustomEvidenceDecoder" module="l.m" />
        <aggregate-evidence-decoder name="aggregateEvidenceDecoder">
            <evidence-decoder name="rfc822Decoder"/>
            <evidence-decoder name="subjectDecoder"/>
        </aggregate-evidence-decoder>
        <source-address-role-decoder name="ipRoleDecoder" source-address="${exp.source:10.12.14.16}" roles="${exp.admin:admin} ${exp.user:user}"/>
        <source-address-role-decoder name="regexRoleDecoder" pattern="${exp.pattern:10\.12\.14\.\d+$}" roles="employee"/>
        <aggregate-role-decoder name="aggregateRoleDecoder">
            <role-decoder name="ipRoleDecoder"/>
            <role-decoder name="regexRoleDecoder"/>
        </aggregate-role-decoder>
        <regex-role-mapper name="RegexRoleMapper" pattern="${exp.pattern:*(x.)}" replacement="${exp.replacement:false}" replace-all="${exp.replace.all:false}"/>
        <case-principal-transformer name="CaseNameRewriter" upper-case="${exp.upper:true}" />
    </mappers>
    <permission-sets>
        <permission-set name="my-permissions">
            <permission class-name="a.b.MyPermission" />
            <permission class-name="a.b.MyOtherPermission" target-name="../c" action="delete" />
        </permission-set>
        <permission-set name="john-permissions">
            <permission class-name="a.b.JohnPermission" />
        </permission-set>
        <permission-set name="user-permissions">
            <permission class-name="a.b.UserPermission" />
        </permission-set>
    </permission-sets>
    <sasl>
        <sasl-authentication-factory name="SaslAuthenticationDefinition" security-domain="MyDomain" sasl-server-factory="ConfigurableSaslServerFactory">
            <mechanism-configuration>
                <mechanism mechanism-name="${exp.mech.name:PLAIN}" pre-realm-principal-transformer="PreRealmNameRewriter" post-realm-principal-transformer="PostRealmNameRewriter"
                           final-principal-transformer="FinalNameRewriter" realm-mapper="RegexMapper" host-name="${exp.host:host}" protocol="${exp.protocol:protocol}">
                    <mechanism-realm realm-name="${exp.realm.name:Test Realm}" pre-realm-principal-transformer="PreRealmNameRewriter_II"
                                     post-realm-principal-transformer="PostRealmNameRewriter_II" final-principal-transformer="FinalNameRewriter_II"
                                     realm-mapper="RegexMapper_II"/>
                </mechanism>
            </mechanism-configuration>
        </sasl-authentication-factory>
        <sasl-authentication-factory name="KerberosHttpMgmtSaslTestCase" sasl-server-factory="KerberosHttpMgmtSaslTestCase"
                                     security-domain="KerberosHttpMgmtSaslTestCase">
            <mechanism-configuration>
                <mechanism mechanism-name="GSSAPI" credential-security-factory="KerberosHttpMgmtSaslTestCase">
                    <mechanism-realm realm-name="KerberosHttpMgmtSaslTestCase" />
                </mechanism>
                <mechanism mechanism-name="GS2-KRB5" credential-security-factory="KerberosHttpMgmtSaslTestCase">
                    <mechanism-realm realm-name="KerberosHttpMgmtSaslTestCase" />
                </mechanism>
                <mechanism mechanism-name="GS2-KRB5-PLUS" credential-security-factory="KerberosHttpMgmtSaslTestCase">
                    <mechanism-realm realm-name="KerberosHttpMgmtSaslTestCase" />
                </mechanism>
            </mechanism-configuration>
        </sasl-authentication-factory>
        <aggregate-sasl-server-factory name="AggregateSaslFactory">
            <sasl-server-factory name="ProviderSaslFactory"/>
            <sasl-server-factory name="ServiceSaslFactory"/>
        </aggregate-sasl-server-factory>
        <configurable-sasl-server-factory name="ConfigurableSaslServerFactory" server-name="server" protocol="test-protocol" sasl-server-factory="MechFiltering">
            <properties>
                <property name="a" value="b"/>
                <property name="c" value="d"/>
            </properties>
            <filters>
                <filter enabling="false" pattern="x"/>
                <filter enabling="false" predefined="HASH_MD5"/>
            </filters>
        </configurable-sasl-server-factory>
        <mechanism-provider-filtering-sasl-server-factory name="MechFiltering" sasl-server-factory="AggregateSaslFactory" enabling="false">
            <filters>
                <filter mechanism-name="Digest" provider-name="Sun" provider-version="1.5" version-comparison="greater-than"/>
                <filter mechanism-name="Scram" provider-name="Sun" provider-version="1.5" version-comparison="greater-than"/>
            </filters>
        </mechanism-provider-filtering-sasl-server-factory>
        <provider-sasl-server-factory name="ProviderSaslFactory" providers="TestProviderLoader"/>
        <service-loader-sasl-server-factory name="ServiceSaslFactory" module="a.b.c"/>
    </sasl>
    <tls>
        <key-stores>
            <key-store name="PKCS_11">
                <credential-reference clear-text="password"/>
                <implementation type="PKCS#11" provider-name="SunPKCS#11"/>
            </key-store>
            <key-store name="jks_store" alias-filter="${exp.alias.filter:one,two,three}">
                <credential-reference clear-text="password"/>
                <implementation type="${exp.type:jks}" provider-name="${exp.provider:SunJSSE}"/>
                <file relative-to="jboss.server.config.dir" path="keystore.jks" required="${exp.required:true}"/>
            </key-store>
            <key-store name="jceks_store">
                <credential-reference clear-text="password"/>
                <implementation type="jceks"/>
                <file relative-to="jboss.server.config.dir" path="keystore.jceks"/>
            </key-store>
            <key-store name="Custom_PKCS_11">
                <credential-reference clear-text="password"/>
                <implementation type="PKCS#11" provider-name="SunPKCS#11" providers="custom-loader"/>
            </key-store>
            <key-store name="accounts.keystore">
                <credential-reference clear-text="elytron"/>
                <implementation type="JKS"/>
                <file path="accounts.keystore.jks" relative-to="jboss.server.config.dir"/>
            </key-store>
            <key-store name="test.keystore">
                <credential-reference clear-text="elytron"/>
                <implementation type="PKCS12"/>
                <file path="test.keystore" relative-to="jboss.server.config.dir"/>
            </key-store>
            <ldap-key-store name="LdapKeyStore" dir-context="DirContextSsl" >
                <new-item-template new-item-path="${exp.path:ou=keystore,dc=elytron,dc=wildfly,dc=org}" new-item-rdn="${exp.item:cn}">
                    <attribute name="${exp.name:objectClass}" value="${exp.value:top} ${exp.value2:inetOrgPerson}"/>
                    <attribute name="sn" value="NewKeyStoreItem"/>
                </new-item-template>
                <search path="${exp.path:dc=elytron,dc=wildfly,dc=org}" recursive="${exp.recursive:true}" time-limit="${exp.time:1000}" filter-alias="${exp.filter:(&amp;(objectClass=inetOrgPerson)(sn={0}))}"
                        filter-certificate="${exp.filter:(&amp;(objectClass=inetOrgPerson)(usercertificate={0}))}" filter-iterate="${exp.iterate:(sn=serenity*)}"/>
                <attribute-mapping alias-attribute="${exp.alias:sn}" certificate-attribute="${exp.certificate:usercertificate}" certificate-chain-attribute="${exp.chain:userSMIMECertificate}" certificate-chain-encoding="${exp.encoding:PKCS7}" certificate-type="${exp.type:X.509}" key-attribute="${exp.key:userPKCS12}"
                                   key-type="${exp.type:PKCS12}"/>
            </ldap-key-store>
            <filtering-key-store name="FilteringKeyStore" key-store="Custom_PKCS_11" alias-filter="${exp.alias.filter:NONE:+firefly}"/>
        </key-stores>
        <key-managers>
            <key-manager name="serverKey" algorithm="SunX509" key-store="jks_store">
                <credential-reference clear-text="password"/>
            </key-manager>
            <key-manager name="serverKey2" algorithm="${exp.algo:SunX509}" key-store="jks_store" providers="custom-loader" provider-name="first" alias-filter="${exp.alias:one,two,three}" generate-self-signed-certificate-host="${exp.generate:localhost}">
                <credential-reference store="credstore1" alias="password-alias" type="PasswordCredential"/>
            </key-manager>
            <key-manager name="clientKey" algorithm="SunX509" key-store="jks_store">
                <credential-reference store="credstore1" alias="password-alias" type="PasswordCredential"/>
            </key-manager>
            <key-manager name="LazyKeyManager" key-store="test.keystore" generate-self-signed-certificate-host="localhost">
                <credential-reference clear-text="elytron"/>
            </key-manager>
        </key-managers>
        <trust-managers>
            <trust-manager name="serverTrust" algorithm="SunX509" key-store="jks_store"/>
            <trust-manager name="serverTrust2" algorithm="SunX509" key-store="jks_store" providers="custom-loader" provider-name="first"/>
            <trust-manager name="trust-with-crl" algorithm="SunX509" key-store="jks_store">
                <certificate-revocation-list path="${exp.path:crl.pem}" relative-to="jboss.server.config.dir" maximum-cert-path="${exp.max:2}"/>
            </trust-manager>
            <trust-manager name="trust-with-crl-dp" algorithm="SunX509" key-store="jks_store">
                <certificate-revocation-list/>
            </trust-manager>
            <trust-manager name="trust-with-ocsp" algorithm="${exp.algorithm:PKIX}" key-store="jks_store">
                <ocsp responder="${exp.responder:http://localhost/ocsp}" responder-keystore="${exp.responder.keystore:jceks_store}" responder-certificate="${exp.responder.certificate:responder-alias}"/>
            </trust-manager>
        </trust-managers>
        <server-ssl-contexts>
            <server-ssl-context name="server" protocols="${exp.protocols:TLSv1.2}" want-client-auth="${exp.client.auth:true}" need-client-auth="${exp.need.client:true}" authentication-optional="${exp.authentication:true}"
                                use-cipher-suites-order="${exp.cipher.suites:false}" maximum-session-cache-size="${exp.cache:10}" cipher-suite-filter="${exp.filter:DEFAULT}" cipher-suite-names="${exp.names:name}"
                                session-timeout="${exp.session:120}" wrap="${exp.wrap:false}" key-manager="serverKey" trust-manager="serverTrust" pre-realm-principal-transformer="a"
                                post-realm-principal-transformer="b" final-principal-transformer="c" realm-mapper="d" providers="custom-loader" provider-name="${exp.provider.name:first}"/>
            <server-ssl-context name="server2" protocols="TLSv1.2" want-client-auth="true" need-client-auth="true" authentication-optional="true"
                                use-cipher-suites-order="false" maximum-session-cache-size="10"
                                session-timeout="120" wrap="false" key-manager="serverKey" trust-manager="serverTrust" pre-realm-principal-transformer="a"
                                post-realm-principal-transformer="b" final-principal-transformer="c" realm-mapper="d" providers="custom-loader" provider-name="first"/>
        </server-ssl-contexts>
        <client-ssl-contexts>
            <client-ssl-context name="client" protocols="TLSv1.3 TLSv1.2" key-manager="clientKey" trust-manager="serverTrust" providers="custom-loader"
                                provider-name="first"/>
        </client-ssl-contexts>
        <certificate-authorities>
            <certificate-authority name="testCA" url="${exp.url:https://www.test.com}" staging-url="${exp.staging.url:https://www.test.com}"/>
        </certificate-authorities>
        <certificate-authority-accounts>
            <certificate-authority-account name="MyCA" certificate-authority="${exp.certificate.authority:LetsEncrypt}" contact-urls="${exp.contact.urls:https://www.test.com}">
                <account-key key-store="accounts.keystore" alias="${exp.alias:server}">
                    <credential-reference clear-text="elytron"/>
                </account-key>
            </certificate-authority-account>
            <certificate-authority-account name="MyCA2" certificate-authority="testCA">
                <account-key key-store="accounts.keystore" alias="server">
                    <credential-reference clear-text="elytron"/>
                </account-key>
            </certificate-authority-account>
        </certificate-authority-accounts>
        <server-ssl-sni-contexts>
            <server-ssl-sni-context name="sni" default-ssl-context="server">
                <sni-mapping host="server" ssl-context="server" />
                <sni-mapping host=".*\.server" ssl-context="server2" />
            </server-ssl-sni-context>
        </server-ssl-sni-contexts>
    </tls>
    <credential-stores>
        <credential-store name="test1" relative-to="jboss.server.data.dir" location="${exp.location:test1.store}" create="true" type="${exp.type:JCEKS}" provider-name="${exp.provider:provider}">
            <implementation-properties>
                <property name="keyStoreType" value="JCEKS"/>
                <property name="keyAlias" value="adminKey"/>
            </implementation-properties>
            <credential-reference clear-text="secret2"/>
        </credential-store>
        <credential-store name="test2" relative-to="jboss.server.data.dir" modifiable="true">
            <credential-reference store="test1" alias="to_open_test2"/>
        </credential-store>
        <credential-store name="test4" relative-to="jboss.server.data.dir" path="${exp.path:test1.store}" create="true">
            <credential-reference clear-text="secret2"/>
        </credential-store>
        <secret-key-credential-store name="secretkeycredstore" relative-to="jboss.server.data.dir" path="mysecretkeycredstore.cs" create="${exp.create:true}" populate="${exp.populate:true}" />
        <secret-key-credential-store name="test3" relative-to="jboss.server.data.dir" path="test3.cs"
                                     create="${exp.create:false}" populate="${exp.populate:false}"
                                     key-size="${exp.key:192}" default-alias="${exp.alias:test3}" />
    </credential-stores>
    <expression-resolver default-resolver="A" prefix="G">
        <resolver name="A" credential-store="test1" secret-key="C"/>
        <resolver name="D" credential-store="test2" secret-key="F"/>
    </expression-resolver>
    <dir-contexts>
        <dir-context name="DirContextSsl" authentication-context="ldapAuthContext" referral-mode="throw" url="ldaps://localhost:11391/" connection-timeout="6000" read-timeout="10000">
            <properties>
                <property name="java.naming.dns.url" value="dns://dnsserver/wiz.com"/>
            </properties>
        </dir-context>
    </dir-contexts>
    <jaspi>
        <jaspi-configuration name="test" layer="${exp.layer:HttpServlet}" application-context="${exp.app.context:default /test}" description="${exp.description:Test Definition}">
            <server-auth-modules>
                <server-auth-module class-name="org.wildfly.Test" module="org.test" flag="${exp.flag:REQUISITE}">
                    <options>
                        <property name="a" value="${exp.b:b}"/>
                        <property name="c" value="d"/>
                    </options>
                </server-auth-module>
                <server-auth-module class-name="org.wildfly.Test2" module="org.test2" flag="SUFFICIENT">
                    <options>
                        <property name="e" value="f"/>
                        <property name="g" value="h"/>
                    </options>
                </server-auth-module>
            </server-auth-modules>
        </jaspi-configuration>
        <jaspi-configuration name="minimal">
            <server-auth-modules>
                <server-auth-module class-name="org.wildfly.Test3" />
            </server-auth-modules>
        </jaspi-configuration>
    </jaspi>
</subsystem>
