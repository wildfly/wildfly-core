#
# Copyright The WildFly Authors
# SPDX-License-Identifier: Apache-2.0
#

# Base subsystem descriptions
logging=The configuration of the logging subsystem.
logging.add=Add the logging subsystem.
logging.remove=Remove the logging subsystem.

# read-log-file operation
logging.read-log-file=Reads the contents of a log file. The file must be in the jboss.server.log.dir and must be defined as a \
  file-handler, periodic-rotating-file-handler or size-rotating-file-handler.
logging.read-log-file.deprecated=Use the log-file resource to read the log file.
logging.read-log-file.encoding=The character encoding used to read the file.
logging.read-log-file.name=The name of the log file to read. This file must exist in the jboss.server.log.dir.
logging.read-log-file.lines=The number of lines to read from the file. A value of -1 will read all log lines.
logging.read-log-file.skip=The number of lines to skip before reading.
logging.read-log-file.tail=Reads from the end of the file.

logging.list-log-files=Lists the log files in the jboss.server.log.dir directory that are defined on a file-handler, \
  periodic-rotating-file-handler or size-rotating-file-handler.
logging.list-log-files.deprecated=Use the log-file resource to see the available log files.
logging.list-log-files.file-name=The name of the file.
logging.list-log-files.file-size=The size of the log file in bytes.
logging.list-log-files.last-modified-date=The date the file was last modified.

# Root resource attributes
logging.add-logging-api-dependencies=Indicates whether or not logging API dependencies should be added to deployments \
  during the deployment process. A value of true will add the dependencies to the deployment. A value of false will skip \
  the deployment from being processed for logging API dependencies.
logging.use-deployment-logging-config=Indicates whether or not deployments should use a logging configuration file found in \
  the deployment to configure the log manager. If set to true and a logging configuration file is found in the deployment's \
  META-INF or WEB-INF/classes directory, then a log manager will be configured with those settings. If set to false, the server's \
  logging configuration will be used regardless of any logging configuration files supplied in the deployment.

# Logging profiles
logging.logging-profile=A profile that can be assigned to a deployment for its logging configuration.
logging.logging-profile.add=Adds a logging profile.
logging.logging-profile.remove=Removes the logging profile and all associated loggers and handlers.

# Logging log-file
logging.log-file=Log files that are available to be read.
logging.log-file.file-size=The size of the log file in bytes.
logging.log-file.last-modified-time=The date, in milliseconds, the file was last modified.
logging.log-file.last-modified-timestamp=The date, in ISO 8601 format, the file was last modified.
logging.log-file.stream=Provides the server log as a response attachment. The response result value is the unique id of \
  the attachment.

# Root logger operations
logging.root-logger=Defines the root logger for this log context.
# Operations
logging.root-logger.remove=Remove the root logger.
logging.root-logger.add=Adds the root logger.
logging.root-logger.add-handler=Adds a handler to the logger.
logging.root-logger.add-handler.name=The name of the handler to add.
logging.root-logger.remove-handler=Removes a handler from the logger.
logging.root-logger.remove-handler.name=The name of the logger to remove.
# Deprecated operations
logging.root-logger.remove-root-logger=Remove the root logger.
logging.root-logger.remove-root-logger.deprecated=Use the remove operation.
logging.root-logger.change-root-log-level=Change the root logger level.
logging.root-logger.change-root-log-level.deprecated=Use the write-attribute operation.
logging.root-logger.change-root-log-level.level=The level to set the root logger to.
logging.root-logger.root-logger-assign-handler.deprecated=Use the add-handler operation.
logging.root-logger.root-logger-assign-handler=Assign a Handler to the root logger.
logging.root-logger.root-logger-assign-handler.name=The name of the handler to add.
logging.root-logger.root-logger-unassign-handler=Unassign a Handler from the root logger.
logging.root-logger.root-logger-unassign-handler.deprecated=Use the remove-handler operation.
logging.root-logger.root-logger-unassign-handler.name=The name of the handler to remove.
logging.root-logger.set-root-logger=Same as add operation
logging.root-logger.set-root-logger.deprecated=Use the add operation.
# Attributes
logging.root-logger.handlers=The handlers associated with the root logger.
logging.root-logger.handlers.handler=The name of the log handler.
logging.root-logger.level=The log level specifying which message levels will be logged by the root logger. Message levels lower than this value will be discarded.
logging.root-logger.filter-spec=A filter expression value to define a filter. Example for a filter that does not match a pattern: not(match("JBAS.*"))
# Deprecated attributes
logging.root-logger.filter=Defines a simple filter type.
logging.root-logger.filter.deprecated=Use filter-spec.
logging.root-logger.filter.all=A filter consisting of several filters in a chain.  If any filter finds the log message to be unloggable,the message will not be logged and subsequent filters will not be checked.
logging.root-logger.filter.any=A filter consisting of several filters in a chain.  If any filter finds the log message to be loggable, the message will be logged and subsequent filters will not be checked.
logging.root-logger.filter.accept=Accepts all log messages.
logging.root-logger.filter.change-level=A filter which modifies the log record with a new level if the nested filter evaluates true for that record.
logging.root-logger.filter.deny=Denys all log messages.
logging.root-logger.filter.level=A filter which excludes a message with the specified level.
logging.root-logger.filter.level-range=A filter which logs only messages that fall within a level range.
logging.root-logger.filter.level-range.min-level=The minimum (least severe) level, inclusive.
logging.root-logger.filter.level-range.max-level=The maximum (most severe) level, inclusive.
logging.root-logger.filter.min-level=The minimum (least severe) level, inclusive.
logging.root-logger.filter.min-inclusive=True if the min-level value is inclusive, false if it is exclusive.
logging.root-logger.filter.max-level=The maximum (most severe) level, inclusive.
logging.root-logger.filter.max-inclusive=True if the max-level value is inclusive, false if it is exclusive.
logging.root-logger.filter.match=A regular-expression-based filter. Used to exclude log records which match or don't match the expression. The regular expression is checked against the raw (unformatted) message.
logging.root-logger.filter.not=A filter that inverts the filter that is nested.
logging.root-logger.filter.replace=A filter which applies a text substitution on the message if the nested filter matches.
logging.root-logger.filter.replace.pattern=The pattern to match
logging.root-logger.filter.replace.replacement=The string replacement
logging.root-logger.filter.replace.replace-all=True if all occurrences should be replaced; false if only the first occurrence
logging.root-logger.filter.pattern=The pattern to match
logging.root-logger.filter.replacement=The string replacement
logging.root-logger.filter.replace-all=True if all occurrences should be replaced; false if only the first occurrence

# Logger definitions
logging.logger=It defines a logger category.
# Operations
logging.logger.add=Add a new logger category.
logging.logger.remove=Remove an existing logger category.
logging.logger.add-handler=Adds a handler to the logger.
logging.logger.add-handler.name=The name of the handler to add.
logging.logger.remove-handler=Removes a handler from the logger.
logging.logger.remove-handler.name=The name of the logger to remove.
# Deprecated operations
logging.logger.change-log-level=Change the logging level for a logger category.
logging.logger.change-log-level.deprecated=Use the write-attribute operation.
logging.logger.change-log-level.level=The new level to set.
logging.logger.assign-handler=Assign a Handler to a Logger.
logging.logger.assign-handler.deprecated=Use the add-handler operation.
logging.logger.assign-handler.name=The name of the handler to add.
logging.logger.unassign-handler=Unassign a Handler from a Logger.
logging.logger.unassign-handler.deprecated=Use the remove-handler operation.
logging.logger.unassign-handler.name=The name of the handler to remove.
# Attributes
logging.logger.name=Name of the logger
logging.logger.use-parent-handlers=Specifies whether or not this logger should send its output to its parent Logger.
logging.logger.category=Specifies the category for the logger.
logging.logger.handlers=The handlers associated with the logger.
logging.logger.handlers.handler=The name of the log handler.
logging.logger.level=The log level specifying which message levels will be logged by the logger. Message levels lower than this value will be discarded.
logging.logger.filter-spec=A filter expression value to define a filter. Example for a filter that does not match a pattern: not(match("JBAS.*"))
# Deprecated attributes
logging.logger.filter=Defines a simple filter type.
logging.logger.filter.deprecated=Use filter-spec.
logging.logger.filter.all=A filter consisting of several filters in a chain.  If any filter finds the log message to be unloggable,the message will not be logged and subsequent filters will not be checked.
logging.logger.filter.any=A filter consisting of several filters in a chain.  If any filter finds the log message to be loggable, the message will be logged and subsequent filters will not be checked.
logging.logger.filter.accept=Accepts all log messages.
logging.logger.filter.change-level=A filter which modifies the log record with a new level if the nested filter evaluates true for that record.
logging.logger.filter.deny=Denys all log messages.
logging.logger.filter.level=A filter which excludes a message with the specified level.
logging.logger.filter.level-range=A filter which logs only messages that fall within a level range.
logging.logger.filter.level-range.min-level=The minimum (least severe) level, inclusive.
logging.logger.filter.level-range.max-level=The maximum (most severe) level, inclusive.
logging.logger.filter.min-level=The minimum (least severe) level, inclusive.
logging.logger.filter.min-inclusive=True if the min-level value is inclusive, false if it is exclusive.
logging.logger.filter.max-level=The maximum (most severe) level, inclusive.
logging.logger.filter.max-inclusive=True if the max-level value is inclusive, false if it is exclusive.
logging.logger.filter.match=A regular-expression-based filter. Used to exclude log records which match or don't match the expression. The regular expression is checked against the raw (unformatted) message.
logging.logger.filter.not=A filter that inverts the filter that is nested.
logging.logger.filter.replace=A filter which applies a text substitution on the message if the nested filter matches.
logging.logger.filter.replace.pattern=The pattern to match
logging.logger.filter.replace.replacement=The string replacement
logging.logger.filter.replace.replace-all=True if all occurrences should be replaced; false if only the first occurrence
logging.logger.filter.pattern=The pattern to match
logging.logger.filter.replacement=The string replacement
logging.logger.filter.replace-all=True if all occurrences should be replaced; false if only the first occurrence

# Async handler definitions
logging.async-handler=It defines a handler which writes to the sub-handlers in an asynchronous thread, used for handlers which introduce a substantial amount of lag.
# Operations
logging.async-handler.add=Add a new async handler.
logging.async-handler.remove=Removes the async handler.
logging.async-handler.add-handler=Adds a child handler to the async handler.
logging.async-handler.add-handler.name=The name of the handler to add.
logging.async-handler.remove-handler=Removes the handler from the async handler.
logging.async-handler.remove-handler.name=The name of the handler to remove.
# Deprecated operations
logging.async-handler.enable=Enable a logging handler.
logging.async-handler.enable.deprecated=Use the write-attribute for the enabled attribute.
logging.async-handler.disable=Disable a logging handler.
logging.async-handler.disable.deprecated=Use the write-attribute for the enabled attribute.
logging.async-handler.change-log-level=Change the logging level for a handler.
logging.async-handler.change-log-level.deprecated=Use the write-attribute operation.
logging.async-handler.change-log-level.level=The new level to set.
logging.async-handler.update-properties=Update the properties on the existing handler.
logging.async-handler.update-properties.deprecated=Use the write-attribute operation.
logging.async-handler.assign-subhandler=Assign a subhandler to the handler.
logging.async-handler.assign-subhandler.deprecated=Use the add-handler operation.
logging.async-handler.assign-subhandler.name=The name of the handler to add.
logging.async-handler.unassign-subhandler=Unassign a subhandler from the handler.
logging.async-handler.unassign-subhandler.deprecated=Use the remove-handler operation.
logging.async-handler.unassign-subhandler.name=The name of the handler to remove.
# Attributes
logging.async-handler.enabled=If set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
logging.async-handler.level=The log level specifying which message levels will be logged by this handler. Message levels lower than this value will be discarded.
logging.async-handler.filter-spec=A filter expression value to define a filter. Example for a filter that does not match a pattern: not(match("JBAS.*"))
logging.async-handler.queue-length=The queue length to use before flushing writing
logging.async-handler.overflow-action=Specify what action to take when the overflowing.  The valid options are 'block' and 'discard'
logging.async-handler.subhandlers=The Handlers associated with this async handler.
logging.async-handler.subhandlers.handler=The subhandler associated with this async handler.
# Deprecated attributes
logging.async-handler.name=The name of the handler.
logging.async-handler.name.deprecated=The name attribute should not be used as the handler's address contains the name.
logging.async-handler.filter=Defines a simple filter type.
logging.async-handler.filter.deprecated=Use filter-spec.
logging.async-handler.filter.all=A filter consisting of several filters in a chain.  If any filter finds the log message to be unloggable,the message will not be logged and subsequent filters will not be checked.
logging.async-handler.filter.any=A filter consisting of several filters in a chain.  If any filter finds the log message to be loggable, the message will be logged and subsequent filters will not be checked.
logging.async-handler.filter.accept=Accepts all log messages.
logging.async-handler.filter.change-level=A filter which modifies the log record with a new level if the nested filter evaluates true for that record.
logging.async-handler.filter.deny=Denys all log messages.
logging.async-handler.filter.level=A filter which excludes a message with the specified level.
logging.async-handler.filter.level-range=A filter which logs only messages that fall within a level range.
logging.async-handler.filter.level-range.min-level=The minimum (least severe) level, inclusive.
logging.async-handler.filter.level-range.max-level=The maximum (most severe) level, inclusive.
logging.async-handler.filter.min-level=The minimum (least severe) level, inclusive.
logging.async-handler.filter.min-inclusive=True if the min-level value is inclusive, false if it is exclusive.
logging.async-handler.filter.max-level=The maximum (most severe) level, inclusive.
logging.async-handler.filter.max-inclusive=True if the max-level value is inclusive, false if it is exclusive.
logging.async-handler.filter.match=A regular-expression-based filter. Used to exclude log records which match or don't match the expression. The regular expression is checked against the raw (unformatted) message.
logging.async-handler.filter.not=A filter that inverts the filter that is nested.
logging.async-handler.filter.replace=A filter which applies a text substitution on the message if the nested filter matches.
logging.async-handler.filter.replace.pattern=The pattern to match
logging.async-handler.filter.replace.replacement=The string replacement
logging.async-handler.filter.replace.replace-all=True if all occurrences should be replaced; false if only the first occurrence
logging.async-handler.filter.pattern=The pattern to match
logging.async-handler.filter.replacement=The string replacement
logging.async-handler.filter.replace-all=True if all occurrences should be replaced; false if only the first occurrence

# Console handler definitions
logging.console-handler=Defines a handler which writes to the console.
# Operations
logging.console-handler.add=Add a new console handler.
logging.console-handler.remove=Removes the console handler.
# Deprecated operations
logging.console-handler.enable=Enable a logging handler.
logging.console-handler.enable.deprecated=Use the write-attribute for the enabled attribute.
logging.console-handler.disable=Disable a logging handler.
logging.console-handler.disable.deprecated=Use the write-attribute for the enabled attribute.
logging.console-handler.change-log-level=Change the logging level for a handler.
logging.console-handler.change-log-level.deprecated=Use the write-attribute operation.
logging.console-handler.change-log-level.level=The new level to set.
logging.console-handler.update-properties=Update the properties on the existing handler.
logging.console-handler.update-properties.deprecated=Use the write-attribute operation.
# Attributes
logging.console-handler.autoflush=Automatically flush after each write.
logging.console-handler.enabled=If set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
logging.console-handler.encoding=The character encoding used by this Handler.
logging.console-handler.filter-spec=A filter expression value to define a filter. Example for a filter that does not match a pattern: not(match("JBAS.*"))
logging.console-handler.formatter=Defines a pattern for the formatter.
logging.console-handler.level=The log level specifying which message levels will be logged by this logger. Message levels lower than this value will be discarded.
logging.console-handler.named-formatter=The name of the defined formatter to be used on the handler.
logging.console-handler.target=Defines the target of the console handler. The value can be System.out, System.err or console.
# Deprecated attributes
logging.console-handler.name=The name of the handler.
logging.console-handler.name.deprecated=The name attribute should not be used as the handler's address contains the name.
logging.console-handler.filter=Defines a simple filter type.
logging.console-handler.filter.deprecated=Use filter-spec.
logging.console-handler.filter.all=A filter consisting of several filters in a chain.  If any filter finds the log message to be unloggable,the message will not be logged and subsequent filters will not be checked.
logging.console-handler.filter.any=A filter consisting of several filters in a chain.  If any filter finds the log message to be loggable, the message will be logged and subsequent filters will not be checked.
logging.console-handler.filter.accept=Accepts all log messages.
logging.console-handler.filter.change-level=A filter which modifies the log record with a new level if the nested filter evaluates true for that record.
logging.console-handler.filter.deny=Denys all log messages.
logging.console-handler.filter.level=A filter which excludes a message with the specified level.
logging.console-handler.filter.level-range=A filter which logs only messages that fall within a level range.
logging.console-handler.filter.level-range.min-level=The minimum (least severe) level, inclusive.
logging.console-handler.filter.level-range.max-level=The maximum (most severe) level, inclusive.
logging.console-handler.filter.min-level=The minimum (least severe) level, inclusive.
logging.console-handler.filter.min-inclusive=True if the min-level value is inclusive, false if it is exclusive.
logging.console-handler.filter.max-level=The maximum (most severe) level, inclusive.
logging.console-handler.filter.max-inclusive=True if the max-level value is inclusive, false if it is exclusive.
logging.console-handler.filter.match=A regular-expression-based filter. Used to exclude log records which match or don't match the expression. The regular expression is checked against the raw (unformatted) message.
logging.console-handler.filter.not=A filter that inverts the filter that is nested.
logging.console-handler.filter.replace=A filter which applies a text substitution on the message if the nested filter matches.
logging.console-handler.filter.replace.pattern=The pattern to match
logging.console-handler.filter.replace.replacement=The string replacement
logging.console-handler.filter.replace.replace-all=True if all occurrences should be replaced; false if only the first occurrence
logging.console-handler.filter.pattern=The pattern to match
logging.console-handler.filter.replacement=The string replacement
logging.console-handler.filter.replace-all=True if all occurrences should be replaced; false if only the first occurrence

# File handler definitions
logging.file-handler=Defines a handler which writes to a file.
# Operations
logging.file-handler.add=Add a new file handler.
logging.file-handler.remove=Removes the file handler.
# Deprecated operations
logging.file-handler.enable=Enable a logging handler.
logging.file-handler.enable.deprecated=Use the write-attribute for the enabled attribute.
logging.file-handler.disable=Disable a logging handler.
logging.file-handler.disable.deprecated=Use the write-attribute for the enabled attribute.
logging.file-handler.change-log-level=Change the logging level for a handler.
logging.file-handler.change-log-level.deprecated=Use the write-attribute operation.
logging.file-handler.change-log-level.level=The new level to set.
logging.file-handler.change-file=Change the file for a handler.
logging.file-handler.change-file.deprecated=Use the write-attribute operation.
logging.file-handler.change-file.file=Change the file for a handler.
logging.file-handler.update-properties=Update the properties on the existing handler.
logging.file-handler.update-properties.deprecated=Use the write-attribute operation.
# Attributes
logging.file-handler.append=Specify whether to append to the target file.
logging.file-handler.autoflush=Automatically flush after each write.
logging.file-handler.enabled=If set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
logging.file-handler.encoding=The character encoding used by this Handler.
logging.file-handler.filter-spec=A filter expression value to define a filter. Example for a filter that does not match a pattern: not(match("JBAS.*"))
logging.file-handler.formatter=Defines a pattern for the formatter.
logging.file-handler.level=The log level specifying which message levels will be logged by this logger. Message levels lower than this value will be discarded.
logging.file-handler.named-formatter=The name of the defined formatter to be used on the handler.
logging.file-handler.file=The file description consisting of the path and optional relative to path.
logging.file-handler.file.path=The filesystem path.
logging.file-handler.file.relative-to=The name of another previously named path, or of one of the standard paths provided by the system. If 'relative-to' is provided, \
  the value of the 'path' attribute is treated as relative to the path specified by this attribute.
# Deprecated attributes
logging.file-handler.name=The name of the handler.
logging.file-handler.name.deprecated=The name attribute should not be used as the handler's address contains the name.
logging.file-handler.filter=Defines a simple filter type.
logging.file-handler.filter.deprecated=Use filter-spec.
logging.file-handler.filter.all=A filter consisting of several filters in a chain.  If any filter finds the log message to be unloggable,the message will not be logged and subsequent filters will not be checked.
logging.file-handler.filter.any=A filter consisting of several filters in a chain.  If any filter finds the log message to be loggable, the message will be logged and subsequent filters will not be checked.
logging.file-handler.filter.accept=Accepts all log messages.
logging.file-handler.filter.change-level=A filter which modifies the log record with a new level if the nested filter evaluates true for that record.
logging.file-handler.filter.deny=Denys all log messages.
logging.file-handler.filter.level=A filter which excludes a message with the specified level.
logging.file-handler.filter.level-range=A filter which logs only messages that fall within a level range.
logging.file-handler.filter.level-range.min-level=The minimum (least severe) level, inclusive.
logging.file-handler.filter.level-range.max-level=The maximum (most severe) level, inclusive.
logging.file-handler.filter.min-level=The minimum (least severe) level, inclusive.
logging.file-handler.filter.min-inclusive=True if the min-level value is inclusive, false if it is exclusive.
logging.file-handler.filter.max-level=The maximum (most severe) level, inclusive.
logging.file-handler.filter.max-inclusive=True if the max-level value is inclusive, false if it is exclusive.
logging.file-handler.filter.match=A regular-expression-based filter. Used to exclude log records which match or don't match the expression. The regular expression is checked against the raw (unformatted) message.
logging.file-handler.filter.not=A filter that inverts the filter that is nested.
logging.file-handler.filter.replace=A filter which applies a text substitution on the message if the nested filter matches.
logging.file-handler.filter.replace.pattern=The pattern to match
logging.file-handler.filter.replace.replacement=The string replacement
logging.file-handler.filter.replace.replace-all=True if all occurrences should be replaced; false if only the first occurrence
logging.file-handler.filter.pattern=The pattern to match
logging.file-handler.filter.replacement=The string replacement
logging.file-handler.filter.replace-all=True if all occurrences should be replaced; false if only the first occurrence

# Periodic rotating file handler definitions
logging.periodic-rotating-file-handler=It defines a handler which writes to a file, rotating the log after a time period derived from the given suffix string, which should be in a format understood by java.text.SimpleDateFormat.
# Operations
logging.periodic-rotating-file-handler.add=Add a new periodic rotating file handler.
logging.periodic-rotating-file-handler.remove=Removes the periodic rotating file handler.
# Deprecated operations
logging.periodic-rotating-file-handler.enable=Enable a logging handler.
logging.periodic-rotating-file-handler.enable.deprecated=Use the write-attribute for the enabled attribute.
logging.periodic-rotating-file-handler.disable=Disable a logging handler.
logging.periodic-rotating-file-handler.disable.deprecated=Use the write-attribute for the enabled attribute.
logging.periodic-rotating-file-handler.change-log-level=Change the logging level for a handler.
logging.periodic-rotating-file-handler.change-log-level.deprecated=Use the write-attribute operation.
logging.periodic-rotating-file-handler.change-log-level.level=The new level to set.
logging.periodic-rotating-file-handler.change-file=Change the file for a handler.
logging.periodic-rotating-file-handler.change-file.deprecated=Use the write-attribute operation.
logging.periodic-rotating-file-handler.change-file.file=Change the file for a handler.
logging.periodic-rotating-file-handler.update-properties=Update the properties on the existing handler.
logging.periodic-rotating-file-handler.update-properties.deprecated=Use the write-attribute operation.
# Attributes
logging.periodic-rotating-file-handler.append=Specify whether to append to the target file.
logging.periodic-rotating-file-handler.autoflush=Automatically flush after each write.
logging.periodic-rotating-file-handler.enabled=If set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
logging.periodic-rotating-file-handler.encoding=The character encoding used by this Handler.
logging.periodic-rotating-file-handler.filter-spec=A filter expression value to define a filter. Example for a filter that does not match a pattern: not(match("JBAS.*"))
logging.periodic-rotating-file-handler.formatter=Defines a pattern for the formatter.
logging.periodic-rotating-file-handler.level=The log level specifying which message levels will be logged by this logger. Message levels lower than this value will be discarded.
logging.periodic-rotating-file-handler.named-formatter=The name of the defined formatter to be used on the handler.
logging.periodic-rotating-file-handler.file=The file description consisting of the path and optional relative to path.
logging.periodic-rotating-file-handler.file.path=The filesystem path.
logging.periodic-rotating-file-handler.file.relative-to=The name of another previously named path, or of one of the standard paths provided by the system. If 'relative-to' is provided, \
  the value of the 'path' attribute is treated as relative to the path specified by this attribute.
logging.periodic-rotating-file-handler.suffix=Set the suffix string.  The string is in a format which can be understood by java.text.SimpleDateFormat. The period of the rotation is automatically calculated based on the suffix.
# Deprecated attributes
logging.periodic-rotating-file-handler.name=The name of the handler.
logging.periodic-rotating-file-handler.name.deprecated=The name attribute should not be used as the handler's address contains the name.
logging.periodic-rotating-file-handler.filter=Defines a simple filter type.
logging.periodic-rotating-file-handler.filter.deprecated=Use filter-spec.
logging.periodic-rotating-file-handler.filter.all=A filter consisting of several filters in a chain.  If any filter finds the log message to be unloggable,the message will not be logged and subsequent filters will not be checked.
logging.periodic-rotating-file-handler.filter.any=A filter consisting of several filters in a chain.  If any filter finds the log message to be loggable, the message will be logged and subsequent filters will not be checked.
logging.periodic-rotating-file-handler.filter.accept=Accepts all log messages.
logging.periodic-rotating-file-handler.filter.change-level=A filter which modifies the log record with a new level if the nested filter evaluates true for that record.
logging.periodic-rotating-file-handler.filter.deny=Denys all log messages.
logging.periodic-rotating-file-handler.filter.level=A filter which excludes a message with the specified level.
logging.periodic-rotating-file-handler.filter.level-range=A filter which logs only messages that fall within a level range.
logging.periodic-rotating-file-handler.filter.level-range.min-level=The minimum (least severe) level, inclusive.
logging.periodic-rotating-file-handler.filter.level-range.max-level=The maximum (most severe) level, inclusive.
logging.periodic-rotating-file-handler.filter.min-level=The minimum (least severe) level, inclusive.
logging.periodic-rotating-file-handler.filter.min-inclusive=True if the min-level value is inclusive, false if it is exclusive.
logging.periodic-rotating-file-handler.filter.max-level=The maximum (most severe) level, inclusive.
logging.periodic-rotating-file-handler.filter.max-inclusive=True if the max-level value is inclusive, false if it is exclusive.
logging.periodic-rotating-file-handler.filter.match=A regular-expression-based filter. Used to exclude log records which match or don't match the expression. The regular expression is checked against the raw (unformatted) message.
logging.periodic-rotating-file-handler.filter.not=A filter that inverts the filter that is nested.
logging.periodic-rotating-file-handler.filter.replace=A filter which applies a text substitution on the message if the nested filter matches.
logging.periodic-rotating-file-handler.filter.replace.pattern=The pattern to match
logging.periodic-rotating-file-handler.filter.replace.replacement=The string replacement
logging.periodic-rotating-file-handler.filter.replace.replace-all=True if all occurrences should be replaced; false if only the first occurrence
logging.periodic-rotating-file-handler.filter.pattern=The pattern to match
logging.periodic-rotating-file-handler.filter.replacement=The string replacement
logging.periodic-rotating-file-handler.filter.replace-all=True if all occurrences should be replaced; false if only the first occurrence


# Periodic size rotating file handler definitions
logging.periodic-size-rotating-file-handler=It defines a handler which writes to a file, rotating the log after a time period derived from the given suffix string or after \
  the size of the file grows beyond a certain point and keeping a fixed number of backups. The suffix should be in a format understood by the java.text.SimpleDateFormat. \
  Any backups rotated by the suffix will not be purged during a size rotation.
# Operations
logging.periodic-size-rotating-file-handler.add=Adds a new periodic size rotating file handler.
logging.periodic-size-rotating-file-handler.remove=Removes the periodic size rotating file handler.
# Deprecated operations
logging.periodic-size-rotating-file-handler.enable=Enable a logging handler.
logging.periodic-size-rotating-file-handler.enable.deprecated=Use the write-attribute for the enabled attribute.
logging.periodic-size-rotating-file-handler.disable=Disable a logging handler.
logging.periodic-size-rotating-file-handler.disable.deprecated=Use the write-attribute for the enabled attribute.
logging.periodic-size-rotating-file-handler.change-log-level=Change the logging level for a handler.
logging.periodic-size-rotating-file-handler.change-log-level.deprecated=Use the write-attribute operation.
logging.periodic-size-rotating-file-handler.change-log-level.level=The new level to set.
logging.periodic-size-rotating-file-handler.change-file=Change the file for a handler.
logging.periodic-size-rotating-file-handler.change-file.deprecated=Use the write-attribute operation.
logging.periodic-size-rotating-file-handler.change-file.file=Change the file for a handler.
logging.periodic-size-rotating-file-handler.update-properties=Update the properties on the existing handler.
logging.periodic-size-rotating-file-handler.update-properties.deprecated=Use the write-attribute operation.
#Attributes
logging.periodic-size-rotating-file-handler.append=Specify whether to append to the target file.
logging.periodic-size-rotating-file-handler.autoflush=Automatically flush after each write.
logging.periodic-size-rotating-file-handler.enabled=If set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
logging.periodic-size-rotating-file-handler.encoding=The character encoding used by this Handler.
logging.periodic-size-rotating-file-handler.filter-spec=A filter expression value to define a filter. Example for a filter that does not match a pattern: not(match("JBAS.*"))
logging.periodic-size-rotating-file-handler.formatter=Defines a pattern for the formatter.
logging.periodic-size-rotating-file-handler.level=The log level specifying which message levels will be logged by this logger. Message levels lower than this value will be discarded.
logging.periodic-size-rotating-file-handler.named-formatter=The name of the defined formatter to be used on the handler.
logging.periodic-size-rotating-file-handler.file=The file description consisting of the path and optional relative to path.
logging.periodic-size-rotating-file-handler.file.path=The filesystem path.
logging.periodic-size-rotating-file-handler.file.relative-to=The name of another previously named path, or of one of the standard paths provided by the system. If 'relative-to' is provided, \
  the value of the 'path' attribute is treated as relative to the path specified by this attribute.
logging.periodic-size-rotating-file-handler.max-backup-index=The maximum number of backups to keep.
logging.periodic-size-rotating-file-handler.rotate-size=The size at which to rotate the log file.
logging.periodic-size-rotating-file-handler.rotate-on-boot=Indicates the file should be rotated each time the file attribute is changed. This always happens when at initialization time.
logging.periodic-size-rotating-file-handler.suffix=Set the suffix string.  The string is in a format which can be understood by java.text.SimpleDateFormat. The period of the rotation is automatically calculated based on the suffix.
# Deprecated attributes
logging.periodic-size-rotating-file-handler.name=The name of the handler.
logging.periodic-size-rotating-file-handler.name.deprecated=The name attribute should not be used as the handler's address contains the name.
logging.periodic-size-rotating-file-handler.filter=Defines a simple filter type.
logging.periodic-size-rotating-file-handler.filter.deprecated=Use filter-spec.
logging.periodic-size-rotating-file-handler.filter.all=A filter consisting of several filters in a chain.  If any filter finds the log message to be unloggable,the message will not be logged and subsequent filters will not be checked.
logging.periodic-size-rotating-file-handler.filter.any=A filter consisting of several filters in a chain.  If any filter finds the log message to be loggable, the message will be logged and subsequent filters will not be checked.
logging.periodic-size-rotating-file-handler.filter.accept=Accepts all log messages.
logging.periodic-size-rotating-file-handler.filter.change-level=A filter which modifies the log record with a new level if the nested filter evaluates true for that record.
logging.periodic-size-rotating-file-handler.filter.deny=Denys all log messages.
logging.periodic-size-rotating-file-handler.filter.level=A filter which excludes a message with the specified level.
logging.periodic-size-rotating-file-handler.filter.level-range=A filter which logs only messages that fall within a level range.
logging.periodic-size-rotating-file-handler.filter.level-range.min-level=The minimum (least severe) level, inclusive.
logging.periodic-size-rotating-file-handler.filter.level-range.max-level=The maximum (most severe) level, inclusive.
logging.periodic-size-rotating-file-handler.filter.min-level=The minimum (least severe) level, inclusive.
logging.periodic-size-rotating-file-handler.filter.min-inclusive=True if the min-level value is inclusive, false if it is exclusive.
logging.periodic-size-rotating-file-handler.filter.max-level=The maximum (most severe) level, inclusive.
logging.periodic-size-rotating-file-handler.filter.max-inclusive=True if the max-level value is inclusive, false if it is exclusive.
logging.periodic-size-rotating-file-handler.filter.match=A regular-expression-based filter. Used to exclude log records which match or don't match the expression. The regular expression is checked against the raw (unformatted) message.
logging.periodic-size-rotating-file-handler.filter.not=A filter that inverts the filter that is nested.
logging.periodic-size-rotating-file-handler.filter.replace=A filter which applies a text substitution on the message if the nested filter matches.
logging.periodic-size-rotating-file-handler.filter.replace.pattern=The pattern to match
logging.periodic-size-rotating-file-handler.filter.replace.replacement=The string replacement
logging.periodic-size-rotating-file-handler.filter.replace.replace-all=True if all occurrences should be replaced; false if only the first occurrence
logging.periodic-size-rotating-file-handler.filter.pattern=The pattern to match
logging.periodic-size-rotating-file-handler.filter.replacement=The string replacement
logging.periodic-size-rotating-file-handler.filter.replace-all=True if all occurrences should be replaced; false if only the first occurrence

# Size rotating ile handler definitions
logging.size-rotating-file-handler=Defines a handler which writes to a file, rotating the log after the size of the file grows beyond a certain point and keeping a fixed number of backups.
# Operations
logging.size-rotating-file-handler.add=Add a new size rotating file handler.
logging.size-rotating-file-handler.remove=Removes the size rotating file handler.
# Deprecated operations
logging.size-rotating-file-handler.enable=Enable a logging handler.
logging.size-rotating-file-handler.enable.deprecated=Use the write-attribute for the enabled attribute.
logging.size-rotating-file-handler.disable=Disable a logging handler.
logging.size-rotating-file-handler.disable.deprecated=Use the write-attribute for the enabled attribute.
logging.size-rotating-file-handler.change-log-level=Change the logging level for a handler.
logging.size-rotating-file-handler.change-log-level.deprecated=Use the write-attribute operation.
logging.size-rotating-file-handler.change-log-level.level=The new level to set.
logging.size-rotating-file-handler.change-file=Change the file for a handler.
logging.size-rotating-file-handler.change-file.deprecated=Use the write-attribute operation.
logging.size-rotating-file-handler.change-file.file=Change the file for a handler.
logging.size-rotating-file-handler.update-properties=Update the properties on the existing handler.
logging.size-rotating-file-handler.update-properties.deprecated=Use the write-attribute operation.
# Attributes
logging.size-rotating-file-handler.append=Specify whether to append to the target file.
logging.size-rotating-file-handler.autoflush=Automatically flush after each write.
logging.size-rotating-file-handler.enabled=If set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
logging.size-rotating-file-handler.encoding=The character encoding used by this Handler.
logging.size-rotating-file-handler.filter-spec=A filter expression value to define a filter. Example for a filter that does not match a pattern: not(match("JBAS.*"))
logging.size-rotating-file-handler.formatter=Defines a pattern for the formatter.
logging.size-rotating-file-handler.level=The log level specifying which message levels will be logged by this logger. Message levels lower than this value will be discarded.
logging.size-rotating-file-handler.named-formatter=The name of the defined formatter to be used on the handler.
logging.size-rotating-file-handler.file=The file description consisting of the path and optional relative to path.
logging.size-rotating-file-handler.file.path=The filesystem path.
logging.size-rotating-file-handler.file.relative-to=The name of another previously named path, or of one of the standard paths provided by the system. If 'relative-to' is provided, \
  the value of the 'path' attribute is treated as relative to the path specified by this attribute.
logging.size-rotating-file-handler.max-backup-index=The maximum number of backups to keep.
logging.size-rotating-file-handler.rotate-size=The size at which to rotate the log file.
logging.size-rotating-file-handler.rotate-on-boot=Indicates the file should be rotated each time the file attribute is changed. This always happens when at initialization time.
logging.size-rotating-file-handler.suffix=Set the suffix string. The string is in a format which can be understood by java.text.SimpleDateFormat. The suffix does not determine when the file should be rotated.
# Deprecated attributes
logging.size-rotating-file-handler.name=The name of the handler.
logging.size-rotating-file-handler.name.deprecated=The name attribute should not be used as the handler's address contains the name.
logging.size-rotating-file-handler.filter=Defines a simple filter type.
logging.size-rotating-file-handler.filter.deprecated=Use filter-spec.
logging.size-rotating-file-handler.filter.all=A filter consisting of several filters in a chain.  If any filter finds the log message to be unloggable,the message will not be logged and subsequent filters will not be checked.
logging.size-rotating-file-handler.filter.any=A filter consisting of several filters in a chain.  If any filter finds the log message to be loggable, the message will be logged and subsequent filters will not be checked.
logging.size-rotating-file-handler.filter.accept=Accepts all log messages.
logging.size-rotating-file-handler.filter.change-level=A filter which modifies the log record with a new level if the nested filter evaluates true for that record.
logging.size-rotating-file-handler.filter.deny=Denys all log messages.
logging.size-rotating-file-handler.filter.level=A filter which excludes a message with the specified level.
logging.size-rotating-file-handler.filter.level-range=A filter which logs only messages that fall within a level range.
logging.size-rotating-file-handler.filter.level-range.min-level=The minimum (least severe) level, inclusive.
logging.size-rotating-file-handler.filter.level-range.max-level=The maximum (most severe) level, inclusive.
logging.size-rotating-file-handler.filter.min-level=The minimum (least severe) level, inclusive.
logging.size-rotating-file-handler.filter.min-inclusive=True if the min-level value is inclusive, false if it is exclusive.
logging.size-rotating-file-handler.filter.max-level=The maximum (most severe) level, inclusive.
logging.size-rotating-file-handler.filter.max-inclusive=True if the max-level value is inclusive, false if it is exclusive.
logging.size-rotating-file-handler.filter.match=A regular-expression-based filter. Used to exclude log records which match or don't match the expression. The regular expression is checked against the raw (unformatted) message.
logging.size-rotating-file-handler.filter.not=A filter that inverts the filter that is nested.
logging.size-rotating-file-handler.filter.replace=A filter which applies a text substitution on the message if the nested filter matches.
logging.size-rotating-file-handler.filter.replace.pattern=The pattern to match
logging.size-rotating-file-handler.filter.replace.replacement=The string replacement
logging.size-rotating-file-handler.filter.replace.replace-all=True if all occurrences should be replaced; false if only the first occurrence
logging.size-rotating-file-handler.filter.pattern=The pattern to match
logging.size-rotating-file-handler.filter.replacement=The string replacement
logging.size-rotating-file-handler.filter.replace-all=True if all occurrences should be replaced; false if only the first occurrence

# Custom handler definitions
logging.custom-handler=Defines a custom logging handler. The custom handler must extend java.util.logging.Handler.
# Operations
logging.custom-handler.add=Adds a new custom handler. The handler must extend org.jboss.logmanager.ExtHandler, java.util.logging.Handler or be a log4j appender.
logging.custom-handler.remove=Removes the custom handler.
# Deprecated operations
logging.custom-handler.enable=Enable a logging handler.
logging.custom-handler.enable.deprecated=Use the write-attribute for the enabled attribute.
logging.custom-handler.disable=Disable a logging handler.
logging.custom-handler.disable.deprecated=Use the write-attribute for the enabled attribute.
logging.custom-handler.change-log-level=Change the logging level for a handler.
logging.custom-handler.change-log-level.deprecated=Use the write-attribute operation.
logging.custom-handler.change-log-level.level=The new level to set.
logging.custom-handler.update-properties=Update the properties on the existing handler.
logging.custom-handler.update-properties.deprecated=Use the write-attribute operation.
# Attributes
logging.custom-handler.enabled=If set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
logging.custom-handler.encoding=The character encoding used by this Handler.
logging.custom-handler.filter-spec=A filter expression value to define a filter. Example for a filter that does not match a pattern: not(match("JBAS.*"))
logging.custom-handler.formatter=Defines a pattern for the formatter.
logging.custom-handler.level=The log level specifying which message levels will be logged by this logger. Message levels lower than this value will be discarded.
logging.custom-handler.named-formatter=The name of the defined formatter to be used on the handler.
logging.custom-handler.class=The logging handler class to be used.
logging.custom-handler.module=The module that the logging handler depends on.
logging.custom-handler.properties=Defines the properties used for the logging handler. All properties must be accessible via a setter method.
logging.custom-handler.properties.name=Defines the name of the property to set.
logging.custom-handler.properties.value=Defines value of the property.
# Deprecated attributes
logging.custom-handler.name=The name of the handler.
logging.custom-handler.name.deprecated=The name attribute should not be used as the handler's address contains the name.
logging.custom-handler.filter=Defines a simple filter type.
logging.custom-handler.filter.deprecated=Use filter-spec.
logging.custom-handler.filter.all=A filter consisting of several filters in a chain.  If any filter finds the log message to be unloggable,the message will not be logged and subsequent filters will not be checked.
logging.custom-handler.filter.any=A filter consisting of several filters in a chain.  If any filter finds the log message to be loggable, the message will be logged and subsequent filters will not be checked.
logging.custom-handler.filter.accept=Accepts all log messages.
logging.custom-handler.filter.change-level=A filter which modifies the log record with a new level if the nested filter evaluates true for that record.
logging.custom-handler.filter.deny=Denys all log messages.
logging.custom-handler.filter.level=A filter which excludes a message with the specified level.
logging.custom-handler.filter.level-range=A filter which logs only messages that fall within a level range.
logging.custom-handler.filter.level-range.min-level=The minimum (least severe) level, inclusive.
logging.custom-handler.filter.level-range.max-level=The maximum (most severe) level, inclusive.
logging.custom-handler.filter.min-level=The minimum (least severe) level, inclusive.
logging.custom-handler.filter.min-inclusive=True if the min-level value is inclusive, false if it is exclusive.
logging.custom-handler.filter.max-level=The maximum (most severe) level, inclusive.
logging.custom-handler.filter.max-inclusive=True if the max-level value is inclusive, false if it is exclusive.
logging.custom-handler.filter.match=A regular-expression-based filter. Used to exclude log records which match or don't match the expression. The regular expression is checked against the raw (unformatted) message.
logging.custom-handler.filter.not=A filter that inverts the filter that is nested.
logging.custom-handler.filter.replace=A filter which applies a text substitution on the message if the nested filter matches.
logging.custom-handler.filter.replace.pattern=The pattern to match
logging.custom-handler.filter.replace.replacement=The string replacement
logging.custom-handler.filter.replace.replace-all=True if all occurrences should be replaced; false if only the first occurrence
logging.custom-handler.filter.pattern=The pattern to match
logging.custom-handler.filter.replacement=The string replacement
logging.custom-handler.filter.replace-all=True if all occurrences should be replaced; false if only the first occurrence

# Socket handler definitions
logging.socket-handler=It defines a handler which writes to a socket. Note that a socket-handler will queue messages \
  during the boot process. These messages will be drained to the socket once the resource is fully configured. If the \
  server is in an admin-only state, messages will be discarded.
# Operations
logging.socket-handler.add=Add a new socket handler.
logging.socket-handler.remove=Removes the socket handler.
# Attributes
logging.socket-handler.autoflush=Automatically flush after each write.
logging.socket-handler.block-on-reconnect=If set to true the write methods will block when attempting to reconnect. This \
  is only advisable to be set to true if using an asynchronous handler.
logging.socket-handler.enabled=If set to true the handler is enabled and functioning as normal, if set to false the \
  handler is ignored when processing log messages.
logging.socket-handler.encoding=The character encoding used by this Handler.
logging.socket-handler.filter-spec=A filter expression value to define a filter. Example for a filter that does not \
  match a pattern: not(match("JBAS.*"))
logging.socket-handler.level=The log level specifying which message levels will be logged by this logger. Message \
  levels lower than this value will be discarded.
logging.socket-handler.named-formatter=The name of the defined formatter to be used on the handler.
logging.socket-handler.outbound-socket-binding-ref=Outbound socket reference for the socket connection.
logging.socket-handler.protocol=The protocol the socket should communicate over.
logging.socket-handler.ssl-context=The reference to the defined SSL context. This is only used if the protocol is set \
  to SSL_TCP.

# Syslog handler definitions
logging.syslog-handler=It defines a syslog handler.
# Operations
logging.syslog-handler.add=Adds a new syslog handler.
logging.syslog-handler.remove=Removes the syslog handler.
# Attributes
logging.syslog-handler.enabled=If set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
logging.syslog-handler.level=The log level specifying which message levels will be logged by this logger. Message levels lower than this value will be discarded.
logging.syslog-handler.app-name=The app name used when formatting the message in RFC5424 format. By default the app name is "java".
logging.syslog-handler.facility= Facility as defined by RFC-5424 (http://tools.ietf.org/html/rfc5424)and RFC-3164 (http://tools.ietf.org/html/rfc3164).
logging.syslog-handler.hostname=The name of the host the messages are being sent from. For example the name of the host the application server is running on.
logging.syslog-handler.named-formatter=The name of the defined formatter to be used on the handler.
logging.syslog-handler.port=The port the syslog server is listening on.
logging.syslog-handler.server-address=The address of the syslog server.
logging.syslog-handler.syslog-format=Formats the log message according to the RFC specification.

# Pattern formatter descriptions
logging.pattern-formatter=A pattern formatter to be used with handlers.
# Operations
logging.pattern-formatter.add=Adds a new pattern formatter.
logging.pattern-formatter.remove=Removes the pattern formatter.
# Attributes
logging.pattern-formatter.pattern=Defines a pattern for the formatter.
logging.pattern-formatter.color-map=The color-map attribute allows for a comma delimited list of colors to be used for different levels with a pattern formatter. \
  The format for the color mapping pattern is level-name:color-name.\
                                                    Valid Levels; severe, fatal, error, warn, warning, info, debug, trace, config, fine, finer, finest \
                                                    Valid Colors; black, green, red, yellow, blue, magenta, cyan, white, brightblack, brightred, brightgreen, \
                                                    brightblue, brightyellow, brightmagenta, brightcyan, brightwhite

# JSON formatter descriptions
logging.json-formatter=A formatter that formats log messages in JSON.
logging.json-formatter.add=Adds a new JSON formatter.
logging.json-formatter.remove=Removes the JSON formatter.
logging.json-formatter.date-format=The date/time format pattern. The pattern must be a valid \
  java.time.format.DateTimeFormatter.ofPattern() pattern. The default pattern is an ISO-8601 extended offset date-time \
  format.
logging.json-formatter.exception-output-type=Indicates how the cause of the logged message, if one is available, will be \
  added to the JSON output.
logging.json-formatter.key-overrides=Allows the names of the keys for the JSON properties to be overridden.
logging.json-formatter.key-overrides.exception=Allows the default key of exception to be overridden to the value provided.
logging.json-formatter.key-overrides.exception-caused-by=Allows the default key of causedBy to be overridden to the value provided.
logging.json-formatter.key-overrides.exception-circular-reference=Allows the default key of circularReference to be overridden to the value provided.
logging.json-formatter.key-overrides.exception-frame=Allows the default key of frame to be overridden to the value provided.
logging.json-formatter.key-overrides.exception-frame-class=Allows the default key of class to be overridden to the value provided.
logging.json-formatter.key-overrides.exception-frame-line=Allows the default key of line to be overridden to the value provided.
logging.json-formatter.key-overrides.exception-frame-method=Allows the default key of method to be overridden to the value provided.
logging.json-formatter.key-overrides.exception-frames=Allows the default key of frames to be overridden to the value provided.
logging.json-formatter.key-overrides.exception-message=Allows the default key of message to be overridden to the value provided.
logging.json-formatter.key-overrides.exception-reference-id=Allows the default key of refId to be overridden to the value provided.
logging.json-formatter.key-overrides.exception-suppressed=Allows the default key of suppressed to be overridden to the value provided.
logging.json-formatter.key-overrides.exception-type=Allows the default key of exceptionType to be overridden to the value provided.
logging.json-formatter.key-overrides.host-name=Allows the default key of hostName to be overridden to the value provided.
logging.json-formatter.key-overrides.level=Allows the default key of level to be overridden to the value provided.
logging.json-formatter.key-overrides.logger-class-name=Allows the default key of loggerClassName to be overridden to the value provided.
logging.json-formatter.key-overrides.logger-name=Allows the default key of loggerName to be overridden to the value provided.
logging.json-formatter.key-overrides.mdc=Allows the default key of mdc to be overridden to the value provided.
logging.json-formatter.key-overrides.message=Allows the default key of message to be overridden to the value provided.
logging.json-formatter.key-overrides.ndc=Allows the default key of ndc to be overridden to the value provided.
logging.json-formatter.key-overrides.process-id=Allows the default key of processId to be overridden to the value provided.
logging.json-formatter.key-overrides.process-name=Allows the default key of processName to be overridden to the value provided.
logging.json-formatter.key-overrides.record=Allows the default key of record to be overridden to the value provided.
logging.json-formatter.key-overrides.sequence=Allows the default key of sequence to be overridden to the value provided.
logging.json-formatter.key-overrides.source-class-name=Allows the default key of sourceClassName to be overridden to the value provided.
logging.json-formatter.key-overrides.source-file-name=Allows the default key of sourceFileName to be overridden to the value provided.
logging.json-formatter.key-overrides.source-line-number=Allows the default key of sourceLineNumber to be overridden to the value provided.
logging.json-formatter.key-overrides.source-method-name=Allows the default key of sourceMethodName to be overridden to the value provided.
logging.json-formatter.key-overrides.source-module-name=Allows the default key of sourceModuleName to be overridden to the value provided.
logging.json-formatter.key-overrides.source-module-version=Allows the default key of sourceModuleVersion to be overridden to the value provided.
logging.json-formatter.key-overrides.stack-trace=Allows the default key of stackTrace to be overridden to the value provided.
logging.json-formatter.key-overrides.thread-id=Allows the default key of threadId to be overridden to the value provided.
logging.json-formatter.key-overrides.thread-name=Allows the default key of threadName to be overridden to the value provided.
logging.json-formatter.key-overrides.timestamp=Allows the default key of timestamp to be overridden to the value provided.
logging.json-formatter.meta-data=Sets the meta data to use in the JSON format. Properties will be added to each log \
  message.
logging.json-formatter.pretty-print=Indicates whether or not pretty printing should be used when formatting.
logging.json-formatter.print-details=Sets whether or not details should be printed. Printing the details can be \
  expensive as the values are retrieved from the caller. The details include the source class name, source file name, \
  source method name, source module name, source module version and source line number.
logging.json-formatter.record-delimiter=The value to be used to indicate the end of a record. If set to null no \
  delimiter will be used at the end of the record. The default value is a line feed.
logging.json-formatter.zone-id=The zone ID for formatting the date and time. The system default is used if left undefined.


# XML formatter descriptions

logging.xml-formatter=A formatter that formats log messages in XML.
logging.xml-formatter.add=Adds a new XML formatter.
logging.xml-formatter.remove=Removes the XML formatter.
logging.xml-formatter.date-format=The date/time format pattern. The pattern must be a valid \
  java.time.format.DateTimeFormatter.ofPattern() pattern. The default pattern is an ISO-8601 extended offset date-time \
  format.
logging.xml-formatter.exception-output-type=Indicates how the cause of the logged message, if one is available, will be \
  added to the XML output.
logging.xml-formatter.key-overrides=Allows the names of the keys for the XML properties to be overridden.
logging.xml-formatter.key-overrides.exception=Allows the default key of exception to be overridden to the value provided.
logging.xml-formatter.key-overrides.exception-caused-by=Allows the default key of causedBy to be overridden to the value provided.
logging.xml-formatter.key-overrides.exception-circular-reference=Allows the default key of circularReference to be overridden to the value provided.
logging.xml-formatter.key-overrides.exception-frame=Allows the default key of frame to be overridden to the value provided.
logging.xml-formatter.key-overrides.exception-frame-class=Allows the default key of class to be overridden to the value provided.
logging.xml-formatter.key-overrides.exception-frame-line=Allows the default key of line to be overridden to the value provided.
logging.xml-formatter.key-overrides.exception-frame-method=Allows the default key of method to be overridden to the value provided.
logging.xml-formatter.key-overrides.exception-frames=Allows the default key of frames to be overridden to the value provided.
logging.xml-formatter.key-overrides.exception-message=Allows the default key of message to be overridden to the value provided.
logging.xml-formatter.key-overrides.exception-reference-id=Allows the default key of refId to be overridden to the value provided.
logging.xml-formatter.key-overrides.exception-suppressed=Allows the default key of suppressed to be overridden to the value provided.
logging.xml-formatter.key-overrides.exception-type=Allows the default key of exceptionType to be overridden to the value provided.
logging.xml-formatter.key-overrides.host-name=Allows the default key of hostName to be overridden to the value provided.
logging.xml-formatter.key-overrides.level=Allows the default key of level to be overridden to the value provided.
logging.xml-formatter.key-overrides.logger-class-name=Allows the default key of loggerClassName to be overridden to the value provided.
logging.xml-formatter.key-overrides.logger-name=Allows the default key of loggerName to be overridden to the value provided.
logging.xml-formatter.key-overrides.mdc=Allows the default key of mdc to be overridden to the value provided.
logging.xml-formatter.key-overrides.message=Allows the default key of message to be overridden to the value provided.
logging.xml-formatter.key-overrides.ndc=Allows the default key of ndc to be overridden to the value provided.
logging.xml-formatter.key-overrides.process-id=Allows the default key of processId to be overridden to the value provided.
logging.xml-formatter.key-overrides.process-name=Allows the default key of processName to be overridden to the value provided.
logging.xml-formatter.key-overrides.record=Allows the default key of record to be overridden to the value provided.
logging.xml-formatter.key-overrides.sequence=Allows the default key of sequence to be overridden to the value provided.
logging.xml-formatter.key-overrides.source-class-name=Allows the default key of sourceClassName to be overridden to the value provided.
logging.xml-formatter.key-overrides.source-file-name=Allows the default key of sourceFileName to be overridden to the value provided.
logging.xml-formatter.key-overrides.source-line-number=Allows the default key of sourceLineNumber to be overridden to the value provided.
logging.xml-formatter.key-overrides.source-method-name=Allows the default key of sourceMethodName to be overridden to the value provided.
logging.xml-formatter.key-overrides.source-module-name=Allows the default key of sourceModuleName to be overridden to the value provided.
logging.xml-formatter.key-overrides.source-module-version=Allows the default key of sourceModuleVersion to be overridden to the value provided.
logging.xml-formatter.key-overrides.stack-trace=Allows the default key of stackTrace to be overridden to the value provided.
logging.xml-formatter.key-overrides.thread-id=Allows the default key of threadId to be overridden to the value provided.
logging.xml-formatter.key-overrides.thread-name=Allows the default key of threadName to be overridden to the value provided.
logging.xml-formatter.key-overrides.timestamp=Allows the default key of timestamp to be overridden to the value provided.
logging.xml-formatter.meta-data=Sets the meta data to use in the XML format. Properties will be added to each log \
  message.
logging.xml-formatter.namespace-uri=Sets the namespace URI used for each record if print-namespace attribute is true. \
  Note that if no namespace-uri is defined and there are overridden keys no namespace will be written regardless if the \
  print-namespace attribute is set to true.
logging.xml-formatter.pretty-print=Indicates whether or not pretty printing should be used when formatting.
logging.xml-formatter.print-details=Sets whether or not details should be printed. Printing the details can be \
  expensive as the values are retrieved from the caller. The details include the source class name, source file name, \
  source method name, source module name, source module version and source line number.
logging.xml-formatter.print-namespace=Turns on or off the printing of the namespace for each <record/>. This is set to \
  false by default.
logging.xml-formatter.record-delimiter=The value to be used to indicate the end of a record. If set to null no \
  delimiter will be used at the end of the record. The default value is a line feed.
logging.xml-formatter.zone-id=The zone ID for formatting the date and time. The system default is used if left undefined.

# Custom formatter descriptions
logging.custom-formatter=A custom formatter to be used with handlers. Note that most log records are formatted in the printf format. Formatters may require \
  invocation of the org.jboss.logmanager.ExtLogRecord#getFormattedMessage() for the message to be properly formatted.
# Operations
logging.custom-formatter.add=Adds a new custom formatter.
logging.custom-formatter.remove=Removes the custom formatter.
# Attributes
logging.custom-formatter.class=The logging formatter class to be used.
logging.custom-formatter.module=The module that the logging formatter depends on.
logging.custom-formatter.properties=Defines the properties used for the logging formatter. All properties must be accessible via a setter method.
logging.custom-formatter.properties.name=Defines the name of the property to set.
logging.custom-formatter.properties.value=Defines value of the property.

# Custom filter descriptions
logging.filter=A filter to be used with handlers and loggers. Please note the name of the filter should start with an \
  alpha character and not contain any special characters. The following names are considered reserved names; \
  accept, deny, not, all, any, levelChange, levels, levelRange, match, substitute, substituteAll.
# Operations
logging.filter.add=Adds a new filter.
logging.filter.remove=Removes the filter.
# Attributes
logging.filter.class=The logging filter class to be used.
logging.filter.module=The module that the logging filter depends on.
logging.filter.constructor-properties=Defines the constructor properties used for the logging filter.
logging.filter.constructor-properties.name=Defines the name of the constructor property to set.
logging.filter.constructor-properties.value=Defines value of the constructor property.
logging.filter.properties=Defines the properties used for the logging filter. All properties must be accessible via a setter method.
logging.filter.properties.name=Defines the name of the property to set.
logging.filter.properties.value=Defines value of the property.

# Logging Deployment descriptions
logging.deployment=Information about the logging configuration for this deployment. Note that this may not be accurate \
  if the deployment is using some other means of configuring a log manager such as logback. The resolved configuration \
  is what loggers not covered by the deployments specific log manager would use.
logging.deployment.configuration=The configuration being used for the deployment. For configurations within the deployment \
  this is the path to the configuration file used. For logging profiles it's "profile-" followed by the name of the profile. \
  Otherwise the value will be "default" to indicate it's using the logging configuration as defined by the logging subsystem.

# Deployment handler descriptions
logging.deployment.handler=Describes the configured handlers being used on a deployment.
logging.deployment.handler.encoding=The encoding the handler has been set to use.
logging.deployment.handler.level=The log level specifying which message levels will be logged by this handler. Message levels lower than this value will be discarded.
logging.deployment.handler.formatter=The name of the defined formatter that this handler is using.
logging.deployment.handler.class-name=The class name for the handler.
logging.deployment.handler.module=The module name the handler was set to use.
logging.deployment.handler.filter=The name of the filter set on the handler.
logging.deployment.handler.handlers=Any sub-handlers defined on the handler.
logging.deployment.handler.handlers.handler=The name of the log handler.
logging.deployment.handler.properties=Additional properties that were set on the handler.
logging.deployment.handler.properties.name=Defines the name of the property to set.
logging.deployment.handler.properties.value=Defines value of the property.
logging.deployment.handler.error-manager=The error manager that was set on the handler.

# Deployment logger descriptions
logging.deployment.logger=Describes the configured loggers being used on a deployment.
logging.deployment.logger.level=The log level specifying which message levels will be logged by this logger. Message levels lower than this value will be discarded.
logging.deployment.logger.filter=The name of the filter set on the logger.
logging.deployment.logger.handlers=Any handlers defined on the logger.
logging.deployment.logger.handlers.handler=The name of the log handler.
logging.deployment.logger.use-parent-handlers=Specifies whether or not this logger sends its output to parent loggers.

# Deployment formatter descriptions
logging.deployment.formatter=Describes the configured formatters being used on a deployment.
logging.deployment.formatter.class-name=The class name for the formatter.
logging.deployment.formatter.module=The module name the formatter was set to use.
logging.deployment.formatter.properties=Additional properties that were set on the formatter.
logging.deployment.formatter.properties.name=Defines the name of the property to set.
logging.deployment.formatter.properties.value=Defines value of the property.

# Deployment filter descriptions
logging.deployment.filter=Describes the configured filters being used on a deployment.
logging.deployment.filter.class-name=The class name for the filter.
logging.deployment.filter.module=The module name the filter was set to use.
logging.deployment.filter.properties=Additional properties that were set on the filter.
logging.deployment.filter.properties.name=Defines the name of the property to set.
logging.deployment.filter.properties.value=Defines value of the property.

# Deployment pojo descriptions
logging.deployment.pojo=Describes the configured POJO's being used on a deployment.
logging.deployment.pojo.class-name=The class name for the POJO.
logging.deployment.pojo.module=The module name the POJO was set to use.
logging.deployment.pojo.properties=Additional properties that were set on the POJO.
logging.deployment.pojo.properties.name=Defines the name of the property to set.
logging.deployment.pojo.properties.value=Defines value of the property.

# Deployment error-manager descriptions
logging.deployment.error-manager=Describes the configured error managers being used on a deployment.
logging.deployment.error-manager.class-name=The class name for the error manager.
logging.deployment.error-manager.module=The module name the error manager was set to use.
logging.deployment.error-manager.properties=Additional properties that were set on the error manager.
logging.deployment.error-manager.properties.name=Defines the name of the property to set.
logging.deployment.error-manager.properties.value=Defines value of the property.
