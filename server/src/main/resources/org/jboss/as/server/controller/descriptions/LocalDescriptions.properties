# Server root
server=The root node of the server-level management model.
server.namespaces=Map of namespaces used in the configuration XML document, where keys are namespace prefixes and values are schema URIs.
server.schema-locations=Map of locations of XML schemas used in the configuration XML document, where keys are schema URIs and values are locations where the schema can be found.
server.name=The name of this server. If not set, defaults to the runtime value of InetAddress.getLocalHost().getHostName().
server.extension=A list of extension modules.
server.path=A list of named filesystem paths.
server.core-service=Core services provided by the server.
server.management=Specifies the enabled management protocols for the server
server.profile-name=The name of the server's configuration profile.
server.subsystem=The subsystems that make up the server's profile.
server.interface=A list of named network interfaces available for use on the server.
server.socket-binding-group=The socket binding group in use on the server.
server.system-property=A list of system properties to set on the server.
server.deployment=A list of deployments available for use on the server.
server.deployment-overlay=A list of deployment overlays available for use by the server
server.deployment-overlay-link=A set of links between a deployment overlay and a deployment
server.server-group=The name of the server group of which this server is a member.
server.host=The name of the managed domain host that is responsible for managing this server.
server.server-state=The current state of the server controller; either STARTING, RUNNING, RESTART_REQUIRED, RELOAD_REQUIRED or STOPPING.
server.runtime-configuration-state=The current persistent configuration state, one of starting, ok, reload-required, restart-required, stopping or stopped.
server.running-mode=The current running mode of the server. Either NORMAL (normal operations) or ADMIN_ONLY.  An ADMIN_ONLY server will start any configured management interfaces and accept management requests, but will not start services used for handling end user requests.
server.process-type=The type of process represented by this root resource. Always has a value of "Server" for a server resource.
server.launch-type=The manner in which the server process was launched. Either "DOMAIN" for a domain mode server launched by a Host Controller, "STANDALONE" for a standalone server launched from the command line, or "EMBEDDED" for a standalone server launched as an embedded part of an application running in the same virtual machine.
server.release-version=The version of the WildFly Core release this server is running.
server.release-codename=The codename of the WildFly Core release this server is running.
server.product-name=The name of the WildFly Core based product that is being run by this server.
server.product-version=The version of the WildFly Core based product release that is being run by this server.
server.management-major-version=The major version of the WildFly Core kernel management interface that is provided by this server.
server.management-minor-version=The minor version of the WildFly Core kernel management interface that is provided by this server.
server.management-micro-version=The micro version of the WildFly Core kernel management interface that is provided by this server.
server.uuid=Unique Id of this server instance.
server.organization=Identification of the current organization running this server.
server.env=The server environment.
server.env.base-dir=The base directory for the server.
server.env.config-dir=The directory where the configurations are stored.
server.env.content-dir=The directory where user content (e.g. deployments) that is managed by the server is stored.
server.env.config-file=The configuration file used to launch the server.
server.env.data-dir=The data directory.
server.env.deploy-dir=Deprecated variant of 'content-dir'.
server.env.ext-dirs=A list of ext directories.
server.env.home-dir=The home directory for the server.
server.env.host-name=The host name.
server.env.launch-type=The type of the running server.
server.env.log-dir=The directory where log files are sent.
server.env.modules-dir=The directory where modules are found.
server.env.modules-dir.deprecated=Has no real meaning and should not be regarded as providing any sort of useful information. The "modules" directory is the default location from which JBoss Modules looks to find modules. However, this behavior is in no way controlled by the value returned by this method, nor is it guaranteed that modules will be loaded from only one directory, nor is it guaranteed that the "modules" directory will be one of the directories used.
server.env.node-name=The name of the server node.
server.env.qualified-host-name=The qualified host name.
server.env.initial-running-mode=The initial running mode of the server, when the server process was launched. Either NORMAL or ADMIN_ONLY.  An ADMIN_ONLY server will start any configured management interfaces and accept management requests, but will not start services used for handling end user requests.
server.env.server-name=The name of the server.
server.env.temp-dir=The temporary directory.
server.suspend-state=The suspend state of the server
server.env.start-suspended=Start the server suspended.
server.env.start-gracefully=Start the server gracefully.

# Lifecycle operations

server.reload=Reloads the server by shutting down all its services and starting again. The JVM itself is not restarted.
server.reload.admin-only=Whether the server should start in running mode ADMIN_ONLY when it restarts. An ADMIN_ONLY server will start any configured management interfaces and accept management requests, but will not start services used for handling end user requests.
server.reload.use-current-server-config=Only has an effect if --read-only-server-config was specified when starting the server. In that case, if this parameter is set to false the reloaded server loads the original configuration version; if null or true the current runtime version of the model is used.
server.reload.server-config=Use to override the name of the server config to use for the reloaded server.  When making changes to the model after the reload, the changes will still be persisted to the original server configuration file that was first used to boot up the server. This parameter is resolved the same way as the --server-config command-line option.
server.reload.start-mode=Can be either normal, suspend or admin-only. If it is suspend the server will be started in suspended mode, if it is admin only the server will be started in admin-only mode.
server.reload.admin-only.deprecated=Use start-mode=admin-only instead.
server.reload.blocking=Whether the operation should block and wait until the server is reloaded.
server.reload.reply=The status of the server following execution of this operation.
server.reload.deprecated=This operation may be removed from the server-config resource in a future version; use the /host=*/server= resource for server lifecycle operations.
server.start=Start a server.
server.start.blocking=Whether the operation should block and wait until the server is started.
server.start.start-mode=The mode the servers should started in, can be either suspend or normal.
server.start.reply=The status of the server following execution of this operation.
server.restart=Restart a currently running server.
server.restart.blocking=Whether the operation should block and wait until the server is restarted.
server.restart.start-mode=The mode the server should restarted in, can be either suspend or normal.
server.restart.reply=The status of the server following execution of this operation.
server.stop=Stop a currently running server.
server.stop.blocking=Whether the operation should block and wait until the server is stopped.
server.stop.suspend-timeout=The graceful stop timeout in seconds. If this is zero (the default) then the server will stop immediately. A value larger than zero means the server will wait up to this many seconds for all active requests to finish. A value smaller than zero means that the server will wait indefinitely for all active requests to finish.
server.stop.timeout=If this timeout is set a graceful shutdown will be attempted. If this is zero (the default) then the server will shutdown immediately. A value larger than zero means the server will wait up to this many seconds for all active requests to finish. A value smaller than zero means that the server will wait indefinitely for all active requests to finish.
server.stop.timeout.deprecated=Use suspend-timeout instead.
server.stop.reply=The status of the server following execution of this operation.
server.destroy=Destroy the server process. In case the server is not in the stopping state, it will attempt to stop the server first.
server.kill=Kill the server process. In case the server is not in the stopping state, it will attempt to stop the server first. This operation may not work on all platforms and will try to destroy the process if not available.
server.shutdown=Shuts down the server via a call to System.exit(0)
server.shutdown.restart=If true, once shutdown the server will be restarted again
server.shutdown.suspend-timeout=The graceful shutdown timeout in seconds. If this is zero (the default) then the server will shutdown immediately. A value larger than zero means the server will wait up to this many seconds for all active requests to finish. A value smaller than zero means that the server will wait indefinitely for all active requests to finish.
server.shutdown.timeout=If this timeout is set a graceful shutdown will be attempted. If this is zero (the default) then the server will shutdown immediately. A value larger than zero means the server will wait up to this many seconds for all active requests to finish. A value smaller than zero means that the server will wait indefinitely for all active requests to finish.
server.shutdown.timeout.deprecated=Use suspend-timeout instead.
server.shutdown.perform-installation=Restart the server and perform any pending installation.
server.suspend=Suspends server operations gracefully. All current requests will complete normally, however no new requests will be accepted.
server.suspend.suspend-timeout=The suspend operation timeout in seconds. If this is zero (the default) the operation will return immediately. A value larger than zero means the operation will wait up to this many seconds to complete before returning. A value smaller than zero means that the operation will wait indefinitely for all active requests to finish. Note that the operation will not roll back if the timeout is exceeded, it just means that not all current requests completed in the specified timeout.
server.suspend.timeout=The timeout that a suspend operation will wait for the suspend operation to complete before returning. If this is zero the operation will return immediately, -1 means that it will wait indefinitely. Note that the operation will not roll back if the timeout is exceeded, it just means that not all current requests completed in the specified timeout.
server.suspend.timeout.deprecated=Use suspend-timeout instead.
server.resume=Resumes normal operations on a suspended server.
# lifecycle ops on the HC server-config resources are deprecated. The deprecation messages are in this bundle because the rest of the op description is here
server.start.deprecated=This operation may be removed from the server-config resource in a future version; use the /host=*/server= resource for server lifecycle operations.
server.restart.deprecated=This operation may be removed from the server-config resource in a future version; use the /host=*/server= resource for server lifecycle operations.
server.stop.deprecated=This operation may be removed from the server-config resource in a future version; use the /host=*/server= resource for server lifecycle operations.
server.destroy.deprecated=This operation may be removed from the server-config resource in a future version; use the /host=*/server= resource for server lifecycle operations.
server.kill.deprecated=This operation may be removed from the server-config resource in a future version; use the /host=*/server= resource for server lifecycle operations.
server.suspend.deprecated=This operation may be removed from the server-config resource in a future version; use the /host=*/server= resource for server lifecycle operations.
server.resume.deprecated=This operation may be removed from the server-config resource in a future version; use the /host=*/server= resource for server lifecycle operations.

server.set-server-group-hosts=Internal operation passed in at boot to set the server group and host.

# Management
core.management.native-interface=Configuration of the server's native management interface
core.management.native-interface.deprecated=The native-interface configuration is deprecated and may be removed or moved in future versions.
core.management.native-interface.add=Adds the server's native management interface
core.management.native-interface.remove=Removes the server's native management interface
core.management.native-interface.interface=Deprecated -- use 'socket-binding'. The network interface on which the server's socket for native management communication should be opened. Must be 'undefined' if the 'socket-binding' attribute is set.
core.management.native-interface.interface.deprecated=Use 'socket-binding'.
core.management.native-interface.port=Deprecated -- use 'socket-binding'. The port on which the server's socket for native management communication should be opened. Must be 'undefined' if the 'socket-binding' attribute is set.
core.management.native-interface.port.deprecated=Use 'socket-binding'.
core.management.native-interface.ssl-context=Reference to the SSLContext to use for this management interface.
core.management.native-interface.security-realm=The legacy security realm to use for the native management interface.
core.management.native-interface.security-realm.deprecated=Configuration should migrate to reference a 'sasl-authentication-factory' and 'ssl-context' as required.
core.management.native-interface.sasl-authentication-factory=The SASL authentication policy to use to secure this interface.
core.management.native-interface.socket-binding=The name of the socket binding configuration to use for the native management interface's socket.
core.management.native-interface.sasl-protocol=The name of the protocol to be passed to the SASL mechanisms used for authentication.
core.management.native-interface.sasl-protocol.deprecated=Only for use with the legacy security realms.
core.management.native-interface.server-name=The name of the server used in the initial Remoting exchange and within the SASL mechanisms.
core.management.native-interface.server-name.deprecated=Only for use with the legacy security realms.
core.management.native-remoting-interface=Configuration of the server's native management interface using a connector from the remoting subsystem.
core.management.native-remoting-interface.deprecated=The native-remoting-interface configuration is deprecated and may be removed or moved in future versions.
core.management.native-remoting-interface.add=Adds the server's native management interface using a connector from the remoting subsystem.
core.management.native-remoting-interface.remove=Removes the server's native management interface using a connector from the remoting subsystem.
core.management.http-interface=Configuration of the server's HTTP management interface
core.management.http-interface.deprecated=The http-interface configuration is deprecated and may be removed or moved in future versions.
core.management.http-interface.add=Adds the configuration of the server's HTTP management interface
core.management.http-interface.allowed-origins=Comma separated list of trusted Origins for sending Cross-Origin Resource Sharing requests on the management API once the user is authenticated.
core.management.http-interface.remove=Adds the configuration of the server's HTTP management interface
core.management.http-interface.interface=Deprecated -- use 'socket-binding'. The network interface on which the server's socket for HTTP management communication should be opened. Must be 'undefined' if the 'socket-binding' or 'secure-socket-binding' attribute is set.
core.management.http-interface.interface.deprecated=Use 'socket-binding'.
core.management.http-interface.port=Deprecated -- use 'socket-binding'. The port on which the server's socket for HTTP management communication should be opened. Must be 'undefined' if the 'socket-binding' attribute is set.
core.management.http-interface.port.deprecated=Use 'socket-binding'.
core.management.http-interface.secure-port=Deprecated -- use 'secure-socket-binding'. The port on which the server's socket for HTTPS management communication should be opened. Must be 'undefined' if the 'socket-binding' or 'secure-socket-binding' attribute is set.
core.management.http-interface.secure-port.deprecated=Use 'secure-socket-binding'.
core.management.http-interface.http-authentication-factory=The authentication policy to use to secure the interface for normal HTTP requests.
core.management.http-interface.ssl-context=Reference to the SSLContext to use for this management interface.
core.management.http-interface.security-realm=The legacy security realm to use for the HTTP management interface.
core.management.http-interface.security-realm.deprecated=Configuration should migrate to reference 'http-authentication-factory', 'sasl-authentication-factory', and 'ssl-context' capabilities as required.
core.management.http-interface.sasl-protocol=The name of the protocol to be passed to the SASL mechanisms used for authentication.
core.management.http-interface.sasl-protocol.deprecated=Only for use with the legacy security realms.
core.management.http-interface.server-name=The name of the server used in the initial Remoting exchange and within the SASL mechanisms.
core.management.http-interface.server-name.deprecated=Only for use with the legacy security realms.
core.management.http-interface.socket-binding=The name of the socket binding configuration to use for the HTTP management interface's socket.
core.management.http-interface.secure-socket-binding=The name of the socket binding configuration to use for the HTTPS management interface's socket.  When defined at least one of ssl-context or security-realm must also be defined.
core.management.http-interface.console-enabled=Flag that indicates admin console is enabled
core.management.http-interface.constant-headers=The set of constant HTTP headers to apply to response messages.
core.management.http-interface.constant-headers.headers=The headers to set for the matched path.
core.management.http-interface.constant-headers.path=The prefix of the path the headers should be applied to.
core.management.http-interface.constant-headers.name=The name of the HTTP header to set.
core.management.http-interface.constant-headers.value=The value to set for the HTTP header.
core.management.http-interface.http-upgrade-enabled=Flag that indicates HTTP Upgrade is enabled, which allows HTTP requests to be upgraded to native remoting connections
core.management.http-interface.http-upgrade-enabled.deprecated=Instead use http-upgrade.enabled
core.management.http-interface.http-upgrade=HTTP Upgrade specific configuration
core.management.http-interface.http-upgrade.enabled=Flag that indicates HTTP Upgrade is enabled, which allows HTTP requests to be upgraded to native remoting connections
core.management.http-interface.http-upgrade.sasl-authentication-factory=The server side SASL authentication policy to use to secure the interface where the connection is after a HTTP upgrade.
core.service-container=The central container that manages all services in a running standalone server or in a host controller in a management domain.
core.module-loading=The modular classloading system.
core.module-loading.module-roots=A list of filesystem locations under which the module loading system looks for modules, arranged in order of precedence.
core.module-loading.module-roots.deprecated=Experimental and unsupported.
core.module-loading.module-roots.module-root=Filesystem location under which the module loading system looks for modules.
core.module-loading.list-resource-loader-paths=Provides a list of filesystem paths of the module, if there are any and the module loader exposes them.
core.module-loading.list-resource-loader-paths.module=The identifier of the module, in <name>[:<slot>] format. If the slot is not provided, a value of "main" is assumed.
core.module-loading.list-resource-loader-paths.reply=A list, each of whose elements is a filesystem location from which the module can load resources.
core.module-loading.list-resource-loader-paths.deprecated=Experimental and unsupported.
core.module-loading.module-info=Displays information about modules in running system
core.module-loading.module-info.name=Module name
core.module-loading.module-info.slot=Module slot
core.module-loading.module-info.reply=A module information with its dependencies
core.module-loading.module-info.main-class=Main class of the module
core.module-loading.module-info.fallback-loader=Main class of the module
core.module-loading.module-info.dependencies=List of module dependencies
core.module-loading.dependencies.dependency-name=Name of the dependency
core.module-loading.dependencies.module-name=Module name of dependency
core.module-loading.dependencies.export-filter=Export filter
core.module-loading.dependencies.import-filter=Import filter
core.module-loading.dependencies.optional=Is dependency optional
core.module-loading.dependencies.local-loader-class=Class name of local loader
core.module-loading.dependencies.local-loader-paths=List of local loader paths
core.module-loading.module-info.resource-loaders=Resource loaders
core.module-loading.resource-loaders.type=Type of resource loader
core.module-loading.resource-loaders.paths=Resource loader paths

# /core-services=capability-registry

core.capability-registry=Capability registry
core.capability-registry.possible-capabilities=List of possible capabilities and where in model are they registered
core.capability-registry.possible-capabilities.name=Name of capability
core.capability-registry.possible-capabilities.dynamic=Is capability dynamically registered
core.capability-registry.possible-capabilities.scope=Scope of the capability
core.capability-registry.possible-capabilities.registration-points=List of registration points
core.capability-registry.capabilities=List of available runtime capabilities
core.capability-registry.capabilities.name=Name of capability
core.capability-registry.capabilities.dynamic=Is capability dynamically registered
core.capability-registry.capabilities.scope=Scope of the capability
core.capability-registry.capabilities.address=Address where capability is registered at
core.capability-registry.capabilities.attribute=Name of attribute that is pointing to capability
core.capability-registry.capabilities.registration-points=List of registration points
core.capability-registry.get-provider-points=Operation that returns possible registration point for capability
core.capability-registry.get-provider-points.name=Name of capability, required parameter
core.capability-registry.get-capability=Operation that returns runtime capability
core.capability-registry.get-capability.name=Name of capability, required
core.capability-registry.get-capability.scope=Name of scope in which to look for capability; optional, defaults to "global" scope
core.capability-registry.get-capability.capability=Capability
core.capability-registry.capability.name=Name of capability
core.capability-registry.capability.scope=Scope of capability, only important in domain mode, in standalone it is always "global"
core.capability-registry.capability.dynamic=Tells if capability is dynamic aka wildcard or not.
core.capability-registry.capability.registration-points=List of addresses where capability is registered at.
core.capability-registry.suggest-capabilities=Suggest capabilities that a resource can reference.
core.capability-registry.suggest-capabilities.name=Static name of capability
core.capability-registry.suggest-capabilities.dependent-address=Address of the dependent resource that references the capability.


# Interfaces
interface.resolve-internet-address=Takes a set of interface resolution criteria and finds an IP address on the local machine that matches the criteria, or fails if no matching IP address can be found.

# Deployments
deployment.remove=Remove a deployment from the list of content available for use. If the deployment is currently deployed in the runtime it will first be undeployed.

#Content
content.clean-obsolete-content=Clean contents that are not referenced anymore from the content repository.
content.clean-obsolete-content.reply=Two lists of hashes of content items: those that were marked as obsolete and those that were removed from the repository.
content.clean-obsolete-content.deleted-contents=List of hashes of content items that were removed from the content repository
content.clean-obsolete-content.marked-contents=List of hashes of content items that were marked as obsolete, making the eligible for future removal from the content repository

#vault
vault=Security Vault for attributes.
vault.code=Fully Qualified Name of the Security Vault Implementation.
vault.module=The name of the module to load up the vault implementation from.
vault.deprecated=The vault configuration resource is deprecated and may be removed or moved in future versions.

#vault.option=Security Vault option.
vault.vault-options=Security Vault options.
vault.add=Add the Security Vault.
vault.remove=Remove the Security Vault.

# System Properties
# resource descriptions
system-property.server=A system property to set on the server.
system-property.domain=A system property to set on all servers in the domain.
system-property.server-group=A system property to set on all servers in this server-group.
system-property.host=A system property to set on all servers on the host.
system-property.server-config=A system property to set on this server.
# attribute and op descriptions
system-property.add=Adds a system property or updates an existing one.
system-property.remove=Removes a system property.
system-property.value=The value of the system property.
system-property.boot-time=If true the system property is passed on the command-line to the started server jvm. If false, it will be pushed to the server as part of the startup sequence.

# Operations
composite=An operation that executes a list of other operations as a unit.
composite.steps=A list, where each item in the list has the same structure as a simple operation request.
composite.result=A list, where each item in the list is the result for the equivalently positioned item in the 'steps' parameter list
dump-services=Dumps all services running in the container, including their status and dependency information.
restart-required=Puts the server into a restart-required mode.
server-set-restart-required=Puts the server into a restart-required mode.
write-config=An operation to force the server to write its config file, without making any actual config change.

# Deployments
deployment=A deployment represents anything that can be deployed (e.g. an application such as Jakarta Enterprise Beans-JAR, WAR, EAR, any kind of standard archive such as RAR or JBoss-specific deployment) into a server.
deployment.name=Unique identifier of the deployment. Must be unique across all deployments.
deployment.runtime-name=Name by which the deployment should be known within a server's runtime. This would be equivalent to the file name of a deployment file, and would form the basis for such things as default Java Enterprise Edition application and module names. This would typically be the same as 'name', but in some cases users may wish to have two deployments with the same 'runtime-name' (e.g. two versions of "foo.war") both available in the deployment content repository, in which case the deployments would need to have distinct 'name' values but would have the same 'runtime-name'.
deployment.content=List of pieces of content that comprise the deployment.
deployment.enabled=Boolean indicating whether the deployment content is currently deployed in the runtime (or should be deployed in the runtime the next time the server starts.)
deployment.persistent=Boolean indicating whether the existence of the deployment should be recorded in the persistent server configuration. Only relevant to a standalone mode server. Default is 'true'. A deployment managed by a deployment scanner would have this set to 'false' to ensure the deployment is only deployed at server start if the scanner again detects the deployment.
deployment.owner=Address of a resource that has indicated it controls the lifecycle of this deployment (e.g. a deployment scanner resource.) Will be undefined if no resource claimed ownership when the deployment was added.
deployment.add=Adds previously uploaded content to the list of content available for use. Does not actually deploy the content unless the 'enabled' parameter is 'true'.
deployment.add-content=Add contents to an existing deployment.
deployment.add-content.overwrite=Indicates if added content should overwrite existing content.
deployment.add-content.content=List of pieces of content to be added to the deployment.
deployment.browse-content=List the pieces of content of a deployment.
deployment.browse-content.path=The relative path from a deployment to list the contents of.
deployment.browse-content.archive=If set to true, only the relative paths to archive files will be returned.
deployment.browse-content.depth=The depth to browse.
deployment.browse-content.reply.content=The pieces of content of a deployment and some information about them.
deployment.content.directory=Indicates if the content is a folder or not.
deployment.content.file-size=The size of the content if it is a file.
deployment.deploy=Deploy the specified deployment content into the runtime, optionally replacing existing content.
deployment.deploy.name=The name of the new content.
deployment.deploy.to-replace=The name of the content that is to be replaced.
deployment.read-content=Read the content of an existing deployment.
deployment.read-content.path=The relative path of the content to be read from an existing deployment.
deployment.read-content.reply.uuid=The uuid of the attached stream.
deployment.remove-content=Remove contents from an existing deployment.
deployment.remove-content.paths=List of paths of content to be removed from the deployment.
deployment.replace-deployment=Replace existing content in the runtime with new content. The new content must have been previously uploaded to the deployment content repository.
deployment.replace-deployment.runtime-name=Name by which the deployment should be known within a server's runtime. This would be equivalent to the file name of a deployment file, and would form the basis for such things as default Java Enterprise Edition application and module names. This would typically be the same as 'name', but in some cases users may wish to have two deployments with the same 'runtime-name' (e.g. two versions of "foo.war") both available in the deployment content repository, in which case the deployments would need to have distinct 'name' values but would have the same 'runtime-name'.
deployment.replace-deployment.content=List of pieces of content that comprise the deployment.
deployment.replace-deployment.name=The name of the new content.
deployment.replace-deployment.to-replace=The name of the content that is to be replaced.
deployment.full-replace-deployment=Add previously uploaded deployment content to the list of content available for use, replace existing content of the same name in the runtime, and remove the replaced content from the list of content available for use. This is equivalent to an 'add', 'undeploy', 'deploy', 'remove' sequence where the new content has the same name as the content being replaced. Precisely one of 'runtime-name', 'hash', 'input-stream-index', 'bytes' or 'url' must be specified.
deployment.full-replace-deployment.content=List of pieces of content that comprise the deployment.
deployment.full-replace-deployment.enabled=Boolean indicating whether the replacement deployment content should be deployed in the runtime (or should be deployed in the runtime the next time the server starts.) An undefined value indicates the state of the existing deployment should be retained.
deployment.full-replace-deployment.name=Unique identifier of the deployment. Must be unique across all deployments.
deployment.full-replace-deployment.runtime-name=Name by which the deployment should be known within a server's runtime. This would be equivalent to the file name of a deployment file, and would form the basis for such things as default Java Enterprise Edition application and module names. This would typically be the same as 'name', but in some cases users may wish to have two deployments with the same 'runtime-name' (e.g. two versions of "foo.war") both available in the deployment content repository, in which case the deployments would need to have distinct 'name' values but would have the same 'runtime-name'.
deployment.undeploy=Undeploy content from the runtime. The content remains in the list of content available for use.
deployment.redeploy=Undeploy existing content from the runtime and deploy it again.
deployment.explode=Convert zip format managed deployment content to exploded format.
deployment.explode.path=Relative path to an archive in a deployment to be exploded.
deployment.status=The current runtime status of a deployment. Possible status modes are OK, FAILED, and STOPPED. FAILED indicates a dependency is missing or a service could not start. STOPPED indicates that the deployment was not enabled or was manually stopped.
deployment.subsystem=Runtime resources created when the deployment is deployed, organized by the subsystem responsible for the runtime resource.
deployment.subdeployment=Runtime resources associated with a child deployment packaged inside another deployment; for example a war packaged inside an ear.
deployment.content.empty=Indicates that the deployment to be added is empty - so without any content.
deployment.content.hash=The hash of managed deployment content that has been uploaded to the domain's or standalone server's deployment content repository.
deployment.content.input-stream-index=The index into the operation's attached input streams of the input stream that contains deployment content that should be uploaded to the domain's or standalone server's deployment content repository.
deployment.content.bytes=Byte array containing the deployment content that should uploaded to the domain's or standalone server's deployment content repository.
deployment.content.path=Path (relative or absolute) to unmanaged content that is part of the deployment.
deployment.content.relative-to=Name of a system path to which the value of the 'path' is relative. If not set, the 'path' is considered to be absolute.
deployment.content.archive=Flag indicating whether unmanaged content is a zip archive (true) or exploded (false).
deployment.content.target-path=The relative path of an exploded deployment of this content.
deployment.content.url=The URL at which the deployment content is available for upload to the domain's or standalone server's deployment content repository.. Note that the URL must be accessible from the target of the operation (i.e. the Domain Controller or standalone server).
deployment.upload-deployment-bytes=Indicates that the deployment content in the included byte array should be added to the deployment content repository. Note that this operation does not indicate the content should be deployed into the runtime.
deployment.upload-deployment-bytes.bytes=Byte array containing the deployment content that should uploaded to the domain's or standalone server's deployment content repository.
deployment.upload-deployment-bytes.hash=The hash of managed deployment content that has been uploaded to the domain's or standalone server's deployment content repository.
deployment.upload-deployment-url=Indicates that the deployment content available at the included URL should be added to the deployment content repository. Note that this operation does not indicate the content should be deployed into the runtime.
deployment.upload-deployment-url.url=The URL at which the deployment content is available for upload to the domain's or standalone server's deployment content repository.. Note that the URL must be accessible from the target of the operation (i.e. the Domain Controller or standalone server).
deployment.upload-deployment-url.hash=The hash of managed deployment content that has been uploaded to the domain's or standalone server's deployment content repository.
deployment.upload-deployment-stream=Indicates that the deployment content available at the included input stream index should be added to the deployment content repository. Note that this operation does not indicate the content should be deployed into the runtime.
deployment.upload-deployment-stream.input-stream-index=The index into the operation's attached input streams of the input stream that contains deployment content that should be uploaded to the domain's or standalone server's deployment content repository.
deployment.upload-deployment-stream.hash=The hash of managed deployment content that has been uploaded to the domain's or standalone server's deployment content repository.
deployment.enabled-time=Last time the application was enabled
deployment.enabled-timestamp=Last timestamp the application was enabled. Format is yyyy-MM-dd HH:mm:ss,SSS zzz.
deployment.disabled-time=Last time the application was disabled
deployment.disabled-timestamp=Last timestamp the application was disabled. Format is yyyy-MM-dd HH:mm:ss,SSS zzz.
deployment.deployment-deployed=Notification sent when a deployment is deployed.
deployment.deployment-undeployed=Notification sent when a deployment is undeployed.
deployment.list-modules=List all module dependencies of the current deployment.
deployment.list-modules.verbose=Optional, default is false and results in brief info about the module dependencies, true to include detailed information about the module dependencies added to the current deployment.
deployment.managed=Indicates if the deployment is managed (aka uses the ContentRepository).
